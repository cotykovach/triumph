//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Triumph Beta
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "ai87BAFDCF"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_AdvancedCreateDialogButotn {
    int lv_img;
    int lv_lbl;
    int lv_btn;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
fixed gv_version;
fixed gv_selectionTimerTotalTime;
bool gv_daytime;
int gv_scoreboardscreen;
int gv_hidescoreboardbox;
int gv_numberofplayers;
int gv_numberofteams;
bool[13] gv_activeteams;
int gv_minimizescoreboard;
int[21] gv_teams;
int[21] gv_playernames;
int[21] gv_income;
int[21] gv_playerincome;
int[21] gv_playerstatus;
playergroup gv_scoreboardhidden;
int[13] gv_kills;
int[13] gv_deaths;
playergroup gv_p1;
playergroup gv_p2;
playergroup gv_p3;
playergroup gv_p4;
playergroup gv_p5;
playergroup gv_p6;
playergroup gv_p7;
playergroup gv_p8;
playergroup gv_remainingTeams;
playergroup gv_victorious;
bool gv_victoryApplied;
int gv_heroinfoamount;
string[13] gv_heroicon;
int gv_leftTeamPicks;
int[13] gv_teamPickImage;
int gv_rightTeamPicks;
int gv_shoptabpanel;
int gv_shoptabbutton;
int gv_talenttabpanel;
int gv_talenttabbutton;
int gv_miniontabpanel;
int gv_miniontabbutton;
int[16] gv_minionCurrentPage;
int[52] gv_minionimages;
int[52] gv_minionbuttons;
int gv_minionPanel;
int gv_minionBackdrop;
string[52] gv_minionimage;
int gv_nextminionpage;
int gv_nextminionpageimage;
int gv_previousminionpage;
int gv_previousminionpageimage;
int gv_minionPage1Button;
int gv_minionPage2Button;
int gv_minionPage3Button;
int[52] gv_talentcounter;
int[52] gv_talentimages;
int[52] gv_talentbuttons;
int gv_talentPanel;
int gv_talentBackdrop;
string[52] gv_talentimage;
int[52] gv_itemimage;
int[52] gv_itembuttons;
int gv_shopPanel;
int gv_shopBackdrop;
string[52] gv_itemiconimage;
int gv_commandPanelDialog;
int gv_infoPanel;
int gv_unitPanel;
int gv_uiContainer;
int[16] gv_storeCurrentPage;
int gv_nextstorepage;
int gv_nextstorepageimage;
int gv_previousstorepage;
int gv_previousstorepageimage;
int gv_storePage1Button;
int gv_storePage2Button;
int gv_storePage3Button;
gs_AdvancedCreateDialogButotn[5] gv_advancedCreateDialogButton;
int[13][26] gv_heroInfo;
int gv_menu;
int[6] gv_dialogPortrait;
int gv_choose;
int[14] gv_heroChoice;
int[14] gv_heroImage;
int[6] gv_info;
playergroup gv_noHero;
int[13] gv_heroLevel;
timer gv_gameBeginsTimer;
fixed gv_gameBeginsTimerTotal;
int gv_gameBeginsTimerWindow;
timer[13] gv_resurrectionTimer;
int[13] gv_resurrectionTimerWindow;
playergroup gv_playerTips;
int gv_selectionTimerWindow;
timer gv_selectionTimer;
string[16] gv_heroTypeSelection;
playergroup gv_selectedHero;
string[12] gv_remainingheroes;
int gv_maxrandomhero;
string gv_chosenhero;
bool gv_paladinTaken;
bool gv_dHTaken;
bool gv_mKTaken;
bool gv_kotGTaken;
bool gv_bMTaken;
bool gv_farSeerTaken;
bool gv_dKTaken;
bool gv_bladeMTaken;
bool gv_bloodMTaken;
bool gv_tCTaken;
bool gv_sHTaken;
bool gv_dLTaken;
timer gv_tauntTimer;
revealer gv_cheatReveal;
int gv_scaleGruntFootiesCount;
int gv_waveNumber;
region[2][4] gv_regionspawn;
int gv_team1CoreDialog;
int gv_team1CoreImage;
string gv_newCoreImage;
int gv_team1CoreLife;
int gv_team1Core2Dialog;
int gv_team1Core2Image;
int gv_team1Core2Life;
int gv_team2CoreDialog;
int gv_team2CoreImage;
int gv_team2CoreLife;
int gv_team2Core1Dialog;
int gv_team2Core1Image;
int gv_team2Core1Life;
string[51] gv_spawnMinionType;
int[51] gv_t1MinionCounter;
int[51] gv_t2MinionCounter;
int gv_waveinfopanel;
int gv_waveinfoitem;
timer gv_spawnTimer;
fixed gv_spawnTimerTotal;
int gv_spawnTimerWindow;
int gv_team1GruntCount;
region[4] gv_team1GruntSpawn;
region[4] gv_team2FootmanSpawn;
int gv_team2FootmanCount;
unit gv_beastmaster;
unit gv_blademaster;
region gv_ajairuStrike;
int gv_ajairuStrikeCounter;
unit gv_bloodmage;
fixed gv_hemorrhagedamage;
region gv_oceanofblood;
unit gv_oceanofbloodcaster;
unit gv_deathKnight;
int gv_bladeofZealCost;
unit gv_demonHunter;
unit gv_dreadlord;
unit gv_createdRitualOrb;
unit gv_farSeer;
unit gv_kotG;
unit gv_mountainKing;
unit gv_paladin;
unit gv_shadowHunter;
unit gv_taurenChieftain;
unit[13] gv_hero;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_version = 1.16;
    gv_selectionTimerTotalTime = 120.0;
    gv_daytime = true;
    gv_scoreboardscreen = c_invalidDialogId;
    gv_hidescoreboardbox = c_invalidDialogId;
    gv_minimizescoreboard = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_teams[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_playernames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_income[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_playerstatus[init_i] = c_invalidDialogControlId;
    }
    gv_scoreboardhidden = PlayerGroupEmpty();
    gv_p1 = PlayerGroupEmpty();
    gv_p2 = PlayerGroupEmpty();
    gv_p3 = PlayerGroupEmpty();
    gv_p4 = PlayerGroupEmpty();
    gv_p5 = PlayerGroupEmpty();
    gv_p6 = PlayerGroupEmpty();
    gv_p7 = PlayerGroupEmpty();
    gv_p8 = PlayerGroupEmpty();
    gv_remainingTeams = PlayerGroupEmpty();
    gv_victorious = PlayerGroupEmpty();
    gv_heroinfoamount = 19;
    gv_leftTeamPicks = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_teamPickImage[init_i] = c_invalidDialogControlId;
    }
    gv_rightTeamPicks = c_invalidDialogId;
    gv_shoptabpanel = c_invalidDialogId;
    gv_shoptabbutton = c_invalidDialogControlId;
    gv_talenttabpanel = c_invalidDialogId;
    gv_talenttabbutton = c_invalidDialogControlId;
    gv_miniontabpanel = c_invalidDialogId;
    gv_miniontabbutton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_minionimages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_minionbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_minionPanel = c_invalidDialogId;
    gv_minionBackdrop = c_invalidDialogId;
    gv_nextminionpage = c_invalidDialogControlId;
    gv_nextminionpageimage = c_invalidDialogControlId;
    gv_previousminionpage = c_invalidDialogControlId;
    gv_previousminionpageimage = c_invalidDialogControlId;
    gv_minionPage1Button = c_invalidDialogControlId;
    gv_minionPage2Button = c_invalidDialogControlId;
    gv_minionPage3Button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_talentcounter[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_talentimages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_talentbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_talentPanel = c_invalidDialogId;
    gv_talentBackdrop = c_invalidDialogId;
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_itemimage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_itembuttons[init_i] = c_invalidDialogControlId;
    }
    gv_shopPanel = c_invalidDialogId;
    gv_shopBackdrop = c_invalidDialogId;
    gv_commandPanelDialog = c_invalidDialogControlId;
    gv_infoPanel = c_invalidDialogControlId;
    gv_unitPanel = c_invalidDialogControlId;
    gv_uiContainer = c_invalidDialogControlId;
    gv_nextstorepage = c_invalidDialogControlId;
    gv_nextstorepageimage = c_invalidDialogControlId;
    gv_previousstorepage = c_invalidDialogControlId;
    gv_previousstorepageimage = c_invalidDialogControlId;
    gv_storePage1Button = c_invalidDialogControlId;
    gv_storePage2Button = c_invalidDialogControlId;
    gv_storePage3Button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_advancedCreateDialogButton[init_i].lv_img = c_invalidDialogControlId;
        gv_advancedCreateDialogButton[init_i].lv_lbl = c_invalidDialogControlId;
        gv_advancedCreateDialogButton[init_i].lv_btn = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        for (init_j = 0; init_j <= 25; init_j += 1) {
            gv_heroInfo[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_menu = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_dialogPortrait[init_i] = c_invalidDialogControlId;
    }
    gv_choose = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_heroChoice[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_heroImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_info[init_i] = c_invalidDialogId;
    }
    gv_noHero = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroLevel[init_i] = 1;
    }
    gv_gameBeginsTimer = TimerCreate();
    gv_gameBeginsTimerTotal = 60.0;
    gv_gameBeginsTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_resurrectionTimer[init_i] = TimerCreate();
    }
    gv_playerTips = PlayerGroupEmpty();
    gv_selectionTimerWindow = c_timerWindowNone;
    gv_selectionTimer = TimerCreate();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_heroTypeSelection[init_i] = "PreserverC";
    }
    gv_selectedHero = PlayerGroupEmpty();
    gv_maxrandomhero = 11;
    gv_tauntTimer = TimerCreate();
    gv_team1CoreDialog = c_invalidDialogId;
    gv_team1CoreImage = c_invalidDialogControlId;
    gv_newCoreImage = "Assets\\core\\core-100.dds";
    gv_team1CoreLife = c_invalidDialogControlId;
    gv_team1Core2Dialog = c_invalidDialogId;
    gv_team1Core2Image = c_invalidDialogControlId;
    gv_team1Core2Life = c_invalidDialogControlId;
    gv_team2CoreDialog = c_invalidDialogId;
    gv_team2CoreImage = c_invalidDialogControlId;
    gv_team2CoreLife = c_invalidDialogControlId;
    gv_team2Core1Dialog = c_invalidDialogId;
    gv_team2Core1Image = c_invalidDialogControlId;
    gv_team2Core1Life = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_spawnMinionType[init_i] = "";
    }
    gv_waveinfopanel = c_invalidDialogId;
    gv_waveinfoitem = c_invalidDialogControlId;
    gv_spawnTimer = TimerCreate();
    gv_spawnTimerWindow = c_timerWindowNone;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Menu (int lp_sizeX, int lp_sizeY, int lp_offsetX, int lp_offsetY, int lp_anchor, bool lp_showHide, playergroup lp_showHidePlayerGroup, string lp_backgroundImage, int lp_backgroundImageType, bool lp_backgroundTiled);
void gf_AdvancedCreateDialogButton (int lp_dialog, int lp_index, int lp_sizeX, int lp_sizeY, int lp_offsetX, int lp_offsetY, int lp_anchor, string lp_image, int lp_imageType, bool lp_imageTiled, text lp_text, text lp_tolltip);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_DayNightCycle;
trigger gt_CreateScoreboard;
trigger gt_ScoreboardHideShow;
trigger gt_Music;
trigger gt_GameValues;
trigger gt_VictoryLossCheck;
trigger gt_CreateMenu;
trigger gt_UIButtons;
trigger gt_DefaultPage;
trigger gt_ShopClicked;
trigger gt_MinionClicked;
trigger gt_TalentClicked;
trigger gt_MinionPanel;
trigger gt_MinionNextPage;
trigger gt_MinionPreviousPage;
trigger gt_MinionPage1;
trigger gt_MinionPage2;
trigger gt_MinionPage3;
trigger gt_HireMinion1;
trigger gt_HireMinion2;
trigger gt_HireMinion3;
trigger gt_HireMinion4;
trigger gt_HireMinion5;
trigger gt_HireMinion6;
trigger gt_HireMinion7;
trigger gt_HireMinion8;
trigger gt_HireMinion9;
trigger gt_HireMinion10;
trigger gt_HireMinion11;
trigger gt_HireMinion12;
trigger gt_HireMinion13;
trigger gt_HireMinion14;
trigger gt_HireMinion15;
trigger gt_HireMinion16;
trigger gt_HireMinion17;
trigger gt_HireMinion18;
trigger gt_HireMinion19;
trigger gt_HireMinion20;
trigger gt_HireMinion21;
trigger gt_HireMinion22;
trigger gt_HireMinion23;
trigger gt_HireMinion24;
trigger gt_HireMinion25;
trigger gt_HireMinion26;
trigger gt_HireMinion27;
trigger gt_HireMinion28;
trigger gt_HireMinion29;
trigger gt_HireMinion30;
trigger gt_HireMinion31;
trigger gt_HireMinion32;
trigger gt_HireMinion33;
trigger gt_HireMinion34;
trigger gt_HireMinion35;
trigger gt_HireMinion36;
trigger gt_HireMinion37;
trigger gt_HireMinion38;
trigger gt_HireMinion39;
trigger gt_HireMinion40;
trigger gt_HireMinion41;
trigger gt_HireMinion42;
trigger gt_HireMinion43;
trigger gt_HireMinion44;
trigger gt_HireMinion45;
trigger gt_TalentsPanel;
trigger gt_Talent0;
trigger gt_Talent1;
trigger gt_Talent2;
trigger gt_Talent3;
trigger gt_Talent4;
trigger gt_Talent5;
trigger gt_Talent6;
trigger gt_Talent7;
trigger gt_Talent8;
trigger gt_Talent9;
trigger gt_Talent10;
trigger gt_Talent11;
trigger gt_StorePanel;
trigger gt_PurchaseHealthPot1;
trigger gt_PurchaseEnergyPot1;
trigger gt_PurchaseClericScrollI;
trigger gt_PurchaseTravelersScrollI;
trigger gt_PurchaseShieldI;
trigger gt_PurchaseQuickswordI;
trigger gt_PurchaseBattleAxeI;
trigger gt_PurchaseWarHammerI;
trigger gt_PurchaseHealthPot2;
trigger gt_PurchaseEnergyPot2;
trigger gt_PurchaseClericScrollII;
trigger gt_PurchaseTravelersScrollII;
trigger gt_PurchaseShieldII;
trigger gt_PurchaseQuickswordII;
trigger gt_PurchaseBattleAxeII;
trigger gt_PurchaseWarHammerII;
trigger gt_PurchaseHealthPot3;
trigger gt_PurchaseEnergyPot3;
trigger gt_PurchaseClericScrollIII;
trigger gt_PurchaseTravelersScrollIII;
trigger gt_PurchaseShieldIII;
trigger gt_PurchaseQuickswordIII;
trigger gt_PurchaseBattleAxeIII;
trigger gt_PurchaseWarHammerIII;
trigger gt_PurchaseEnchantedStaffI;
trigger gt_PurchaseAdventurerBootsI;
trigger gt_PurchaseFootmanGauntletsI;
trigger gt_PurchaseGruntsBulwarkI;
trigger gt_PurchaseSpiritualNecklace;
trigger gt_PurchaseSobiMask;
trigger gt_PurchaseSkullTrinket;
trigger gt_PurchaseLuckyPocketWatch;
trigger gt_PurchaseEnchantedStaffII;
trigger gt_PurchaseAdventurerBootsII;
trigger gt_PurchaseFootmanGauntletsII;
trigger gt_PurchaseGruntsBulwarkII;
trigger gt_PurchaseInfernalCore;
trigger gt_PurchaseEssenceAbsorber;
trigger gt_PurchaseScoundrelsDagger;
trigger gt_PurchaseLostSheppardsStaff;
trigger gt_PurchaseEnchantedStaffIII;
trigger gt_PurchaseAdventurerBootsIII;
trigger gt_PurchaseFootmanGauntletsIII;
trigger gt_PurchaseGruntsBulwarkIII;
trigger gt_PurchaseBerserkersMask;
trigger gt_PurchaseWirtsUnclesLeg;
trigger gt_PurchaseStrangeArtifact;
trigger gt_PurchaseNaglesCoin;
trigger gt_PurchaseTomeofStr;
trigger gt_PurchaseTomeofAgility;
trigger gt_PurchaseTomeofInt;
trigger gt_StoreNextPage;
trigger gt_StorePreviousPage;
trigger gt_StorePage1;
trigger gt_StorePage2;
trigger gt_StorePage3;
trigger gt_DialogItemMouseEnter;
trigger gt_DialogItemMouseExit;
trigger gt_LevelGain;
trigger gt_HeroDeath;
trigger gt_HeroResurrection;
trigger gt_TreeMorph1;
trigger gt_TreeMorph2;
trigger gt_remainingheroes;
trigger gt_removechosenHero;
trigger gt_ReturntoHero;
trigger gt_SelectionTimerPostTip;
trigger gt_EndSelectTime;
trigger gt_ForceEndSelectTime;
trigger gt_RunSelectHero;
trigger gt_ChoosePaladin;
trigger gt_ChooseDemonHunter;
trigger gt_ChooseMountainKing;
trigger gt_ChooseKotG;
trigger gt_ChooseBeastMaster;
trigger gt_ChooseFarSeer;
trigger gt_ChooseDeathknight;
trigger gt_ChooseBlademaster;
trigger gt_ChooseBloodmage;
trigger gt_ChooseTaurenChieftain;
trigger gt_ChooseShadowHunter;
trigger gt_ChooseDreadlord;
trigger gt_FallBackHideInfo;
trigger gt_Wasted;
trigger gt_Talkshow;
trigger gt_Dog;
trigger gt_Light;
trigger gt_Intervention;
trigger gt_Fart;
trigger gt_Love;
trigger gt_sellitem;
trigger gt_GameTimerandCoreDialog;
trigger gt_CoreDialogUpdateTeam1;
trigger gt_CoreDialogUpdateTeam2;
trigger gt_GameBegins;
trigger gt_SpawnTimer;
trigger gt_SpawnExpire;
trigger gt_HireMercenaryGrunt;
trigger gt_HireMercenaryFootman;
trigger gt_ScaleGruntsFooties;
trigger gt_GlobeSpawn;
trigger gt_PostStunAttackMove9;
trigger gt_PostStunAttackMove10;
trigger gt_AttackMovePlayer9;
trigger gt_AttackMovePlayer10;
trigger gt_Player9Bounty;
trigger gt_Player10Bounty;
trigger gt_EssenceAbsorberHealth;
trigger gt_EssenceAbsorberMana;
trigger gt_LuckyCoin;
trigger gt_InfernalCoreDamage;
trigger gt_StrangeArtifactDamage;
trigger gt_Evasion;
trigger gt_Cleave;
trigger gt_Smash;
trigger gt_Taunt;
trigger gt_DivineStrike;
trigger gt_LesserTaunt;
trigger gt_AssignBeastmaster;
trigger gt_BrutalCleave;
trigger gt_InnerBeast;
trigger gt_Beastmaster05SecondCast;
trigger gt_Beastmaster1SecondCast;
trigger gt_Warcry;
trigger gt_Hatred;
trigger gt_AssignBlademaster;
trigger gt_KazeLeapAnimation;
trigger gt_KazeLeapDamage;
trigger gt_AjairuStrike;
trigger gt_GensoTrick;
trigger gt_GensoDeath;
trigger gt_TatsumakiStanceDefend;
trigger gt_TatsumakiStanceAttack;
trigger gt_AssignBloodmage;
trigger gt_HemorrhageDamage;
trigger gt_HemorrhageDoTDamage;
trigger gt_HemorrhageCast;
trigger gt_Hemorrhage;
trigger gt_BloodElementalHemorrhage;
trigger gt_BloodElementalSpawn;
trigger gt_BloodElementalDamage;
trigger gt_BloodElementalSize;
trigger gt_BloodElementalGlobeSpawn;
trigger gt_OceanofBloodStart;
trigger gt_OceanofBloodChanneling;
trigger gt_BloodsurgeCaster;
trigger gt_BloodsurgeAllies;
trigger gt_AssignDeathKnight;
trigger gt_DeathsCalling;
trigger gt_DeathsCallingDamage;
trigger gt_GhoulArmy;
trigger gt_BladeofZealCharge;
trigger gt_BladeofZeal;
trigger gt_UnholyPactTransform;
trigger gt_UnholyPactActivate;
trigger gt_DeathPlagueCast;
trigger gt_DeathPlagueDamage;
trigger gt_GhoulDies;
trigger gt_AssignDemonHunter;
trigger gt_SoulQuietus;
trigger gt_RelinquishStart;
trigger gt_RelinquishFinish;
trigger gt_HellfireBurstDamage;
trigger gt_HellfireBurnDamage;
trigger gt_IncubusDoTDamage;
trigger gt_IncubusInitialDamage;
trigger gt_IncubusExplodeDamage;
trigger gt_VampiricHeal;
trigger gt_AssignDreadlord;
trigger gt_Bloodfeast;
trigger gt_OminousGaze;
trigger gt_Shadowshift;
trigger gt_ShadowshiftDamage;
trigger gt_StopSoundDreadLord;
trigger gt_VampiricRitualOrbSpawn;
trigger gt_ChannelOrb;
trigger gt_KillOrb;
trigger gt_TasteforBloodBloodfeastCD;
trigger gt_AssignFarSeer;
trigger gt_ChainHeal;
trigger gt_UnleashElements;
trigger gt_FarSeerMute;
trigger gt_ShieldsoftheStormShield;
trigger gt_ShieldsoftheStormDamage;
trigger gt_IncinerateDamage;
trigger gt_PurgeDamage;
trigger gt_AssignKotG;
trigger gt_EntanglingRootsDamage;
trigger gt_TreantMod;
trigger gt_TreantRejuvenate;
trigger gt_RejuvenatingRainHeal;
trigger gt_RejuvenatingRainRecast;
trigger gt_AwakenAncient;
trigger gt_KeeperMute;
trigger gt_AncientsGrace;
trigger gt_AncientsGraceArmorInitialize;
trigger gt_AncientsGraceArmorActivate;
trigger gt_AssignMountainKing;
trigger gt_CreateMightyHammer;
trigger gt_DwarfMute;
trigger gt_ThunderClap;
trigger gt_MightyHammerDamage;
trigger gt_ThunderclapDamage;
trigger gt_ThunderclapMegaDamage;
trigger gt_HeartoftheMountain;
trigger gt_DivinePurpose;
trigger gt_AssignPaladin;
trigger gt_PaladinMute;
trigger gt_Paladin1SecondCast;
trigger gt_Paladin05SecondCast;
trigger gt_LightsBlessingAll;
trigger gt_RadianceDamage;
trigger gt_RadianceBurn;
trigger gt_RedemptionCast;
trigger gt_EnlightenmentInitialize;
trigger gt_EnlightenmentActivate;
trigger gt_AssignShadowHunter;
trigger gt_HexGain;
trigger gt_SpiritMojoStack;
trigger gt_SpiritMojoStackAlly;
trigger gt_SerpentWardStats;
trigger gt_SerpentWardManaRegen;
trigger gt_DarkVoodooBladeFirstImpact;
trigger gt_DarkVoodooBladeSecondImpact;
trigger gt_DarkVoodooBladeThirdImapct;
trigger gt_AssignTaurenChieftain;
trigger gt_TaurenChieftain05SecondCast;
trigger gt_TaurenMute;
trigger gt_RemoveSpiritwalk;
trigger gt_SpiritwalkDamage;
trigger gt_IceTremorDamage;
trigger gt_GlacialTotemPulseDamage;
trigger gt_GlacialTotemInitialize;
trigger gt_GlacialTotemApplyBehavior;
trigger gt_EchoingTundraChannel;
trigger gt_EchoingTundraCrystal;
trigger gt_EchoingTundraCrystalDamage;
trigger gt_SummonedIllusionLevel;
trigger gt_IllusiveIllusionSet;
trigger gt_NetherStormSpawn;
trigger gt_SarkonFireSpawn;
trigger gt_CallReinforcements;
trigger gt_ConsumeableFloatingText;
trigger gt_ItemintoNeutral;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { return ai87BAFDCF_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { return ai87BAFDCF_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai87BAFDCF") { ai87BAFDCF_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { ai87BAFDCF_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { return ai87BAFDCF_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { return ai87BAFDCF_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai87BAFDCF") { return ai87BAFDCF_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Menu (int lp_sizeX, int lp_sizeY, int lp_offsetX, int lp_offsetY, int lp_anchor, bool lp_showHide, playergroup lp_showHidePlayerGroup, string lp_backgroundImage, int lp_backgroundImageType, bool lp_backgroundTiled) {
    // Implementation
    DialogCreate(lp_sizeX, lp_sizeY, lp_anchor, lp_offsetX, lp_offsetY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lp_sizeX, lp_sizeY, lp_anchor, 0, 0, StringToText(""), lp_backgroundImage, lp_backgroundImageType, lp_backgroundTiled, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), lp_showHidePlayerGroup, lp_showHide);
}

void gf_AdvancedCreateDialogButton (int lp_dialog, int lp_index, int lp_sizeX, int lp_sizeY, int lp_offsetX, int lp_offsetY, int lp_anchor, string lp_image, int lp_imageType, bool lp_imageTiled, text lp_text, text lp_tolltip) {
    // Implementation
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lp_sizeX, lp_sizeY, lp_anchor, lp_offsetX, lp_offsetY, StringToText(""), lp_image, lp_imageType, lp_imageTiled, Color(100,100,100), c_triggerBlendModeNormal);
    gv_advancedCreateDialogButton[lp_index].lv_img = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturationColor(gv_advancedCreateDialogButton[lp_index].lv_img, Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lp_sizeX, lp_sizeY, lp_anchor, lp_offsetX, lp_offsetY, lp_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_advancedCreateDialogButton[lp_index].lv_lbl = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_advancedCreateDialogButton[lp_index].lv_lbl, "AiurChefCenterSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lp_sizeX, lp_sizeY, lp_anchor, lp_offsetX, lp_offsetY, lp_tolltip, StringExternal("Param/Value/DE165CEA"), "");
    gv_advancedCreateDialogButton[lp_index].lv_btn = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_advancedCreateDialogButton[lp_index].lv_btn, PlayerGroupAll(), 0.0, 100.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day Night Cycle
//--------------------------------------------------------------------------------------------------
bool gt_DayNightCycle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_daytime == true)) {
        GameSetLighting("KorhalNight", 0.0);
        GameTimeOfDaySet("00");
        gv_daytime = false;
    }
    else {
        GameSetLighting("Korhal", 0.0);
        GameTimeOfDaySet("12:00:00");
        gv_daytime = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightCycle_Init () {
    gt_DayNightCycle = TriggerCreate("gt_DayNightCycle_Func");
    TriggerAddEventTimePeriodic(gt_DayNightCycle, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Scoreboard
//--------------------------------------------------------------------------------------------------
bool gt_CreateScoreboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_height;
    bool lv_counted;
    int lv_tEAMCOUNT;

    // Variable Initialization
    lv_height = 100;
    lv_tEAMCOUNT = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberofplayers = (PlayerGroupCount(PlayerGroupActive()) + 0);
    DialogCreate(600, 600, c_anchorTopRight, 0, 0, true);
    gv_hidescoreboardbox = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_hidescoreboardbox, 32, 32, c_anchorTop, 250, 75, StringExternal("Param/Value/4C070D3A"), StringExternal("Param/Value/B672F89B"), "");
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_minimizescoreboard = DialogControlLastCreated();
    DialogSetVisible(gv_hidescoreboardbox, PlayerGroupActive(), true);
    DialogCreate(600, 600, c_anchorTopRight, 0, 0, true);
    gv_scoreboardscreen = DialogLastCreated();
    DialogSetVisible(gv_scoreboardscreen, PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, 75, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_playernames[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, 75, StringExternal("Param/Value/F3A4441E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_income[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, 75, StringExternal("Param/Value/09E28222"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_playerstatus[0] = DialogControlLastCreated();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[1] = true;
        }
        else {
            lv_counted = true;
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[2] = true;
        }
        else {
            lv_counted = true;
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[1] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/5F0ACC94"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "PreserverC")) {
                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[0], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HighTemplar")) {
                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[5], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "VoidHerald")) {
                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[8], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    }
                    else {
                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DeathKnight")) {
                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[6], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        }
                        else {
                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Stalker")) {
                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[10], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                            }
                            else {
                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HybridReaver")) {
                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[4], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                }
                                else {
                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zeratul")) {
                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[7], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                    }
                                    else {
                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zealot")) {
                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                        }
                                        else {
                                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DehakaMirrorImage")) {
                                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                            }
                                            else {
                                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Probe")) {
                                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[3], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                }
                                                else {
                                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DarkTemplar")) {
                                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[11], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                    }
                                                    else {
                                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "TaurenChieftan")) {
                                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[9], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/09545D2D"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_income[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/76F3A823"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "PreserverC")) {
                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[0], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HighTemplar")) {
                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[5], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "VoidHerald")) {
                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[8], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    }
                    else {
                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DeathKnight")) {
                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[6], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        }
                        else {
                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Stalker")) {
                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[10], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                            }
                            else {
                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HybridReaver")) {
                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[4], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                }
                                else {
                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zeratul")) {
                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[7], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                    }
                                    else {
                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zealot")) {
                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                        }
                                        else {
                                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DehakaMirrorImage")) {
                                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                            }
                                            else {
                                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Probe")) {
                                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[3], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                }
                                                else {
                                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DarkTemplar")) {
                                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[11], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                    }
                                                    else {
                                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "TaurenChieftan")) {
                                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[9], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/6803AAD5"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_income[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/15937373"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[2] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/3D87A789"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "PreserverC")) {
                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[0], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HighTemplar")) {
                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[5], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "VoidHerald")) {
                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[8], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    }
                    else {
                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DeathKnight")) {
                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[6], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        }
                        else {
                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Stalker")) {
                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[10], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                            }
                            else {
                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HybridReaver")) {
                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[4], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                }
                                else {
                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zeratul")) {
                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[7], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                    }
                                    else {
                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zealot")) {
                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                        }
                                        else {
                                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DehakaMirrorImage")) {
                                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                            }
                                            else {
                                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Probe")) {
                                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[3], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                }
                                                else {
                                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DarkTemplar")) {
                                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[11], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                    }
                                                    else {
                                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "TaurenChieftan")) {
                                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[9], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/5F95BC22"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_income[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/724EAB53"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "PreserverC")) {
                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[0], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HighTemplar")) {
                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[5], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "VoidHerald")) {
                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[8], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    }
                    else {
                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DeathKnight")) {
                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[6], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        }
                        else {
                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Stalker")) {
                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[10], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                            }
                            else {
                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "HybridReaver")) {
                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[4], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                }
                                else {
                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zeratul")) {
                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[7], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                    }
                                    else {
                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Zealot")) {
                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[1], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                        }
                                        else {
                                            if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DehakaMirrorImage")) {
                                                libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[2], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                            }
                                            else {
                                                if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "Probe")) {
                                                    libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[3], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                }
                                                else {
                                                    if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "DarkTemplar")) {
                                                        libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[11], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                    }
                                                    else {
                                                        if ((gv_heroTypeSelection[PlayerGroupLoopCurrent()] == "TaurenChieftan")) {
                                                            libNtve_gf_CreateDialogItemImage(gv_scoreboardscreen, 25, 25, c_anchorTop, -250, lv_height, StringToText(""), gv_heroicon[9], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/50B4AEE1"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_income[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/CC14B950"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateScoreboard_Init () {
    gt_CreateScoreboard = TriggerCreate("gt_CreateScoreboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scoreboard Hide/Show
//--------------------------------------------------------------------------------------------------
bool gt_ScoreboardHideShow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minimizescoreboard))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_scoreboardhidden, EventPlayer()) == false)) {
        libNtve_gf_SetDialogItemText(gv_minimizescoreboard, StringExternal("Param/Value/DBB2768A"), PlayerGroupSingle(EventPlayer()));
        PlayerGroupAdd(gv_scoreboardhidden, EventPlayer());
        DialogSetVisible(gv_scoreboardscreen, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        libNtve_gf_SetDialogItemText(gv_minimizescoreboard, StringExternal("Param/Value/F9887B79"), PlayerGroupSingle(EventPlayer()));
        PlayerGroupRemove(gv_scoreboardhidden, EventPlayer());
        DialogSetVisible(gv_scoreboardscreen, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreboardHideShow_Init () {
    gt_ScoreboardHideShow = TriggerCreate("gt_ScoreboardHideShow_Func");
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Music
//--------------------------------------------------------------------------------------------------
bool gt_Music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_PlaySoundLinkasMusic(SoundLink("Music_EndCreditsS", -1), true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Music_Init () {
    gt_Music = TriggerCreate("gt_Music_Func");
    TriggerAddEventMapInit(gt_Music);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Values
//--------------------------------------------------------------------------------------------------
bool gt_GameValues_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_fishrandom;
    int lv_counter;
    int lv_player;
    int lv_randomGenerated;
    region[21] lv_spawnArray;
    region[13] lv_heroSpawnPoint;
    playergroup lv_fFAGroup;
    playergroup lv_team1;
    playergroup lv_team2;
    playergroup lv_team3;
    playergroup lv_team4;
    int lv_rANDOMSPAWNCOUNTER;
    int lv_islandRandomizer;
    int[5] lv_chosenIsland;
    int lv_selectedSpawnIsland;
    region[5][13] lv_randomizerRegion;
    point[5] lv_randomizerPoint;
    int lv_minrandom;
    int lv_maxrandom;
    int[4] lv_randomintegers;

    // Variable Initialization
    lv_player = 1;
    lv_fFAGroup = PlayerGroupEmpty();
    lv_team1 = PlayerGroupEmpty();
    lv_team2 = PlayerGroupEmpty();
    lv_team3 = PlayerGroupEmpty();
    lv_team4 = PlayerGroupEmpty();
    lv_rANDOMSPAWNCOUNTER = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_chosenIsland[init_i] = 4;
    }
    lv_selectedSpawnIsland = 4;
    lv_maxrandom = 3;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_randomintegers[init_i] = 3;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(UnitFromId(6), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(5), c_unitStateSelectable, false);
    gv_remainingheroes[0] = "PreserverC";
    gv_remainingheroes[1] = "HighTemplar";
    gv_remainingheroes[2] = "VoidHerald";
    gv_remainingheroes[3] = "DeathKnight";
    gv_remainingheroes[4] = "Stalker";
    gv_remainingheroes[5] = "HybridReaver";
    gv_remainingheroes[6] = "Zeratul";
    gv_remainingheroes[7] = "Zealot";
    gv_remainingheroes[8] = "DehakaMirrorImage";
    gv_remainingheroes[9] = "Probe";
    gv_remainingheroes[10] = "DarkTemplar";
    gv_remainingheroes[11] = "TaurenChieftan";
    gv_team1GruntSpawn[0] = RegionFromId(1);
    gv_team1GruntSpawn[1] = RegionFromId(3);
    gv_team1GruntSpawn[2] = RegionFromId(9);
    gv_team1GruntSpawn[3] = RegionFromId(8);
    gv_team2FootmanSpawn[0] = RegionFromId(11);
    gv_team2FootmanSpawn[1] = RegionFromId(15);
    gv_team2FootmanSpawn[2] = RegionFromId(17);
    gv_team2FootmanSpawn[3] = RegionFromId(16);
    gv_regionspawn[0][0] = RegionFromId(19);
    gv_regionspawn[0][1] = RegionFromId(21);
    gv_regionspawn[0][2] = RegionFromId(20);
    gv_regionspawn[0][3] = RegionFromId(22);
    gv_regionspawn[1][0] = RegionFromId(23);
    gv_regionspawn[1][1] = RegionFromId(27);
    gv_regionspawn[1][2] = RegionFromId(26);
    gv_regionspawn[1][3] = RegionFromId(28);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeReferee) && (PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeSpectator)) {
            gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "PreserverC";
            PlayerGroupAdd(gv_noHero, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_playerTips, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_remainingTeams, PlayerGroupLoopCurrent());
            PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
            VisRevealArea(PlayerGroupLoopCurrent(), RegionEntireMap(), 2.0, false);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 250);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, 3);
        }

    }
    PlayerGroupLoopEnd();
    VisEnable(c_visTypeFog, false);
    VisEnable(c_visTypeMask, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    GameTimeOfDaySet("00");
    GameSetLighting("Korhal", 0.0);
    GameSetSpeedValue(c_gameSpeedNormal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UISetMiniMapBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(29));
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(386), 0.0, -1, 0, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(29), true);
        if ((PlayerGroupCount(gv_p1) == 0)) {
            PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
            UnitSetOwner(UnitFromId(5), PlayerGroupLoopCurrent(), true);
        }
        else {
            if ((PlayerGroupCount(gv_p2) == 0)) {
                PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                UnitSetOwner(UnitFromId(5), PlayerGroupLoopCurrent(), true);
            }
            else {
                if ((PlayerGroupCount(gv_p3) == 0)) {
                    PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                    UnitSetOwner(UnitFromId(5), PlayerGroupLoopCurrent(), true);
                }
                else {
                    if ((PlayerGroupCount(gv_p4) == 0)) {
                        PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
                        UnitSetOwner(UnitFromId(5), PlayerGroupLoopCurrent(), true);
                    }

                }
            }
        }
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UISetMiniMapBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(30));
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(382), 0.0, -1, 0, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(30), true);
        if ((PlayerGroupCount(gv_p5) == 0)) {
            PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
            UnitSetOwner(UnitFromId(6), PlayerGroupLoopCurrent(), true);
        }
        else {
            if ((PlayerGroupCount(gv_p6) == 0)) {
                PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                UnitSetOwner(UnitFromId(6), PlayerGroupLoopCurrent(), true);
            }
            else {
                if ((PlayerGroupCount(gv_p7) == 0)) {
                    PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
                    UnitSetOwner(UnitFromId(6), PlayerGroupLoopCurrent(), true);
                }
                else {
                    if ((PlayerGroupCount(gv_p8) == 0)) {
                        PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                        UnitSetOwner(UnitFromId(6), PlayerGroupLoopCurrent(), true);
                    }

                }
            }
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameValues_Init () {
    gt_GameValues = TriggerCreate("gt_GameValues_Func");
    TriggerAddEventMapInit(gt_GameValues);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory/Loss Check
//--------------------------------------------------------------------------------------------------
bool gt_VictoryLossCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    camerainfo lv_losingteamcamera;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FusionReactor"))) {
            return false;
        }

        if (!((gv_victoryApplied == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SpawnExpire, false);
    TriggerEnable(gt_SpawnTimer, false);
    TimerWindowDestroy(gv_spawnTimerWindow);
    gv_victoryApplied = true;
    if ((EventUnit() == UnitFromId(5))) {
        lv_losingteamcamera = CameraInfoFromId(380);
        libNtve_gf_SetDialogItemImage(gv_team1CoreImage, "Assets\\core\\core-0.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_team2Core1Image, "Assets\\core\\core-0.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team1CoreLife, ((StringExternal("Param/Value/CEA0AEA4") + IntToText(0)) + StringExternal("Param/Value/38510E29")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team2Core1Life, ((StringExternal("Param/Value/3088EB15") + IntToText(0)) + StringExternal("Param/Value/61934D68")), PlayerGroupAll());
    }
    else {
        lv_losingteamcamera = CameraInfoFromId(383);
        libNtve_gf_SetDialogItemImage(gv_team2CoreImage, "Assets\\core\\core-0.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_team1Core2Image, "Assets\\core\\core-0.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team1Core2Life, ((StringExternal("Param/Value/CC9F5B4C") + IntToText(0)) + StringExternal("Param/Value/FD9266A7")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team2CoreLife, ((StringExternal("Param/Value/2B2FBD71") + IntToText(0)) + StringExternal("Param/Value/14E4E247")), PlayerGroupAll());
    }
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, StringExternal("Param/Value/6533F646"));
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaChat, StringExternal("Param/Value/B6D798C1"));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand Work Start", 0, c_animTimeDefault);
    ActorCreate(ActorScopeFromUnit(EventUnit()), "CoreDestruction", null, null, null);
    ActorCreate(ActorScopeFromUnit(EventUnit()), "CoreDestructionSound", null, null, null);
    CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), RegionPlayableMap(), false);
    CameraLockInput(UnitGetOwner(EventUnit()), false);
    CameraFollowUnitGroup(UnitGetOwner(EventUnit()), libNtve_gf_ConvertUnitToUnitGroup(gv_hero[UnitGetOwner(EventUnit())]), false, false);
    CameraApplyInfo(UnitGetOwner(EventUnit()), lv_losingteamcamera, 0.0, -1, 10.0, true);
    PlayerGroupRemove(gv_remainingTeams, UnitGetOwner(EventUnit()));
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, StringExternal("Param/Value/84BA6E7E"));
        CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionPlayableMap(), false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), lv_losingteamcamera, 0.0, -1, 10.0, true);
        CameraFollowUnitGroup(PlayerGroupLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_hero[PlayerGroupLoopCurrent()]), false, false);
        PlayerGroupRemove(gv_remainingTeams, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionPlayableMap(), false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), lv_losingteamcamera, 0.0, -1, 10.0, true);
        CameraFollowUnitGroup(PlayerGroupLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_hero[PlayerGroupLoopCurrent()]), false, false);
        PlayerGroupRemove(gv_remainingTeams, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand Work End", 0, c_animTimeDefault);
    Wait(3.0, c_timeGame);
    GameOver(UnitGetOwner(EventUnit()), c_gameOverDefeat, true, true);
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryLossCheck_Init () {
    gt_VictoryLossCheck = TriggerCreate("gt_VictoryLossCheck_Func");
    TriggerAddEventUnitBehaviorChange(gt_VictoryLossCheck, null, "CoreDeathInvulnerable", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Menu
//--------------------------------------------------------------------------------------------------
bool gt_CreateMenu_Func (bool testConds, bool runActions) {
    int autoF9718CDD_ae;
    int autoF9718CDD_ai;
    int auto1857AA85_ae;
    int auto1857AA85_ai;
    int auto2587199C_ae;
    int auto2587199C_ai;
    int auto9F5B067D_ae;
    int auto9F5B067D_ai;
    int auto5304DCDD_ae;
    int auto5304DCDD_ai;

    // Variable Declarations
    playergroup lv_tempplayer;
    int lv_pickedPlayer;
    int lv_start;
    int lv_offsetx;
    int lv_offsety;
    int lv_integer;
    int lv_counter;
    string[13] lv_heroselectionimage;
    string[13] lv_herowireframe;
    text[13] lv_heroname;
    text[13] lv_herotitle;
    text[13] lv_herodescription;
    fixed[13] lv_herobaseattack;
    fixed[13] lv_herobasearmor;
    fixed[13] lv_herobaseatkspeed;
    fixed[13] lv_herobasemovement;
    int[13] lv_herobasestrength;
    int[13] lv_herobaseagility;
    int[13] lv_herobaseintellect;
    string[13] lv_heroability1;
    text[13] lv_heroability1desc;
    string[13] lv_heroability2;
    text[13] lv_heroability2desc;
    string[13] lv_heroability3;
    text[13] lv_heroability3desc;
    string[13] lv_heroability4;
    text[13] lv_heroability4desc;
    string[13] lv_heropassive;
    text[13] lv_heropassivedesc;
    int lv_emptyPlayerCounter;
    int lv_totalEmptyPlayer;
    int lv_offsetYPlayerSelect;
    int lv_offsetYPlayerSelectBorder;

    // Variable Initialization
    lv_tempplayer = PlayerGroupEmpty();
    lv_offsetx = 40;
    lv_offsety = -165;
    lv_emptyPlayerCounter = 1;
    lv_totalEmptyPlayer = 4;
    lv_offsetYPlayerSelect = 25;
    lv_offsetYPlayerSelectBorder = 13;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 600, c_anchorLeft, 75, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_leftTeamPicks = DialogLastCreated();
    DialogCreate(200, 600, c_anchorRight, 75, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_rightTeamPicks = DialogLastCreated();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_CreateDialogItemImage(gv_leftTeamPicks, 125, 125, c_anchorTop, 0, lv_offsetYPlayerSelectBorder, StringToText(""), "Assets\\warcraft-background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelectBorder += 150;
        libNtve_gf_CreateDialogItemImage(gv_leftTeamPicks, 100, 100, c_anchorTop, 0, lv_offsetYPlayerSelect, StringToText(""), "Assets\\Textures\\war3_btnselectheroon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_teamPickImage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_leftTeamPicks, 200, 50, c_anchorTop, 0, (lv_offsetYPlayerSelect - 35), (StringExternal("Param/Value/095D9CA0") + (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/503E65E3"))), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_offsetYPlayerSelect += 150;
        lv_totalEmptyPlayer -= 1;
    }
    PlayerGroupLoopEnd();
    autoF9718CDD_ae = lv_totalEmptyPlayer;
    autoF9718CDD_ai = 1;
    lv_emptyPlayerCounter = 1;
    for ( ; ( (autoF9718CDD_ai >= 0 && lv_emptyPlayerCounter <= autoF9718CDD_ae) || (autoF9718CDD_ai <= 0 && lv_emptyPlayerCounter >= autoF9718CDD_ae) ) ; lv_emptyPlayerCounter += autoF9718CDD_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_leftTeamPicks, 125, 125, c_anchorTop, 0, lv_offsetYPlayerSelectBorder, StringToText(""), "Assets\\warcraft-background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelectBorder += 150;
        libNtve_gf_CreateDialogItemImage(gv_leftTeamPicks, 100, 100, c_anchorTop, 0, lv_offsetYPlayerSelect, StringToText(""), "Assets\\Textures\\war3_btnselectheroon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelect += 150;
    }
    lv_emptyPlayerCounter = 1;
    lv_totalEmptyPlayer = 4;
    lv_offsetYPlayerSelect = 25;
    lv_offsetYPlayerSelectBorder = 13;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_CreateDialogItemImage(gv_rightTeamPicks, 125, 125, c_anchorTop, 0, lv_offsetYPlayerSelectBorder, StringToText(""), "Assets\\warcraft-background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelectBorder += 150;
        libNtve_gf_CreateDialogItemImage(gv_rightTeamPicks, 100, 100, c_anchorTop, 0, lv_offsetYPlayerSelect, StringToText(""), "Assets\\Textures\\war3_btnselectheroon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_teamPickImage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_rightTeamPicks, 200, 50, c_anchorTop, 0, (lv_offsetYPlayerSelect - 35), (StringExternal("Param/Value/12339436") + (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/6483560A"))), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_offsetYPlayerSelect += 150;
        lv_totalEmptyPlayer -= 1;
    }
    PlayerGroupLoopEnd();
    auto1857AA85_ae = lv_totalEmptyPlayer;
    auto1857AA85_ai = 1;
    lv_emptyPlayerCounter = 1;
    for ( ; ( (auto1857AA85_ai >= 0 && lv_emptyPlayerCounter <= auto1857AA85_ae) || (auto1857AA85_ai <= 0 && lv_emptyPlayerCounter >= auto1857AA85_ae) ) ; lv_emptyPlayerCounter += auto1857AA85_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_rightTeamPicks, 125, 125, c_anchorTop, 0, lv_offsetYPlayerSelectBorder, StringToText(""), "Assets\\warcraft-background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelectBorder += 150;
        libNtve_gf_CreateDialogItemImage(gv_rightTeamPicks, 100, 100, c_anchorTop, 0, lv_offsetYPlayerSelect, StringToText(""), "Assets\\Textures\\war3_btnselectheroon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_offsetYPlayerSelect += 150;
    }
    DialogSetVisible(gv_leftTeamPicks, PlayerGroupActive(), true);
    DialogSetVisible(gv_rightTeamPicks, PlayerGroupActive(), true);
    lv_heroselectionimage[0] = "paladin-selection.dds";
    lv_heroselectionimage[1] = "demonhunter-selection.dds";
    lv_heroselectionimage[2] = "mountaking-selection.dds";
    lv_heroselectionimage[3] = "kotg-selection.dds";
    lv_heroselectionimage[4] = "beastmaster-selection.dds";
    lv_heroselectionimage[5] = "farseer-selection.dds";
    lv_heroselectionimage[6] = "deathknight-selection.dds";
    lv_heroselectionimage[7] = "blademaster-selection.dds";
    lv_heroselectionimage[8] = "bloodmage-selection.dds";
    lv_heroselectionimage[9] = "taurenchieftain-selection.dds";
    lv_heroselectionimage[10] = "shadowhunter-selection.dds";
    lv_heroselectionimage[11] = "dreadlord-selection.dds";
    gv_heroicon[0] = "Assets\\Textures\\war3_btnheropaladin.dds";
    gv_heroicon[1] = "Assets\\Textures\\war3_btnherodemonhunter.dds";
    gv_heroicon[2] = "Assets\\Textures\\war3_btnheromountainking.dds";
    gv_heroicon[3] = "Assets\\Textures\\war3_btnkeeperofthegrove.dds";
    gv_heroicon[4] = "Assets\\Textures\\war3_btnbeastmaster.dds";
    gv_heroicon[5] = "Assets\\Textures\\war3_btnherofarseer.dds";
    gv_heroicon[6] = "Assets\\Textures\\war3_btnherodeathknight.dds";
    gv_heroicon[7] = "Assets\\Textures\\war3_btnheroblademaster.dds";
    gv_heroicon[8] = "Assets\\Textures\\war3_btnherobloodelfprince.dds";
    gv_heroicon[9] = "Assets\\Textures\\war3_btnherotaurenchieftain.dds";
    gv_heroicon[10] = "Assets\\Textures\\war3_btnshadowhunter.dds";
    gv_heroicon[11] = "Assets\\Textures\\war3_btnherodreadlord.dds";
    lv_herowireframe[0] = "Assets\\Textures\\paladin-wireframe.dds";
    lv_herowireframe[1] = "Assets\\Textures\\demonhunter-wireframe.dds";
    lv_herowireframe[2] = "Assets\\Textures\\mountainking-wireframe.dds";
    lv_herowireframe[3] = "Assets\\Textures\\keeper-of-the-grove-wireframe.dds";
    lv_herowireframe[4] = "Assets\\Textures\\beastmaster-wireframe.dds";
    lv_herowireframe[5] = "Assets\\Textures\\farseer-wireframe.dds";
    lv_herowireframe[6] = "Assets\\Textures\\deathknight-wireframe.dds";
    lv_herowireframe[7] = "Assets\\Textures\\blademaster-wireframe.dds";
    lv_herowireframe[8] = "Assets\\Textures\\bloodmage-wireframe.dds";
    lv_herowireframe[9] = "Assets\\Textures\\tauren-chieftan-wireframe.dds";
    lv_herowireframe[10] = "Assets\\Textures\\shadowhunter-wireframe.dds";
    lv_herowireframe[11] = "Assets\\Textures\\dreadlord-wireframe.dds";
    lv_heroname[0] = StringExternal("Param/Value/B53B7D08");
    lv_heroname[1] = StringExternal("Param/Value/E807D204");
    lv_heroname[2] = StringExternal("Param/Value/BA4CA0B2");
    lv_heroname[3] = StringExternal("Param/Value/D6AF63B7");
    lv_heroname[4] = StringExternal("Param/Value/53C20C36");
    lv_heroname[5] = StringExternal("Param/Value/7C6994F1");
    lv_heroname[6] = StringExternal("Param/Value/5CCD4D6C");
    lv_heroname[7] = StringExternal("Param/Value/ABD64A8E");
    lv_heroname[8] = StringExternal("Param/Value/EAE799B2");
    lv_heroname[9] = StringExternal("Param/Value/8815F319");
    lv_heroname[10] = StringExternal("Param/Value/9D8E531D");
    lv_heroname[11] = StringExternal("Param/Value/CFE625F6");
    lv_herotitle[0] = StringExternal("Param/Value/FA787501");
    lv_herotitle[1] = StringExternal("Param/Value/B14B7F75");
    lv_herotitle[2] = StringExternal("Param/Value/BAD0D468");
    lv_herotitle[3] = StringExternal("Param/Value/2AB77762");
    lv_herotitle[4] = StringExternal("Param/Value/EC80C245");
    lv_herotitle[5] = StringExternal("Param/Value/FDDDBC9A");
    lv_herotitle[6] = StringExternal("Param/Value/4F6A7813");
    lv_herotitle[7] = StringExternal("Param/Value/17B6A2EE");
    lv_herotitle[8] = StringExternal("Param/Value/DB5A5F65");
    lv_herotitle[9] = StringExternal("Param/Value/C499DB04");
    lv_herotitle[10] = StringExternal("Param/Value/6C13FE11");
    lv_herotitle[11] = StringExternal("Param/Value/5D8BECA9");
    lv_herodescription[0] = StringExternal("Param/Value/0DE5C2B3");
    lv_herodescription[1] = StringExternal("Param/Value/45B6770D");
    lv_herodescription[2] = StringExternal("Param/Value/FB8B95A0");
    lv_herodescription[3] = StringExternal("Param/Value/B2D6C0CA");
    lv_herodescription[4] = StringExternal("Param/Value/90C95929");
    lv_herodescription[5] = StringExternal("Param/Value/C6F627FA");
    lv_herodescription[6] = StringExternal("Param/Value/FF2F955E");
    lv_herodescription[7] = StringExternal("Param/Value/C65ED018");
    lv_herodescription[8] = StringExternal("Param/Value/B8854736");
    lv_herodescription[9] = StringExternal("Param/Value/FCA95AA7");
    lv_herodescription[10] = StringExternal("Param/Value/899D1636");
    lv_herodescription[11] = StringExternal("Param/Value/C3EE55F5");
    lv_herobaseattack[0] = 24.0;
    lv_herobasearmor[0] = 2.4;
    lv_herobaseatkspeed[0] = 1.7;
    lv_herobasemovement[0] = 2.75;
    lv_herobasestrength[0] = 78;
    lv_herobaseagility[0] = 52;
    lv_herobaseintellect[0] = 70;
    lv_heroability1[0] = "Assets\\Textures\\Lights-Blessing.dds";
    lv_heroability1desc[0] = StringExternal("Param/Value/3A3115A6");
    lv_heroability2[0] = "Assets\\Textures\\Divine-Purpose.dds";
    lv_heroability2desc[0] = StringExternal("Param/Value/C02D502F");
    lv_heroability3[0] = "Assets\\Textures\\Radiance.dds";
    lv_heroability3desc[0] = StringExternal("Param/Value/FA72BD2B");
    lv_heroability4[0] = "Assets\\Textures\\Redemption.dds";
    lv_heroability4desc[0] = StringExternal("Param/Value/4DF1C2D2");
    lv_heropassive[0] = "Assets\\Textures\\Enlightenment.dds";
    lv_heropassivedesc[0] = StringExternal("Param/Value/F359A57A");
    lv_herobaseattack[1] = 34.0;
    lv_herobasearmor[1] = 2.2;
    lv_herobaseatkspeed[1] = 1.5;
    lv_herobasemovement[1] = 2.75;
    lv_herobasestrength[1] = 63;
    lv_herobaseagility[1] = 95;
    lv_herobaseintellect[1] = 42;
    lv_heroability1[1] = "Assets\\Textures\\Incubus.dds";
    lv_heroability1desc[1] = StringExternal("Param/Value/240C8172");
    lv_heroability2[1] = "Assets\\Textures\\Hellfire.dds";
    lv_heroability2desc[1] = StringExternal("Param/Value/AE9B697C");
    lv_heroability3[1] = "Assets\\Textures\\Demon-Within.dds";
    lv_heroability3desc[1] = StringExternal("Param/Value/3CA71605");
    lv_heroability4[1] = "Assets\\Textures\\Relinquish.dds";
    lv_heroability4desc[1] = StringExternal("Param/Value/FBB80C47");
    lv_heropassive[1] = "Assets\\Textures\\Soul-Quietus.dds";
    lv_heropassivedesc[1] = StringExternal("Param/Value/B95F7A8E");
    lv_herobaseattack[2] = 22.0;
    lv_herobasearmor[2] = 2.65;
    lv_herobaseatkspeed[2] = 1.65;
    lv_herobasemovement[2] = 2.85;
    lv_herobasestrength[2] = 92;
    lv_herobaseagility[2] = 58;
    lv_herobaseintellect[2] = 50;
    lv_heroability1[2] = "Assets\\Textures\\Mighty-Hammer.dds";
    lv_heroability1desc[2] = StringExternal("Param/Value/0500FA9D");
    lv_heroability2[2] = "Assets\\Textures\\Dwarfaholic.dds";
    lv_heroability2desc[2] = StringExternal("Param/Value/79BA16C8");
    lv_heroability3[2] = "Assets\\Textures\\Mountain-Kings-Call.dds";
    lv_heroability3desc[2] = StringExternal("Param/Value/D3AB7347");
    lv_heroability4[2] = "Assets\\Textures\\Stone-Flesh.dds";
    lv_heroability4desc[2] = StringExternal("Param/Value/73F0C8B5");
    lv_heropassive[2] = "Assets\\Textures\\Fury-of-the-Mountain.dds";
    lv_heropassivedesc[2] = StringExternal("Param/Value/1A81D2D3");
    lv_herobaseattack[3] = 22.0;
    lv_herobasearmor[3] = 1.75;
    lv_herobaseatkspeed[3] = 1.7;
    lv_herobasemovement[3] = 2.85;
    lv_herobasestrength[3] = 65;
    lv_herobaseagility[3] = 55;
    lv_herobaseintellect[3] = 80;
    lv_heroability1[3] = "Assets\\Textures\\Rejuvenating-Rains.dds";
    lv_heroability1desc[3] = StringExternal("Param/Value/37AEC64B");
    lv_heroability2[3] = "Assets\\Textures\\Entangling-Roots.dds";
    lv_heroability2desc[3] = StringExternal("Param/Value/EB96151B");
    lv_heroability3[3] = "Assets\\Textures\\Summons-Treants.dds";
    lv_heroability3desc[3] = StringExternal("Param/Value/B6C87A1D");
    lv_heroability4[3] = "Assets\\Textures\\Awaken-Ancient.dds";
    lv_heroability4desc[3] = StringExternal("Param/Value/5C54ABDF");
    lv_heropassive[3] = "Assets\\Textures\\ancients-grace.dds";
    lv_heropassivedesc[3] = StringExternal("Param/Value/AA85087B");
    lv_herobaseattack[4] = 27.0;
    lv_herobasearmor[4] = 2.75;
    lv_herobaseatkspeed[4] = 1.6;
    lv_herobasemovement[4] = 2.85;
    lv_herobasestrength[4] = 83;
    lv_herobaseagility[4] = 68;
    lv_herobaseintellect[4] = 49;
    lv_heroability1[4] = "Assets\\Textures\\Brutal-Cleave.dds";
    lv_heroability1desc[4] = StringExternal("Param/Value/C09DA846");
    lv_heroability2[4] = "Assets\\Textures\\Warcry.dds";
    lv_heroability2desc[4] = StringExternal("Param/Value/0068DA7C");
    lv_heroability3[4] = "Assets\\Textures\\Inner-Beast.dds";
    lv_heroability3desc[4] = StringExternal("Param/Value/44910EAE");
    lv_heroability4[4] = "Assets\\Textures\\Hysteria.dds";
    lv_heroability4desc[4] = StringExternal("Param/Value/43DD51AF");
    lv_heropassive[4] = "Assets\\Textures\\Berserker-Rage.dds";
    lv_heropassivedesc[4] = StringExternal("Param/Value/B4B5E829");
    lv_herobaseattack[5] = 18.0;
    lv_herobasearmor[5] = 1.2;
    lv_herobaseatkspeed[5] = 1.7;
    lv_herobasemovement[5] = 2.7;
    lv_herobasestrength[5] = 56;
    lv_herobaseagility[5] = 48;
    lv_herobaseintellect[5] = 96;
    lv_heroability1[5] = "Assets\\Textures\\chain-heal.dds";
    lv_heroability1desc[5] = StringExternal("Param/Value/3E9242AE");
    lv_heroability2[5] = "Assets\\Textures\\Unleash-Elements.dds";
    lv_heroability2desc[5] = StringExternal("Param/Value/048AB223");
    lv_heroability3[5] = "Assets\\Textures\\bloodlust.dds";
    lv_heroability3desc[5] = StringExternal("Param/Value/10B083F3");
    lv_heroability4[5] = "Assets\\Textures\\shields-of-the-storm.dds";
    lv_heroability4desc[5] = StringExternal("Param/Value/198C16DC");
    lv_heropassive[5] = "Assets\\Textures\\Shamanistic-Aura.dds";
    lv_heropassivedesc[5] = StringExternal("Param/Value/81D86697");
    lv_herobaseattack[6] = 20.0;
    lv_herobasearmor[6] = 2.7;
    lv_herobaseatkspeed[6] = 1.7;
    lv_herobasemovement[6] = 2.8;
    lv_herobasestrength[6] = 98;
    lv_herobaseagility[6] = 64;
    lv_herobaseintellect[6] = 38;
    lv_heroability1[6] = "Assets\\Textures\\Risen-Ghouls.dds";
    lv_heroability1desc[6] = StringExternal("Param/Value/DC51681F");
    lv_heroability2[6] = "Assets\\Textures\\Blade-of-Zeal.dds";
    lv_heroability2desc[6] = StringExternal("Param/Value/D18A246B");
    lv_heroability3[6] = "Assets\\Textures\\Death-Plague.dds";
    lv_heroability3desc[6] = StringExternal("Param/Value/31CA9333");
    lv_heroability4[6] = "Assets\\Textures\\Dark-Pact.dds";
    lv_heroability4desc[6] = StringExternal("Param/Value/F2DE915F");
    lv_heropassive[6] = "Assets\\Textures\\Deaths-Calling.dds";
    lv_heropassivedesc[6] = StringExternal("Param/Value/90C985AF");
    lv_herobaseattack[7] = 26.0;
    lv_herobasearmor[7] = 1.25;
    lv_herobaseatkspeed[7] = 1.4;
    lv_herobasemovement[7] = 2.7;
    lv_herobasestrength[7] = 52;
    lv_herobaseagility[7] = 104;
    lv_herobaseintellect[7] = 44;
    lv_heroability1[7] = "Assets\\Textures\\Aj-airu-Strike.dds";
    lv_heroability1desc[7] = StringExternal("Param/Value/40E3686A");
    lv_heroability2[7] = "Assets\\Textures\\Skull-Banner.dds";
    lv_heroability2desc[7] = StringExternal("Param/Value/AFCE2BB3");
    lv_heroability3[7] = "Assets\\Textures\\Ka-ze-Leap.dds";
    lv_heroability3desc[7] = StringExternal("Param/Value/D5E9B23A");
    lv_heroability4[7] = "Assets\\Textures\\Gen-so-Trick.dds";
    lv_heroability4desc[7] = StringExternal("Param/Value/0E507969");
    lv_heropassive[7] = "Assets\\Textures\\Tatsu-maki-Stance.dds";
    lv_heropassivedesc[7] = StringExternal("Param/Value/2D9B7556");
    lv_herobaseattack[8] = 21.0;
    lv_herobasearmor[8] = 1.25;
    lv_herobaseatkspeed[8] = 1.7;
    lv_herobasemovement[8] = 2.6;
    lv_herobasestrength[8] = 66;
    lv_herobaseagility[8] = 47;
    lv_herobaseintellect[8] = 87;
    lv_heroability1[8] = "Assets\\Textures\\Hemorrhage.dds";
    lv_heroability1desc[8] = StringExternal("Param/Value/0211729A");
    lv_heroability2[8] = "Assets\\Textures\\Summon-Blood-Elemental.dds";
    lv_heroability2desc[8] = StringExternal("Param/Value/92095DFC");
    lv_heroability3[8] = "Assets\\Textures\\Bloodsurge.dds";
    lv_heroability3desc[8] = StringExternal("Param/Value/F50AEC77");
    lv_heroability4[8] = "Assets\\Textures\\Ocean-of-Blood.dds";
    lv_heroability4desc[8] = StringExternal("Param/Value/91D60385");
    lv_heropassive[8] = "Assets\\Textures\\Convert-Essence.dds";
    lv_heropassivedesc[8] = StringExternal("Param/Value/B54B4270");
    lv_herobaseattack[9] = 32.0;
    lv_herobasearmor[9] = 3.15;
    lv_herobaseatkspeed[9] = 1.8;
    lv_herobasemovement[9] = 2.55;
    lv_herobasestrength[9] = 113;
    lv_herobaseagility[9] = 28;
    lv_herobaseintellect[9] = 59;
    lv_heroability1[9] = "Assets\\Textures\\Ice-Tremor.dds";
    lv_heroability1desc[9] = StringExternal("Param/Value/0F7A2863");
    lv_heroability2[9] = "Assets\\Textures\\Spiritwalk.dds";
    lv_heroability2desc[9] = StringExternal("Param/Value/A189FD9C");
    lv_heroability3[9] = "Assets\\Textures\\Glacial-Totem.dds";
    lv_heroability3desc[9] = StringExternal("Param/Value/78515434");
    lv_heroability4[9] = "Assets\\Textures\\Echoing-Tundra.dds";
    lv_heroability4desc[9] = StringExternal("Param/Value/A5635712");
    lv_heropassive[9] = "Assets\\Textures\\Frosthide.dds";
    lv_heropassivedesc[9] = StringExternal("Param/Value/BDA52A23");
    lv_herobaseattack[10] = 18.0;
    lv_herobasearmor[10] = 1.65;
    lv_herobaseatkspeed[10] = 1.6;
    lv_herobasemovement[10] = 2.65;
    lv_herobasestrength[10] = 44;
    lv_herobaseagility[10] = 84;
    lv_herobaseintellect[10] = 72;
    lv_heroability1[10] = "Assets\\Textures\\Dark-Mojo-Blades.dds";
    lv_heroability1desc[10] = StringExternal("Param/Value/533F86D6");
    lv_heroability2[10] = "Assets\\Textures\\Spirit-Blast.dds";
    lv_heroability2desc[10] = StringExternal("Param/Value/51EC2447");
    lv_heroability3[10] = "Assets\\Textures\\Hex.dds";
    lv_heroability3desc[10] = StringExternal("Param/Value/918299BE");
    lv_heroability4[10] = "Assets\\Textures\\Big-Bad-Serpent-Ward.dds";
    lv_heroability4desc[10] = StringExternal("Param/Value/1DBAFD05");
    lv_heropassive[10] = "Assets\\Textures\\Voodoo-Spirits.dds";
    lv_heropassivedesc[10] = StringExternal("Param/Value/7F54660E");
    lv_herobaseattack[11] = 26.0;
    lv_herobasearmor[11] = 2.9;
    lv_herobaseatkspeed[11] = 1.7;
    lv_herobasemovement[11] = 2.6;
    lv_herobasestrength[11] = 82;
    lv_herobaseagility[11] = 65;
    lv_herobaseintellect[11] = 53;
    lv_heroability1[11] = "Assets\\Textures\\Bloodfeast.dds";
    lv_heroability1desc[11] = StringExternal("Param/Value/3C490C8C");
    lv_heroability2[11] = "Assets\\Textures\\Ominous-Gaze.dds";
    lv_heroability2desc[11] = StringExternal("Param/Value/9F8EA21B");
    lv_heroability3[11] = "Assets\\Textures\\Shadowshift.dds";
    lv_heroability3desc[11] = StringExternal("Param/Value/F2C44254");
    lv_heroability4[11] = "Assets\\Textures\\Vampiric-Ritual.dds";
    lv_heroability4desc[11] = StringExternal("Param/Value/E96EC918");
    lv_heropassive[11] = "Assets\\Textures\\war3_btnvampiricaura.dds";
    lv_heropassivedesc[11] = StringExternal("Param/Value/076AB44F");
    TimerStart(gv_selectionTimer, gv_selectionTimerTotalTime, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/8D5D2CDB"), true, false);
    gv_selectionTimerWindow = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_selectionTimerWindow, c_anchorTop, 0, -35);
    gf_Menu(1280, 650, 0, 0, c_anchorCenter, true, PlayerGroupSingle(1), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false);
    gv_menu = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 1280, 650, c_anchorCenter, 0, 0, StringToText(""), "Assets\\warcraft-background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(gv_menu, PlayerGroupActive(), true);
    auto2587199C_ae = 11;
    auto2587199C_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto2587199C_ai >= 0 && lv_integer <= auto2587199C_ae) || (auto2587199C_ai <= 0 && lv_integer >= auto2587199C_ae) ) ; lv_integer += auto2587199C_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, lv_offsetx, lv_offsety, lv_heroname[lv_integer], StringToText(""), "");
        gv_heroChoice[lv_integer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, lv_offsetx, lv_offsety, StringToText(""), gv_heroicon[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroImage[lv_integer] = DialogControlLastCreated();
        lv_offsety += 110;
        lv_counter += 1;
        if ((lv_counter == 4)) {
            lv_counter = 0;
            lv_offsety = -165;
            lv_offsetx += 110;
        }

    }
    gf_AdvancedCreateDialogButton(gv_menu, 1, 240, 65, 0, 55, c_anchorBottom, "Assets\\Textures\\ui_frame_big_innerline_protoss.dds", c_triggerImageTypeHorizontalBorder, false, StringExternal("Param/Value/0EC373C0"), StringExternal("Param/Value/E0D683AC"));
    gv_choose = DialogControlLastCreated();
    lv_integer = 0;
    lv_counter = 0;
    auto9F5B067D_ae = 11;
    auto9F5B067D_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto9F5B067D_ai >= 0 && lv_integer <= auto9F5B067D_ae) || (auto9F5B067D_ai <= 0 && lv_integer >= auto9F5B067D_ae) ) ; lv_integer += auto9F5B067D_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -85, -210, StringToText(""), lv_herowireframe[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, 80, -175, (StringExternal("Param/Value/3C328810") + (lv_heroname[lv_integer] + (StringExternal("Param/Value/B643C3A5") + lv_herotitle[lv_integer]))), Color(66.67, 100.00, 100.00), false, 2.0);
        gv_heroInfo[lv_integer][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, 50, -80, lv_herodescription[lv_integer], ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_heroInfo[lv_integer][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -35, 40, StringExternal("Param/Value/00276269"), Color(66.67, 100.00, 100.00), false, 2.0);
        gv_heroInfo[lv_integer][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -90, 10, (StringExternal("Param/Value/6C90FF7F") + FixedToText(lv_herobaseattack[lv_integer], c_fixedPrecisionAny)), "Assets\\Textures\\war3_btnattack.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -55, 10, (StringExternal("Param/Value/2642A7AD") + FixedToText(lv_herobasearmor[lv_integer], c_fixedPrecisionAny)), "Assets\\Textures\\war3_btnsteelarmor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -20, 10, (StringExternal("Param/Value/3A68808D") + FixedToText(lv_herobaseatkspeed[lv_integer], c_fixedPrecisionAny)), "Assets\\Textures\\war3_btnglove.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][6] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, 15, 10, (StringExternal("Param/Value/D8BD3C05") + FixedToText(lv_herobasemovement[lv_integer], c_fixedPrecisionAny)), "Assets\\Textures\\war3_btnboots.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][7] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, 50, 10, StringExternal("Param/Value/060AA539"), "Assets\\Textures\\icon-health-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][8] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, 85, 10, StringExternal("Param/Value/CBE828E9"), "Assets\\Textures\\icon-energy-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][9] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, 0, 110, (StringExternal("Param/Value/BFB8BC1C") + IntToText(lv_herobasestrength[lv_integer])), Color(100,100,100), false, 2.0);
        gv_heroInfo[lv_integer][10] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, 0, 130, (StringExternal("Param/Value/0A2F5588") + IntToText(lv_herobaseagility[lv_integer])), Color(100,100,100), false, 2.0);
        gv_heroInfo[lv_integer][11] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, 0, 150, (StringExternal("Param/Value/A9A20475") + IntToText(lv_herobaseintellect[lv_integer])), Color(100,100,100), false, 2.0);
        gv_heroInfo[lv_integer][12] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_menu, 250, 150, c_anchorCenter, -10, 175, StringExternal("Param/Value/820251D4"), Color(66.67, 100.00, 100.00), false, 2.0);
        gv_heroInfo[lv_integer][13] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, 160, lv_heroability1desc[lv_integer], lv_heroability1[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][14] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, 100, 160, lv_heropassivedesc[lv_integer], lv_heropassive[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][15] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, 0, 160, lv_heroability3desc[lv_integer], lv_heroability3[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][16] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, 50, 160, lv_heroability4desc[lv_integer], lv_heroability4[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][17] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -50, 160, lv_heroability2desc[lv_integer], lv_heroability2[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][18] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_menu, 360, 600, c_anchorRight, 50, 0, StringToText(""), lv_heroselectionimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_heroInfo[lv_integer][19] = DialogControlLastCreated();
    }
    auto5304DCDD_ae = gv_heroinfoamount;
    auto5304DCDD_ai = 1;
    lv_start = 0;
    for ( ; ( (auto5304DCDD_ai >= 0 && lv_start <= auto5304DCDD_ae) || (auto5304DCDD_ai <= 0 && lv_start >= auto5304DCDD_ae) ) ; lv_start += auto5304DCDD_ai ) {
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMenu_Init () {
    gt_CreateMenu = TriggerCreate("gt_CreateMenu_Func");
    TriggerAddEventMapInit(gt_CreateMenu);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI Buttons
//--------------------------------------------------------------------------------------------------
bool gt_UIButtons_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Menu(50, 50, 350, 25, c_anchorTopLeft, true, PlayerGroupAll(), "Assets\\Textures\\sc2_ui_glues_bluebuttons_clearbuttonover.dds", c_triggerImageTypeNormal, false);
    gv_waveinfopanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waveinfopanel, 50, 50, c_anchorCenter, 0, 0, (StringExternal("Param/Value/B5F3D85E") + (StringExternal("Param/Value/C553C698") + StringExternal("Param/Value/100B8BE1"))), StringToText(""), "");
    gv_waveinfoitem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_waveinfopanel, 35, 35, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(gv_waveinfopanel, PlayerGroupAll(), true);
    DialogCreate(135, 50, c_anchorBottomLeft, 5, 335, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_talenttabpanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talenttabpanel, 135, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/AF977DF2"), "Assets\\warcraft-background-button-selected.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\warcraft-background-button.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_talenttabbutton = DialogControlLastCreated();
    DialogSetVisible(gv_talenttabpanel, PlayerGroupAll(), true);
    DialogCreate(135, 50, c_anchorBottomLeft, 140, 335, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_shoptabpanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_shoptabpanel, 135, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/70AA0319"), "Assets\\warcraft-background-button-selected.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\warcraft-background-button.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_shoptabbutton = DialogControlLastCreated();
    DialogSetVisible(gv_shoptabpanel, PlayerGroupAll(), true);
    DialogCreate(135, 50, c_anchorBottomLeft, 275, 335, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_miniontabpanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_miniontabpanel, 135, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/8F8B5285"), "Assets\\warcraft-background-button-selected.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\warcraft-background-button.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_miniontabbutton = DialogControlLastCreated();
    DialogSetVisible(gv_miniontabpanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UIButtons_Init () {
    gt_UIButtons = TriggerCreate("gt_UIButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Page
//--------------------------------------------------------------------------------------------------
bool gt_DefaultPage_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_shoptabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupActive());
    DialogSetVisible(gv_shopPanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_shopBackdrop, PlayerGroupActive(), false);
    libNtve_gf_SetDialogItemImage(gv_miniontabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupActive());
    DialogSetVisible(gv_minionPanel, PlayerGroupActive(), false);
    DialogSetVisible(gv_minionBackdrop, PlayerGroupActive(), false);
    libNtve_gf_SetDialogItemImage(gv_talenttabbutton, "Assets\\warcraft-background-button-selected.dds", PlayerGroupActive());
    DialogSetVisible(gv_talentPanel, PlayerGroupActive(), true);
    DialogSetVisible(gv_talentBackdrop, PlayerGroupActive(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefaultPage_Init () {
    gt_DefaultPage = TriggerCreate("gt_DefaultPage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shop Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ShopClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_shoptabbutton))) {
            return false;
        }

        if (!((DialogIsVisible(gv_shopBackdrop, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_miniontabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_minionPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_minionBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_talenttabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_talentPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_talentBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_shoptabbutton, "Assets\\warcraft-background-button-selected.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_shopPanel, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_shopBackdrop, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShopClicked_Init () {
    gt_ShopClicked = TriggerCreate("gt_ShopClicked_Func");
    TriggerAddEventDialogControl(gt_ShopClicked, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ShopClicked, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Clicked
//--------------------------------------------------------------------------------------------------
bool gt_MinionClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_miniontabbutton))) {
            return false;
        }

        if (!((DialogIsVisible(gv_minionBackdrop, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_shoptabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_shopPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_shopBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_talenttabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_talentPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_talentBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_miniontabbutton, "Assets\\warcraft-background-button-selected.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_minionPanel, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_minionBackdrop, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionClicked_Init () {
    gt_MinionClicked = TriggerCreate("gt_MinionClicked_Func");
    TriggerAddEventDialogControl(gt_MinionClicked, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionClicked, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Clicked
//--------------------------------------------------------------------------------------------------
bool gt_TalentClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talenttabbutton))) {
            return false;
        }

        if (!((DialogIsVisible(gv_talentBackdrop, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_shoptabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_shopPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_shopBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_miniontabbutton, "Assets\\warcraft-background-button.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_minionPanel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_minionBackdrop, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_talenttabbutton, "Assets\\warcraft-background-button-selected.dds", PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_talentPanel, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_talentBackdrop, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentClicked_Init () {
    gt_TalentClicked = TriggerCreate("gt_TalentClicked_Func");
    TriggerAddEventDialogControl(gt_TalentClicked, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_TalentClicked, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Panel
//--------------------------------------------------------------------------------------------------
bool gt_MinionPanel_Func (bool testConds, bool runActions) {
    int auto3A146BAA_ae;
    int auto3A146BAA_ai;
    int auto7AD622F8_ae;
    int auto7AD622F8_ai;

    // Variable Declarations
    int lv_offsetx;
    int lv_offsetxmodifier;
    int lv_offsety;
    int lv_offsetymodifier;
    int lv_integer;
    int lv_nextRow;
    text[52] lv_miniondescription;

    // Variable Initialization
    lv_offsetx = 60;
    lv_offsetxmodifier = 85;
    lv_offsety = 80;
    lv_offsetymodifier = 80;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_minionimage[0] = "Assets\\Textures\\war3_btnfootman.dds";
    lv_miniondescription[0] = StringExternal("Param/Value/BE616FC4");
    gv_minionimage[51] = "Assets\\Textures\\war3_btngrunt.dds";
    lv_miniondescription[51] = StringExternal("Param/Value/31939F6B");
    gv_minionimage[1] = "Assets\\Textures\\war3_btnforesttroll.dds";
    lv_miniondescription[1] = StringExternal("Param/Value/85528740");
    gv_minionimage[2] = "Assets\\Textures\\war3_btnforesttrollshadowpriest.dds";
    lv_miniondescription[2] = StringExternal("Param/Value/632E84A8");
    gv_minionimage[3] = "Assets\\Textures\\war3_btnforesttrolltrapper.dds";
    lv_miniondescription[3] = StringExternal("Param/Value/689102A0");
    gv_minionimage[4] = "Assets\\Textures\\war3_btntrollbatrider.dds";
    lv_miniondescription[4] = StringExternal("Param/Value/0313D346");
    gv_minionimage[5] = "Assets\\Textures\\war3_btnoneheadedogre.dds";
    lv_miniondescription[5] = StringExternal("Param/Value/C735BD42");
    gv_minionimage[6] = "Assets\\Textures\\war3_btnogremagi.dds";
    lv_miniondescription[6] = StringExternal("Param/Value/A710FAD3");
    gv_minionimage[7] = "Assets\\Textures\\war3_btnogrelord.dds";
    lv_miniondescription[7] = StringExternal("Param/Value/D2E0B6AE");
    gv_minionimage[8] = "Assets\\Textures\\war3_btnmurgalslave.dds";
    lv_miniondescription[8] = StringExternal("Param/Value/33ABDFF4");
    gv_minionimage[9] = "Assets\\Textures\\war3_btnmurgulbloodgill.dds";
    lv_miniondescription[9] = StringExternal("Param/Value/75C6275E");
    gv_minionimage[10] = "Assets\\Textures\\war3_btnmurgulshadowcaster.dds";
    lv_miniondescription[10] = StringExternal("Param/Value/BF7F1DB3");
    gv_minionimage[11] = "Assets\\Textures\\war3_btnmurlocnightcrawler.dds";
    lv_miniondescription[11] = StringExternal("Param/Value/07234D14");
    gv_minionimage[12] = "Assets\\Textures\\war3_btnnagamyrmidon.dds";
    lv_miniondescription[12] = StringExternal("Param/Value/4217AF2F");
    gv_minionimage[13] = "Assets\\Textures\\war3_btnnagasummoner.dds";
    lv_miniondescription[13] = StringExternal("Param/Value/011D88D6");
    gv_minionimage[14] = "Assets\\Textures\\war3_btnsnapdragon.dds";
    lv_miniondescription[14] = StringExternal("Param/Value/58F6760C");
    gv_minionimage[15] = "Assets\\Textures\\war3_btnnagamyrmidonroyalguard.dds";
    lv_miniondescription[15] = StringExternal("Param/Value/BEBADE87");
    gv_minionimage[16] = "Assets\\Textures\\war3_btnhydra.dds";
    lv_miniondescription[16] = StringExternal("Param/Value/79D4E238");
    gv_minionimage[17] = "Assets\\Textures\\war3_btnskeletonwarrior.dds";
    lv_miniondescription[17] = StringExternal("Param/Value/D5DD37D2");
    gv_minionimage[18] = "Assets\\Textures\\war3_btnskeletonarcher.dds";
    lv_miniondescription[18] = StringExternal("Param/Value/0CA409D3");
    gv_minionimage[19] = "Assets\\Textures\\war3_btnghoul.dds";
    lv_miniondescription[19] = StringExternal("Param/Value/9A66C352");
    gv_minionimage[20] = "Assets\\Textures\\war3_btnnecromancer.dds";
    lv_miniondescription[20] = StringExternal("Param/Value/68812B99");
    gv_minionimage[21] = "Assets\\Textures\\war3_btncryptfiend.dds";
    lv_miniondescription[21] = StringExternal("Param/Value/29AF6D7E");
    gv_minionimage[22] = "Assets\\Textures\\war3_btngargoyle.dds";
    lv_miniondescription[22] = StringExternal("Param/Value/D1774CE4");
    gv_minionimage[23] = "Assets\\Textures\\war3_btnabomination.dds";
    lv_miniondescription[23] = StringExternal("Param/Value/DFA0B5C8");
    gv_minionimage[24] = "Assets\\Textures\\war3_btnchaosgrunt.dds";
    lv_miniondescription[24] = StringExternal("Param/Value/95213F4D");
    gv_minionimage[25] = "Assets\\Textures\\war3_btnshaman.dds";
    lv_miniondescription[25] = StringExternal("Param/Value/77D64E6C");
    gv_minionimage[26] = "Assets\\Textures\\war3_btnchaoswolfrider.dds";
    lv_miniondescription[26] = StringExternal("Param/Value/5F9A6E01");
    gv_minionimage[27] = "Assets\\Textures\\war3_btnreddragon.dds";
    lv_miniondescription[27] = StringExternal("Param/Value/44021C7C");
    gv_minionimage[28] = "Assets\\Textures\\war3_btnchaoswarlock.dds";
    lv_miniondescription[28] = StringExternal("Param/Value/1A410555");
    gv_minionimage[29] = "Assets\\Textures\\war3_btnkotobeast.dds";
    lv_miniondescription[29] = StringExternal("Param/Value/A27F122C");
    gv_minionimage[30] = "Assets\\Textures\\war3_btnfelhound.dds";
    lv_miniondescription[30] = StringExternal("Param/Value/8472F644");
    gv_minionimage[31] = "Assets\\Textures\\war3_btnfelguard.dds";
    lv_miniondescription[31] = StringExternal("Param/Value/7142A9AF");
    gv_minionimage[32] = "Assets\\Textures\\war3_btndemoness.dds";
    lv_miniondescription[32] = StringExternal("Param/Value/5A90E4C8");
    gv_minionimage[33] = "Assets\\Textures\\war3_btnvoidwalker.dds";
    lv_miniondescription[33] = StringExternal("Param/Value/28E3C5A4");
    gv_minionimage[34] = "Assets\\Textures\\war3_btndoomguard.dds";
    lv_miniondescription[34] = StringExternal("Param/Value/FCBA2732");
    gv_minionimage[35] = "Assets\\Textures\\war3_btneredarwarlockpurple.dds";
    lv_miniondescription[35] = StringExternal("Param/Value/C4DF2C81");
    gv_minionimage[36] = "Assets\\Textures\\war3_btnheadhunterberserker.dds";
    lv_miniondescription[36] = StringExternal("Param/Value/979D4FA4");
    gv_minionimage[37] = "Assets\\Textures\\war3_btnogrelord.dds";
    lv_miniondescription[37] = StringExternal("Param/Value/704A90D6");
    gv_minionimage[38] = "Assets\\Textures\\war3_btnmurgultidewarrior.dds";
    lv_miniondescription[38] = StringExternal("Param/Value/E1CE1A39");
    gv_minionimage[39] = "Assets\\Textures\\war3_btnnagaseawitch.dds";
    lv_miniondescription[39] = StringExternal("Param/Value/8992D403");
    gv_minionimage[40] = "Assets\\Textures\\war3_btnskeletonmage.dds";
    lv_miniondescription[40] = StringExternal("Param/Value/E49A99D3");
    gv_minionimage[41] = "Assets\\Textures\\war3_btnlichversion2.dds";
    lv_miniondescription[41] = StringExternal("Param/Value/68C09A5A");
    gv_minionimage[42] = "Assets\\Textures\\war3_btndragonroost.dds";
    lv_miniondescription[42] = StringExternal("Param/Value/65377D6E");
    gv_minionimage[43] = "Assets\\Textures\\war3_btnchaosgrom.dds";
    lv_miniondescription[43] = StringExternal("Param/Value/783CCC20");
    gv_minionimage[44] = "Assets\\Textures\\war3_btnscourgebuild.dds";
    lv_miniondescription[44] = StringExternal("Param/Value/2C452425");
    gv_minionimage[45] = "Assets\\Textures\\war3_btnkiljaedin.dds";
    lv_miniondescription[45] = StringExternal("Param/Value/387301CC");
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_minionBackdrop = DialogLastCreated();
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_minionPanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_minionBackdrop, 800, 380, c_anchorCenter, 0, 0, StringToText(""), "Assets\\background-minion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto3A146BAA_ae = 23;
    auto3A146BAA_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto3A146BAA_ai >= 0 && lv_integer <= auto3A146BAA_ae) || (auto3A146BAA_ai <= 0 && lv_integer >= auto3A146BAA_ae) ) ; lv_integer += auto3A146BAA_ai ) {
        if ((lv_integer == 0)) {
            libNtve_gf_CreateDialogItemButton(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_miniondescription[0], StringToText(""), "");
            gv_minionbuttons[0] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), false);
            libNtve_gf_CreateDialogItemImage(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_minionimage[0], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_minionimages[0] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), false);
            libNtve_gf_CreateDialogItemButton(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_miniondescription[51], StringToText(""), "");
            gv_minionbuttons[51] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), false);
            libNtve_gf_CreateDialogItemImage(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_minionimage[51], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_minionimages[51] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), false);
            lv_offsetx += lv_offsetxmodifier;
            lv_nextRow += 1;
        }
        else {
            libNtve_gf_CreateDialogItemButton(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_miniondescription[lv_integer], StringToText(""), "");
            gv_minionbuttons[lv_integer] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_minionimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_minionimages[lv_integer] = DialogControlLastCreated();
            lv_offsetx += lv_offsetxmodifier;
            lv_nextRow += 1;
        }
        if ((lv_nextRow == 8)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 60;
        }

    }
    lv_offsetx = 60;
    lv_offsety = 80;
    auto7AD622F8_ae = 45;
    auto7AD622F8_ai = 1;
    lv_integer = 24;
    for ( ; ( (auto7AD622F8_ai >= 0 && lv_integer <= auto7AD622F8_ae) || (auto7AD622F8_ai <= 0 && lv_integer >= auto7AD622F8_ae) ) ; lv_integer += auto7AD622F8_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_miniondescription[lv_integer], StringToText(""), "");
        gv_minionbuttons[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_minionPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_minionimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_minionimages[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_offsetx += lv_offsetxmodifier;
        lv_nextRow += 1;
        if ((lv_nextRow == 8)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 60;
        }

    }
    libNtve_gf_CreateDialogItemButton(gv_minionPanel, 50, 50, c_anchorTopLeft, 80, 25, StringExternal("Param/Value/DECB5A08"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_previousminionpage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_minionPanel, 50, 50, c_anchorTopLeft, 80, 25, StringToText(""), "Assets\\shop_prev.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_previousminionpageimage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minionPanel, 50, 50, c_anchorTopLeft, 260, 25, StringExternal("Param/Value/721BA2A1"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_nextminionpage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_minionPanel, 50, 50, c_anchorTopLeft, 260, 25, StringToText(""), "Assets\\shop_next.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_nextminionpageimage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_minionPanel, 50, 50, c_anchorTopLeft, 140, 25, StringExternal("Param/Value/183D97A7"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_minionPage1Button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_minionPanel, 50, 50, c_anchorTopLeft, 140, 25, StringToText(""), "Assets\\button-blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 140, 25, StringExternal("Param/Value/4982568C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_minionPanel, 50, 50, c_anchorTopLeft, 200, 25, StringExternal("Param/Value/6BFDD1BC"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_minionPage2Button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_minionPanel, 50, 50, c_anchorTopLeft, 200, 25, StringToText(""), "Assets\\button-blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 200, 25, StringExternal("Param/Value/61DDF47D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionPanel_Init () {
    gt_MinionPanel = TriggerCreate("gt_MinionPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Next Page
//--------------------------------------------------------------------------------------------------
bool gt_MinionNextPage_Func (bool testConds, bool runActions) {
    int autoD9E9C24B_ae;
    int autoD9E9C24B_ai;
    int auto34694E83_ae;
    int auto34694E83_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_nextminionpage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_minionCurrentPage[EventPlayer()] == 0)) {
        gv_minionCurrentPage[EventPlayer()] = 1;
        autoD9E9C24B_ae = 23;
        autoD9E9C24B_ai = 1;
        lv_integer = 0;
        for ( ; ( (autoD9E9C24B_ai >= 0 && lv_integer <= autoD9E9C24B_ae) || (autoD9E9C24B_ai <= 0 && lv_integer >= autoD9E9C24B_ae) ) ; lv_integer += autoD9E9C24B_ai ) {
            if ((lv_integer == 0)) {
                if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                    DialogControlSetVisible(gv_minionbuttons[51], PlayerGroupSingle(EventPlayer()), false);
                    DialogControlSetVisible(gv_minionimages[51], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                    DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                    DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                }
            }
            else {
                DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        auto34694E83_ae = 45;
        auto34694E83_ai = 1;
        lv_integer = 24;
        for ( ; ( (auto34694E83_ai >= 0 && lv_integer <= auto34694E83_ae) || (auto34694E83_ai <= 0 && lv_integer >= auto34694E83_ae) ) ; lv_integer += auto34694E83_ai ) {
            DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionNextPage_Init () {
    gt_MinionNextPage = TriggerCreate("gt_MinionNextPage_Func");
    TriggerAddEventDialogControl(gt_MinionNextPage, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionNextPage, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Previous Page
//--------------------------------------------------------------------------------------------------
bool gt_MinionPreviousPage_Func (bool testConds, bool runActions) {
    int auto04B1DB73_ae;
    int auto04B1DB73_ai;
    int auto3E59359A_ae;
    int auto3E59359A_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_previousminionpage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_minionCurrentPage[EventPlayer()] == 2)) {
    }
    else {
        gv_minionCurrentPage[EventPlayer()] = 0;
        auto04B1DB73_ae = 23;
        auto04B1DB73_ai = 1;
        lv_integer = 0;
        for ( ; ( (auto04B1DB73_ai >= 0 && lv_integer <= auto04B1DB73_ae) || (auto04B1DB73_ai <= 0 && lv_integer >= auto04B1DB73_ae) ) ; lv_integer += auto04B1DB73_ai ) {
            if ((lv_integer == 0)) {
                if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                    DialogControlSetVisible(gv_minionbuttons[51], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_minionimages[51], PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                    DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                }
            }
            else {
                DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        auto3E59359A_ae = 45;
        auto3E59359A_ai = 1;
        lv_integer = 24;
        for ( ; ( (auto3E59359A_ai >= 0 && lv_integer <= auto3E59359A_ae) || (auto3E59359A_ai <= 0 && lv_integer >= auto3E59359A_ae) ) ; lv_integer += auto3E59359A_ai ) {
            DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionPreviousPage_Init () {
    gt_MinionPreviousPage = TriggerCreate("gt_MinionPreviousPage_Func");
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPreviousPage, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Page 1
//--------------------------------------------------------------------------------------------------
bool gt_MinionPage1_Func (bool testConds, bool runActions) {
    int autoD9D315BC_ae;
    int autoD9D315BC_ai;
    int auto90B53AFA_ae;
    int auto90B53AFA_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionPage1Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9D315BC_ae = 23;
    autoD9D315BC_ai = 1;
    lv_integer = 0;
    for ( ; ( (autoD9D315BC_ai >= 0 && lv_integer <= autoD9D315BC_ae) || (autoD9D315BC_ai <= 0 && lv_integer >= autoD9D315BC_ae) ) ; lv_integer += autoD9D315BC_ai ) {
        if ((lv_integer == 0)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_minionbuttons[51], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_minionimages[51], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
                DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else {
            DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    auto90B53AFA_ae = 45;
    auto90B53AFA_ai = 1;
    lv_integer = 24;
    for ( ; ( (auto90B53AFA_ai >= 0 && lv_integer <= auto90B53AFA_ae) || (auto90B53AFA_ai <= 0 && lv_integer >= auto90B53AFA_ae) ) ; lv_integer += auto90B53AFA_ai ) {
        DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    gv_minionCurrentPage[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionPage1_Init () {
    gt_MinionPage1 = TriggerCreate("gt_MinionPage1_Func");
    TriggerAddEventDialogControl(gt_MinionPage1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Page 2
//--------------------------------------------------------------------------------------------------
bool gt_MinionPage2_Func (bool testConds, bool runActions) {
    int auto11635522_ae;
    int auto11635522_ai;
    int autoD7FD3A26_ae;
    int autoD7FD3A26_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionPage2Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto11635522_ae = 23;
    auto11635522_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto11635522_ai >= 0 && lv_integer <= auto11635522_ae) || (auto11635522_ai <= 0 && lv_integer >= auto11635522_ae) ) ; lv_integer += auto11635522_ai ) {
        if ((lv_integer == 0)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_minionbuttons[51], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_minionimages[51], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        else {
            DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    autoD7FD3A26_ae = 45;
    autoD7FD3A26_ai = 1;
    lv_integer = 24;
    for ( ; ( (autoD7FD3A26_ai >= 0 && lv_integer <= autoD7FD3A26_ae) || (autoD7FD3A26_ai <= 0 && lv_integer >= autoD7FD3A26_ae) ) ; lv_integer += autoD7FD3A26_ai ) {
        DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
    }
    gv_minionCurrentPage[EventPlayer()] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionPage2_Init () {
    gt_MinionPage2 = TriggerCreate("gt_MinionPage2_Func");
    TriggerAddEventDialogControl(gt_MinionPage2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Page 3
//--------------------------------------------------------------------------------------------------
bool gt_MinionPage3_Func (bool testConds, bool runActions) {
    int auto9E361EC9_ae;
    int auto9E361EC9_ai;
    int auto7FCB5747_ae;
    int auto7FCB5747_ai;
    int autoA59032F6_ae;
    int autoA59032F6_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionPage3Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E361EC9_ae = 23;
    auto9E361EC9_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto9E361EC9_ai >= 0 && lv_integer <= auto9E361EC9_ae) || (auto9E361EC9_ai <= 0 && lv_integer >= auto9E361EC9_ae) ) ; lv_integer += auto9E361EC9_ai ) {
        if ((lv_integer == 0)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_minionbuttons[51], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_minionimages[51], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        else {
            DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    auto7FCB5747_ae = 47;
    auto7FCB5747_ai = 1;
    lv_integer = 24;
    for ( ; ( (auto7FCB5747_ai >= 0 && lv_integer <= auto7FCB5747_ae) || (auto7FCB5747_ai <= 0 && lv_integer >= auto7FCB5747_ae) ) ; lv_integer += auto7FCB5747_ai ) {
        DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    autoA59032F6_ae = 50;
    autoA59032F6_ai = 1;
    lv_integer = 48;
    for ( ; ( (autoA59032F6_ai >= 0 && lv_integer <= autoA59032F6_ae) || (autoA59032F6_ai <= 0 && lv_integer >= autoA59032F6_ae) ) ; lv_integer += autoA59032F6_ai ) {
        DialogControlSetVisible(gv_minionbuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_minionimages[lv_integer], PlayerGroupSingle(EventPlayer()), true);
    }
    gv_minionCurrentPage[EventPlayer()] = 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionPage3_Init () {
    gt_MinionPage3 = TriggerCreate("gt_MinionPage3_Func");
    TriggerAddEventDialogControl(gt_MinionPage3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_MinionPage3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [1]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 5)) {
        SoundPlayForPlayer(SoundLink("Hire_JungleWar", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[1] += 1;
        }
        else {
            gv_t2MinionCounter[1] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 5);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F43B7065"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion1_Init () {
    gt_HireMinion1 = TriggerCreate("gt_HireMinion1_Func");
    TriggerAddEventDialogControl(gt_HireMinion1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [2]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 8;
    lv_minionint = 2;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc2222222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/37871381"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion2_Init () {
    gt_HireMinion2 = TriggerCreate("gt_HireMinion2_Func");
    TriggerAddEventDialogControl(gt_HireMinion2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [3]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 12;
    lv_minionint = 3;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc222222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C2EE571B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion3_Init () {
    gt_HireMinion3 = TriggerCreate("gt_HireMinion3_Func");
    TriggerAddEventDialogControl(gt_HireMinion3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [4]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 20;
    lv_minionint = 4;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc22222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/240DCD9E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion4_Init () {
    gt_HireMinion4 = TriggerCreate("gt_HireMinion4_Func");
    TriggerAddEventDialogControl(gt_HireMinion4, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion4, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [5]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 24;
    lv_minionint = 5;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B5C0C153"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion5_Init () {
    gt_HireMinion5 = TriggerCreate("gt_HireMinion5_Func");
    TriggerAddEventDialogControl(gt_HireMinion5, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion5, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [6]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 25;
    lv_minionint = 6;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc22", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/936C96EC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion6_Init () {
    gt_HireMinion6 = TriggerCreate("gt_HireMinion6_Func");
    TriggerAddEventDialogControl(gt_HireMinion6, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion6, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [7]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 30;
    lv_minionint = 7;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/121B5950"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion7_Init () {
    gt_HireMinion7 = TriggerCreate("gt_HireMinion7_Func");
    TriggerAddEventDialogControl(gt_HireMinion7, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion7, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [8]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 35;
    lv_minionint = 8;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 4;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 4;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/362D73A4"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion8_Init () {
    gt_HireMinion8 = TriggerCreate("gt_HireMinion8_Func");
    TriggerAddEventDialogControl(gt_HireMinion8, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion8, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [9]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 38;
    lv_minionint = 9;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/32A2D8EA"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion9_Init () {
    gt_HireMinion9 = TriggerCreate("gt_HireMinion9_Func");
    TriggerAddEventDialogControl(gt_HireMinion9, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion9, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [10]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 40;
    lv_minionint = 10;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/125FF057"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion10_Init () {
    gt_HireMinion10 = TriggerCreate("gt_HireMinion10_Func");
    TriggerAddEventDialogControl(gt_HireMinion10, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion10, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [11]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 45;
    lv_minionint = 11;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murloc", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BBDAD8AF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion11_Init () {
    gt_HireMinion11 = TriggerCreate("gt_HireMinion11_Func");
    TriggerAddEventDialogControl(gt_HireMinion11, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion11, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [12]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 65;
    lv_minionint = 12;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_NagaRoyalGuard2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5C810B66"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion12_Init () {
    gt_HireMinion12 = TriggerCreate("gt_HireMinion12_Func");
    TriggerAddEventDialogControl(gt_HireMinion12, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion12, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [13]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 72;
    lv_minionint = 13;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_NagaSiren", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/94BFDF6A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion13_Init () {
    gt_HireMinion13 = TriggerCreate("gt_HireMinion13_Func");
    TriggerAddEventDialogControl(gt_HireMinion13, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion13, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [14]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 85;
    lv_minionint = 14;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Voidwalker2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D39FB8CA"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion14_Init () {
    gt_HireMinion14 = TriggerCreate("gt_HireMinion14_Func");
    TriggerAddEventDialogControl(gt_HireMinion14, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion14, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [15]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 105;
    lv_minionint = 15;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_NagaRoyalGuard", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FCF59590"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion15_Init () {
    gt_HireMinion15 = TriggerCreate("gt_HireMinion15_Func");
    TriggerAddEventDialogControl(gt_HireMinion15, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion15, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [16]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion16_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 115;
    lv_minionint = 16;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Hydra", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 2;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A831E94C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion16_Init () {
    gt_HireMinion16 = TriggerCreate("gt_HireMinion16_Func");
    TriggerAddEventDialogControl(gt_HireMinion16, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion16, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [17]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion17_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 118;
    lv_minionint = 17;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Necromancer2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 4;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 4;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/503999BC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion17_Init () {
    gt_HireMinion17 = TriggerCreate("gt_HireMinion17_Func");
    TriggerAddEventDialogControl(gt_HireMinion17, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion17, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [18]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion18_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 118;
    lv_minionint = 18;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Necromancer2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 3;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 3;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6F883F0C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion18_Init () {
    gt_HireMinion18 = TriggerCreate("gt_HireMinion18_Func");
    TriggerAddEventDialogControl(gt_HireMinion18, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion18, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [19]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 125;
    lv_minionint = 19;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Ghoul", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9F6DB207"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion19_Init () {
    gt_HireMinion19 = TriggerCreate("gt_HireMinion19_Func");
    TriggerAddEventDialogControl(gt_HireMinion19, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion19, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [20]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 140;
    lv_minionint = 20;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Necromancer", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D9E66995"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion20_Init () {
    gt_HireMinion20 = TriggerCreate("gt_HireMinion20_Func");
    TriggerAddEventDialogControl(gt_HireMinion20, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion20, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [21]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion21_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 160;
    lv_minionint = 21;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_CryptFiend", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/068391FC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion21_Init () {
    gt_HireMinion21 = TriggerCreate("gt_HireMinion21_Func");
    TriggerAddEventDialogControl(gt_HireMinion21, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion21, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [22]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion22_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 170;
    lv_minionint = 22;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon322", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7F40788F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion22_Init () {
    gt_HireMinion22 = TriggerCreate("gt_HireMinion22_Func");
    TriggerAddEventDialogControl(gt_HireMinion22, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion22, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [23]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 200;
    lv_minionint = 23;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon32", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 3;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1F1E4F3F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion23_Init () {
    gt_HireMinion23 = TriggerCreate("gt_HireMinion23_Func");
    TriggerAddEventDialogControl(gt_HireMinion23, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion23, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [24]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion24_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 225;
    lv_minionint = 24;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_ChaosGrunt", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 3;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 3;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E8A68034"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion24_Init () {
    gt_HireMinion24 = TriggerCreate("gt_HireMinion24_Func");
    TriggerAddEventDialogControl(gt_HireMinion24, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion24, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [25]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion25_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 235;
    lv_minionint = 25;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_ChaosWarlock2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E4F37EEC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion25_Init () {
    gt_HireMinion25 = TriggerCreate("gt_HireMinion25_Func");
    TriggerAddEventDialogControl(gt_HireMinion25, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion25, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [26]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion26_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 245;
    lv_minionint = 26;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_ChaosWarlock22", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/33EC453E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion26_Init () {
    gt_HireMinion26 = TriggerCreate("gt_HireMinion26_Func");
    TriggerAddEventDialogControl(gt_HireMinion26, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion26, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [27]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion27_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 255;
    lv_minionint = 27;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon3", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 6;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 6;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D03B2C77"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion27_Init () {
    gt_HireMinion27 = TriggerCreate("gt_HireMinion27_Func");
    TriggerAddEventDialogControl(gt_HireMinion27, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion27, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [28]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion28_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 260;
    lv_minionint = 28;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_ChaosWarlock", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7060996E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion28_Init () {
    gt_HireMinion28 = TriggerCreate("gt_HireMinion28_Func");
    TriggerAddEventDialogControl(gt_HireMinion28, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion28, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [29]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion29_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 270;
    lv_minionint = 29;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_KodoRider", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 4;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/30054BD5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion29_Init () {
    gt_HireMinion29 = TriggerCreate("gt_HireMinion29_Func");
    TriggerAddEventDialogControl(gt_HireMinion29, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion29, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [30]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion30_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 285;
    lv_minionint = 30;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Felhound", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 4;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 4;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3091E0BC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion30_Init () {
    gt_HireMinion30 = TriggerCreate("gt_HireMinion30_Func");
    TriggerAddEventDialogControl(gt_HireMinion30, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion30, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [31]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion31_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 295;
    lv_minionint = 31;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_FelGuard", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/8519492E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion31_Init () {
    gt_HireMinion31 = TriggerCreate("gt_HireMinion31_Func");
    TriggerAddEventDialogControl(gt_HireMinion31, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion31, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [32]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion32_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 298;
    lv_minionint = 32;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_FelGuard2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C07A6EB8"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion32_Init () {
    gt_HireMinion32 = TriggerCreate("gt_HireMinion32_Func");
    TriggerAddEventDialogControl(gt_HireMinion32, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion32, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [33]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion33_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 315;
    lv_minionint = 33;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Voidwalker", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3D54AE99"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion33_Init () {
    gt_HireMinion33 = TriggerCreate("gt_HireMinion33_Func");
    TriggerAddEventDialogControl(gt_HireMinion33, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion33, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [34]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion34_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 345;
    lv_minionint = 34;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FCA84C0E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion34_Init () {
    gt_HireMinion34 = TriggerCreate("gt_HireMinion34_Func");
    TriggerAddEventDialogControl(gt_HireMinion34, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion34, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [35]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion35_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 375;
    lv_minionint = 35;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_playerincome[EventPlayer()] += 5;
        libNtve_gf_SetDialogItemText(gv_income[EventPlayer()], IntToText(gv_playerincome[EventPlayer()]), PlayerGroupAll());
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D9A23C9B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion35_Init () {
    gt_HireMinion35 = TriggerCreate("gt_HireMinion35_Func");
    TriggerAddEventDialogControl(gt_HireMinion35, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion35, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [36]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion36_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 450;
    lv_minionint = 36;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_JinRakh", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0CDF1AD3"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion36_Init () {
    gt_HireMinion36 = TriggerCreate("gt_HireMinion36_Func");
    TriggerAddEventDialogControl(gt_HireMinion36, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion36, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [37]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion37_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 525;
    lv_minionint = 37;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_OgreWarlord", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9CF0E3AE"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion37_Init () {
    gt_HireMinion37 = TriggerCreate("gt_HireMinion37_Func");
    TriggerAddEventDialogControl(gt_HireMinion37, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion37, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [38]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion38_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 575;
    lv_minionint = 38;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Murkee", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1AC711A1"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion38_Init () {
    gt_HireMinion38 = TriggerCreate("gt_HireMinion38_Func");
    TriggerAddEventDialogControl(gt_HireMinion38, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion38, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [39]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion39_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 650;
    lv_minionint = 39;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_QueenofStorm", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B22BCD36"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion39_Init () {
    gt_HireMinion39 = TriggerCreate("gt_HireMinion39_Func");
    TriggerAddEventDialogControl(gt_HireMinion39, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion39, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [40]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion40_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 675;
    lv_minionint = 40;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon22", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D07B62B4"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion40_Init () {
    gt_HireMinion40 = TriggerCreate("gt_HireMinion40_Func");
    TriggerAddEventDialogControl(gt_HireMinion40, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion40, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [41]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion41_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 750;
    lv_minionint = 41;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B326AE68"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion41_Init () {
    gt_HireMinion41 = TriggerCreate("gt_HireMinion41_Func");
    TriggerAddEventDialogControl(gt_HireMinion41, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion41, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [42]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion42_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 800;
    lv_minionint = 42;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_Sarkon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FF352AEF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion42_Init () {
    gt_HireMinion42 = TriggerCreate("gt_HireMinion42_Func");
    TriggerAddEventDialogControl(gt_HireMinion42, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion42, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [43]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion43_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 900;
    lv_minionint = 43;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_JungleWar222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FA6CBC54"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion43_Init () {
    gt_HireMinion43 = TriggerCreate("gt_HireMinion43_Func");
    TriggerAddEventDialogControl(gt_HireMinion43, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion43, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [44]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion44_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 1000;
    lv_minionint = 44;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_JungleWar22", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A5F2BEBB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion44_Init () {
    gt_HireMinion44 = TriggerCreate("gt_HireMinion44_Func");
    TriggerAddEventDialogControl(gt_HireMinion44, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion44, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Minion [45]
//--------------------------------------------------------------------------------------------------
bool gt_HireMinion45_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minioncost;
    int lv_minionint;

    // Variable Initialization
    lv_minioncost = 1500;
    lv_minionint = 45;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[lv_minionint]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_minioncost)) {
        SoundPlayForPlayer(SoundLink("Hire_JungleWar2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((PlayerGroupHasPlayer(gv_p1, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p2, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p3, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p4, EventPlayer()) == true))) {
            gv_t1MinionCounter[lv_minionint] += 1;
        }
        else {
            gv_t2MinionCounter[lv_minionint] += 1;
        }
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_minioncost);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D6060A7E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMinion45_Init () {
    gt_HireMinion45 = TriggerCreate("gt_HireMinion45_Func");
    TriggerAddEventDialogControl(gt_HireMinion45, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMinion45, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Panel
//--------------------------------------------------------------------------------------------------
bool gt_TalentsPanel_Func (bool testConds, bool runActions) {
    int auto3FDEEB37_ae;
    int auto3FDEEB37_ai;

    // Variable Declarations
    int lv_offsetx;
    int lv_offsetxmodifier;
    int lv_offsety;
    int lv_offsetymodifier;
    int lv_integer;
    int lv_nextRow;
    text[52] lv_talentdescription;

    // Variable Initialization
    lv_offsetx = 415;
    lv_offsetxmodifier = 85;
    lv_offsety = 15;
    lv_offsetymodifier = 80;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentimage[0] = "Assets\\Textures\\talent-rage-none.dds";
    lv_talentdescription[0] = StringExternal("Param/Value/25F34D6C");
    gv_talentimage[4] = "Assets\\Textures\\talent-haste-none.dds";
    lv_talentdescription[4] = StringExternal("Param/Value/31217EC6");
    gv_talentimage[8] = "Assets\\Textures\\talent-endurance-none.dds";
    lv_talentdescription[8] = StringExternal("Param/Value/089FD075");
    gv_talentimage[1] = "Assets\\Textures\\talent-hardiness-none.dds";
    lv_talentdescription[1] = StringExternal("Param/Value/BF20E2B3");
    gv_talentimage[5] = "Assets\\Textures\\talent-regeneration-none.dds";
    lv_talentdescription[5] = StringExternal("Param/Value/25A4D5BC");
    gv_talentimage[9] = "Assets\\Textures\\talent-fortitude-none.dds";
    lv_talentdescription[9] = StringExternal("Param/Value/B23AE230");
    gv_talentimage[2] = "Assets\\Textures\\talent-wisdom-none.dds";
    lv_talentdescription[2] = StringExternal("Param/Value/A6D8CEBD");
    gv_talentimage[6] = "Assets\\Textures\\talent-will-none.dds";
    lv_talentdescription[6] = StringExternal("Param/Value/86E4D65C");
    gv_talentimage[10] = "Assets\\Textures\\talent-chaotic-none.dds";
    lv_talentdescription[10] = StringExternal("Param/Value/1AF2F703");
    gv_talentimage[3] = "Assets\\Textures\\talent-readiness-none.dds";
    lv_talentdescription[3] = StringExternal("Param/Value/238253E7");
    gv_talentimage[7] = "Assets\\Textures\\talent-deathlydeal-none.dds";
    lv_talentdescription[7] = StringExternal("Param/Value/2B252D40");
    gv_talentimage[11] = "Assets\\Textures\\talent-greed-none.dds";
    lv_talentdescription[11] = StringExternal("Param/Value/B68F6FD7");
    gv_talentimage[12] = "Assets\\Textures\\ui_tip_questionmark.dds";
    lv_talentdescription[12] = StringExternal("Param/Value/6CADC2D4");
    gv_talentimage[13] = "Assets\\Textures\\ui_tip_questionmark.dds";
    lv_talentdescription[13] = StringExternal("Param/Value/76DCCA18");
    gv_talentimage[14] = "Assets\\Textures\\ui_tip_questionmark.dds";
    lv_talentdescription[14] = StringExternal("Param/Value/3D5F31E6");
    gv_talentimage[15] = "Assets\\Textures\\ui_tip_questionmark.dds";
    lv_talentdescription[15] = StringExternal("Param/Value/66515120");
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_talentBackdrop = DialogLastCreated();
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_talentPanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentBackdrop, 800, 380, c_anchorCenter, 0, 0, StringToText(""), "Assets\\minimapbackground.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto3FDEEB37_ae = 11;
    auto3FDEEB37_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto3FDEEB37_ai >= 0 && lv_integer <= auto3FDEEB37_ae) || (auto3FDEEB37_ai <= 0 && lv_integer >= auto3FDEEB37_ae) ) ; lv_integer += auto3FDEEB37_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_talentPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_talentdescription[lv_integer], StringToText(""), "");
        gv_talentbuttons[lv_integer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_talentPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_talentimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_talentimages[lv_integer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_talentPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), "Assets\\talent-count-zero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_talentcounter[lv_integer] = DialogControlLastCreated();
        lv_offsetx += lv_offsetxmodifier;
        lv_nextRow += 1;
        if ((lv_nextRow == 4)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 415;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsPanel_Init () {
    gt_TalentsPanel = TriggerCreate("gt_TalentsPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [0]
//--------------------------------------------------------------------------------------------------
bool gt_Talent0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 0;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Rage") == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-rage.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/BFA268B3"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Rage", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Rage") == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/230369F6"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], "Rage", gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Rage") == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/D0F8F8EE"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], "Rage", gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Rage") == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/591E9D54"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "Rage", gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Rage") == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/737C2082"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "Rage", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent0_Init () {
    gt_Talent0 = TriggerCreate("gt_Talent0_Func");
    TriggerAddEventDialogControl(gt_Talent0, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent0, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [1]
//--------------------------------------------------------------------------------------------------
bool gt_Talent1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 1;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Fortitude") == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-hardiness.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/5CC832DF"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Fortitude", gv_hero[EventPlayer()], 1);
        UnitBehaviorAdd(gv_hero[EventPlayer()], "FortitudeAdjustment", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Fortitude") == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/90B9B0D9"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], "Fortitude", gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Fortitude") == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/5718A5EA"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], "Fortitude", gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Fortitude") == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/5A292525"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "Fortitude", gv_hero[EventPlayer()], 1);
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "FortitudeAdjustment", gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Fortitude") == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/28F06A50"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "Fortitude", gv_hero[EventPlayer()], 1);
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "FortitudeAdjustment", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent1_Init () {
    gt_Talent1 = TriggerCreate("gt_Talent1_Func");
    TriggerAddEventDialogControl(gt_Talent1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [2]
//--------------------------------------------------------------------------------------------------
bool gt_Talent2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 2;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Wisdom") == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-wisdom.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/1650AD79"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Wisdom", gv_hero[EventPlayer()], 1);
        UnitBehaviorAdd(gv_hero[EventPlayer()], "WisdomAdjustment", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Wisdom") == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/8198E216"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], "Wisdom", gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Wisdom") == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/8FC35C32"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], "Wisdom", gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Wisdom") == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/822BEEC3"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "Wisdom", gv_hero[EventPlayer()], 1);
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "WisdomAdjustment", gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Wisdom") == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/3C3829D4"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "Wisdom", gv_hero[EventPlayer()], 1);
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "WisdomAdjustment", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent2_Init () {
    gt_Talent2 = TriggerCreate("gt_Talent2_Func");
    TriggerAddEventDialogControl(gt_Talent2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [3]
//--------------------------------------------------------------------------------------------------
bool gt_Talent3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 3;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Readiness") == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-readiness.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B42687BF"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Readiness", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Readiness") == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/06389102"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], "Readiness", gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Readiness") == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/157411D0"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], "Readiness", gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Readiness") == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/FDEDE679"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "Readiness", gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Readiness") == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/34DD2492"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "Readiness", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent3_Init () {
    gt_Talent3 = TriggerCreate("gt_Talent3_Func");
    TriggerAddEventDialogControl(gt_Talent3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [4]
//--------------------------------------------------------------------------------------------------
bool gt_Talent4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 4;
    lv_behavior = "Haste";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-haste.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/AFB48672"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/0941D98F"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B4FC85B2"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/64AD88DC"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/D7A7AC45"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent4_Init () {
    gt_Talent4 = TriggerCreate("gt_Talent4_Func");
    TriggerAddEventDialogControl(gt_Talent4, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent4, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [5]
//--------------------------------------------------------------------------------------------------
bool gt_Talent5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 5;
    lv_behavior = "Naturalist";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-regeneration.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/450B020D"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/747226E9"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/14D604FD"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/11149D0A"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/F2F23701"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent5_Init () {
    gt_Talent5 = TriggerCreate("gt_Talent5_Func");
    TriggerAddEventDialogControl(gt_Talent5, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent5, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [6]
//--------------------------------------------------------------------------------------------------
bool gt_Talent6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 6;
    lv_behavior = "Naturalist2";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-will.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B67776A0"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/D7C04EC7"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/3BF26956"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/D2BCA6D1"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B7D9CB8E"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent6_Init () {
    gt_Talent6 = TriggerCreate("gt_Talent6_Func");
    TriggerAddEventDialogControl(gt_Talent6, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent6, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [7]
//--------------------------------------------------------------------------------------------------
bool gt_Talent7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[7]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 7;
    lv_behavior = "DeathlyDeal";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-deathlydeal.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/AB0F2DE6"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/7DD848FE"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/ED00FBF7"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/AD8B1390"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/56E6E554"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent7_Init () {
    gt_Talent7 = TriggerCreate("gt_Talent7_Func");
    TriggerAddEventDialogControl(gt_Talent7, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent7, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [8]
//--------------------------------------------------------------------------------------------------
bool gt_Talent8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[8]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 8;
    lv_behavior = "Endurance";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-endurance.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/A0D2754D"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/54AA032F"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/05B3A420"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/2516797B"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/BD18A0AB"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent8_Init () {
    gt_Talent8 = TriggerCreate("gt_Talent8_Func");
    TriggerAddEventDialogControl(gt_Talent8, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent8, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [9]
//--------------------------------------------------------------------------------------------------
bool gt_Talent9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[9]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 9;
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness1") == 0) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness12") == 0) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness3") == 0) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness4") == 0) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness5") == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-fortitude.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/9F1FEC1A"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Hardiness1", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness1") == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/0AE9B554"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorRemove(gv_hero[EventPlayer()], "Hardiness1", 1);
            UnitBehaviorAdd(gv_hero[EventPlayer()], "Hardiness12", gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness12") == 1)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/797F0DE0"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorRemove(gv_hero[EventPlayer()], "Hardiness12", 1);
                UnitBehaviorAdd(gv_hero[EventPlayer()], "Hardiness3", gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness3") == 1)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/705673A6"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorRemove(gv_hero[EventPlayer()], "Hardiness3", 1);
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "Hardiness4", gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], "Hardiness4") == 1)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/50FCAE8E"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorRemove(gv_hero[EventPlayer()], "Hardiness4", 1);
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "Hardiness5", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent9_Init () {
    gt_Talent9 = TriggerCreate("gt_Talent9_Func");
    TriggerAddEventDialogControl(gt_Talent9, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent9, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [10]
//--------------------------------------------------------------------------------------------------
bool gt_Talent10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[10]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 10;
    lv_behavior = "Chaotic";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-chaotic.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/E05CA479"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        UnitBehaviorAdd(gv_hero[EventPlayer()], "ChaoticAdjustment", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B21ECEAD"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/E838C784"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/08478E9A"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/73ACEAC4"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "ChaoticAdjustment", gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent10_Init () {
    gt_Talent10 = TriggerCreate("gt_Talent10_Func");
    TriggerAddEventDialogControl(gt_Talent10, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent10, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent [11]
//--------------------------------------------------------------------------------------------------
bool gt_Talent11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_useddialog;
    string lv_behavior;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_talentbuttons[11]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_useddialog = 11;
    lv_behavior = "Greed";
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 0)) {
        libNtve_gf_SetDialogItemImage(gv_talentimages[lv_useddialog], "Assets\\Textures\\talent-greed.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/EC555706"), PlayerGroupSingle(EventPlayer()));
        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 25.0);
        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-one.dds", PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 1)) {
            libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/77F01266"), PlayerGroupSingle(EventPlayer()));
            UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
            PlayerModifyPropertyFixed(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 25.0);
            libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-two.dds", PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 2)) {
                libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/B5E42B40"), PlayerGroupSingle(EventPlayer()));
                UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                PlayerModifyPropertyFixed(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 25.0);
                libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-three.dds", PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 3)) {
                    libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/41D90DC7"), PlayerGroupSingle(EventPlayer()));
                    UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 25.0);
                    libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-four.dds", PlayerGroupSingle(EventPlayer()));
                }
                else {
                    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1) && (UnitBehaviorCount(gv_hero[EventPlayer()], lv_behavior) == 4)) {
                        libNtve_gf_SetDialogItemTooltip(gv_talentbuttons[lv_useddialog], StringExternal("Param/Value/BD70580D"), PlayerGroupSingle(EventPlayer()));
                        UnitBehaviorAdd(gv_hero[EventPlayer()], lv_behavior, gv_hero[EventPlayer()], 1);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropCustom, c_playerPropOperSubtract, 1.0);
                        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 25.0);
                        libNtve_gf_SetDialogItemImage(gv_talentcounter[lv_useddialog], "Assets\\talent-count-five.dds", PlayerGroupSingle(EventPlayer()));
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talent11_Init () {
    gt_Talent11 = TriggerCreate("gt_Talent11_Func");
    TriggerAddEventDialogControl(gt_Talent11, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_Talent11, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store Panel
//--------------------------------------------------------------------------------------------------
bool gt_StorePanel_Func (bool testConds, bool runActions) {
    int auto98C5A800_ae;
    int auto98C5A800_ai;
    int auto0CDBA60D_ae;
    int auto0CDBA60D_ai;
    int autoE9561B0C_ae;
    int autoE9561B0C_ai;

    // Variable Declarations
    int lv_offsetx;
    int lv_offsetxmodifier;
    int lv_offsety;
    int lv_offsetymodifier;
    int lv_integer;
    int lv_nextRow;
    text[52] lv_itemdescription;

    // Variable Initialization
    lv_offsetx = 60;
    lv_offsetxmodifier = 85;
    lv_offsety = 80;
    lv_offsetymodifier = 80;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    gv_commandPanelDialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel");
    gv_infoPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel");
    gv_unitPanel = DialogControlLastCreated();
    DialogControlCreateInPanel(gv_commandPanelDialog, c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 2400, 550);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\warcraft-background.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 0, PlayerGroupAll());
    DialogControlCreateInPanel(gv_infoPanel, c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 2400, 550);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\background-hero.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 0, PlayerGroupAll());
    DialogControlCreateInPanel(gv_unitPanel, c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 2400, 550);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\background-hero.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 0, PlayerGroupAll());
    gv_itemiconimage[0] = "Assets\\Textures\\item-health-pot-1.dds";
    lv_itemdescription[0] = StringExternal("Param/Value/9C487D05");
    gv_itemiconimage[1] = "Assets\\Textures\\item-energy-pot-1.dds";
    lv_itemdescription[1] = StringExternal("Param/Value/BBDBFFB8");
    gv_itemiconimage[2] = "Assets\\Textures\\war3_btnsnazzyscrollgreen.dds";
    lv_itemdescription[2] = StringExternal("Param/Value/C25DF959");
    gv_itemiconimage[3] = "Assets\\Textures\\war3_btnscroll.dds";
    lv_itemdescription[3] = StringExternal("Param/Value/6DA7DEA5");
    gv_itemiconimage[4] = "Assets\\Textures\\war3_btnsteelarmor.dds";
    lv_itemdescription[4] = StringExternal("Param/Value/256A735D");
    gv_itemiconimage[5] = "Assets\\Textures\\war3_btnsteelmelee.dds";
    lv_itemdescription[5] = StringExternal("Param/Value/B8E25336");
    gv_itemiconimage[6] = "Assets\\Textures\\war3_btnorcmeleeupone.dds";
    lv_itemdescription[6] = StringExternal("Param/Value/8C2A7F3D");
    gv_itemiconimage[7] = "Assets\\Textures\\item-hammer-1.dds";
    lv_itemdescription[7] = StringExternal("Param/Value/2FF5A908");
    gv_itemiconimage[8] = "Assets\\Textures\\item-health-pot-2.dds";
    lv_itemdescription[8] = StringExternal("Param/Value/0EB935CF");
    gv_itemiconimage[9] = "Assets\\Textures\\item-energy-pot-2.dds";
    lv_itemdescription[9] = StringExternal("Param/Value/BBA1E2A2");
    gv_itemiconimage[10] = "Assets\\Textures\\item-heal-scroll-2.dds";
    lv_itemdescription[10] = StringExternal("Param/Value/A47A60B3");
    gv_itemiconimage[11] = "Assets\\Textures\\war3_btnscrollofprotection.dds";
    lv_itemdescription[11] = StringExternal("Param/Value/04D31CAB");
    gv_itemiconimage[12] = "Assets\\Textures\\war3_btnthoriumarmor.dds";
    lv_itemdescription[12] = StringExternal("Param/Value/A96CAAEB");
    gv_itemiconimage[13] = "Assets\\Textures\\war3_btnthoriummelee.dds";
    lv_itemdescription[13] = StringExternal("Param/Value/4C6FD19F");
    gv_itemiconimage[14] = "Assets\\Textures\\war3_btnorcmeleeuptwo.dds";
    lv_itemdescription[14] = StringExternal("Param/Value/D564C989");
    gv_itemiconimage[15] = "Assets\\Textures\\item-hammer-2.dds";
    lv_itemdescription[15] = StringExternal("Param/Value/DF6372F2");
    gv_itemiconimage[16] = "Assets\\Textures\\item-health-pot-3.dds";
    lv_itemdescription[16] = StringExternal("Param/Value/E7B2F3D5");
    gv_itemiconimage[17] = "Assets\\Textures\\item-energy-pot-3.dds";
    lv_itemdescription[17] = StringExternal("Param/Value/50F5C09B");
    gv_itemiconimage[18] = "Assets\\Textures\\item-heal-scroll-3.dds";
    lv_itemdescription[18] = StringExternal("Param/Value/EB0C86B1");
    gv_itemiconimage[19] = "Assets\\Textures\\war3_btnscrollofhealing.dds";
    lv_itemdescription[19] = StringExternal("Param/Value/113EA1E7");
    gv_itemiconimage[20] = "Assets\\Textures\\war3_btnadvancedunholyarmor.dds";
    lv_itemdescription[20] = StringExternal("Param/Value/C35E0873");
    gv_itemiconimage[21] = "Assets\\Textures\\war3_btnarcanitemelee.dds";
    lv_itemdescription[21] = StringExternal("Param/Value/310B119A");
    gv_itemiconimage[22] = "Assets\\Textures\\war3_btnorcmeleeupthree.dds";
    lv_itemdescription[22] = StringExternal("Param/Value/8C379D2D");
    gv_itemiconimage[23] = "Assets\\Textures\\item-hammer-3.dds";
    lv_itemdescription[23] = StringExternal("Param/Value/FB923841");
    gv_itemiconimage[24] = "Assets\\Textures\\item-enchanted-staff-1.dds";
    lv_itemdescription[24] = StringExternal("Param/Value/45DC001A");
    gv_itemiconimage[25] = "Assets\\Textures\\item-journeyman-boots.dds";
    lv_itemdescription[25] = StringExternal("Param/Value/967BDD0C");
    gv_itemiconimage[26] = "Assets\\Textures\\item-footman-gauntlets-I.dds";
    lv_itemdescription[26] = StringExternal("Param/Value/570BE596");
    gv_itemiconimage[27] = "Assets\\Textures\\item-grunts-bulwark-I.dds";
    lv_itemdescription[27] = StringExternal("Param/Value/C294C3F5");
    gv_itemiconimage[28] = "Assets\\Textures\\item-ancestral-necklace-2.dds";
    lv_itemdescription[28] = StringExternal("Param/Value/B9F12389");
    gv_itemiconimage[29] = "Assets\\Textures\\war3_btnsobimask.dds";
    lv_itemdescription[29] = StringExternal("Param/Value/F8C56B6C");
    gv_itemiconimage[30] = "Assets\\Textures\\item-skull-trinket-2.dds";
    lv_itemdescription[30] = StringExternal("Param/Value/454427AC");
    gv_itemiconimage[31] = "Assets\\Textures\\item-lucky-pocketwatch.dds";
    lv_itemdescription[31] = StringExternal("Param/Value/82EDE448");
    gv_itemiconimage[32] = "Assets\\Textures\\item-enchanted-staff-2.dds";
    lv_itemdescription[32] = StringExternal("Param/Value/AB549727");
    gv_itemiconimage[33] = "Assets\\Textures\\item-adventurer-treads.dds";
    lv_itemdescription[33] = StringExternal("Param/Value/FDEA080F");
    gv_itemiconimage[34] = "Assets\\Textures\\item-footman-gauntlets-II.dds";
    lv_itemdescription[34] = StringExternal("Param/Value/012AB37E");
    gv_itemiconimage[35] = "Assets\\Textures\\item-grunts-bulwark-II.dds";
    lv_itemdescription[35] = StringExternal("Param/Value/5C1DE970");
    gv_itemiconimage[36] = "Assets\\Textures\\war3_btnorbofdeath.dds";
    lv_itemdescription[36] = StringExternal("Param/Value/0F1B12B7");
    gv_itemiconimage[37] = "Assets\\Textures\\war3_btnusedsoulgem.dds";
    lv_itemdescription[37] = StringExternal("Param/Value/E3F7C8F8");
    gv_itemiconimage[38] = "Assets\\Textures\\war3_btndaggerofescape.dds";
    lv_itemdescription[38] = StringExternal("Param/Value/E679C89F");
    gv_itemiconimage[39] = "Assets\\Textures\\war3_btnscepterofmastery.dds";
    lv_itemdescription[39] = StringExternal("Param/Value/9590A15D");
    gv_itemiconimage[40] = "Assets\\Textures\\item-enchanted-staff-3.dds";
    lv_itemdescription[40] = StringExternal("Param/Value/880B3C78");
    gv_itemiconimage[41] = "Assets\\Textures\\item-dungeoneer-grieves.dds";
    lv_itemdescription[41] = StringExternal("Param/Value/07C40EFD");
    gv_itemiconimage[42] = "Assets\\Textures\\item-footman-gauntlets-III.dds";
    lv_itemdescription[42] = StringExternal("Param/Value/BC387FFF");
    gv_itemiconimage[43] = "Assets\\Textures\\item-grunts-bulwark-III.dds";
    lv_itemdescription[43] = StringExternal("Param/Value/CDBDCE66");
    gv_itemiconimage[44] = "Assets\\Textures\\war3_btnmaskofdeath.dds";
    lv_itemdescription[44] = StringExternal("Param/Value/741CDA9A");
    gv_itemiconimage[45] = "Assets\\Textures\\war3_btnwirtsotherleg.dds";
    lv_itemdescription[45] = StringExternal("Param/Value/02F709C2");
    gv_itemiconimage[46] = "Assets\\Textures\\btn-building-terran-artifact.dds";
    lv_itemdescription[46] = StringExternal("Param/Value/CA8EC33F");
    gv_itemiconimage[47] = "Assets\\Textures\\war3_btnmgexchange.dds";
    lv_itemdescription[47] = StringExternal("Param/Value/E7A9270D");
    gv_itemiconimage[48] = "Assets\\Textures\\war3_btntomered.dds";
    lv_itemdescription[48] = StringExternal("Param/Value/2C9D05B3");
    gv_itemiconimage[49] = "Assets\\Textures\\war3_btntomebrown.dds";
    lv_itemdescription[49] = StringExternal("Param/Value/CFFDAC49");
    gv_itemiconimage[50] = "Assets\\Textures\\war3_btntome.dds";
    lv_itemdescription[50] = StringExternal("Param/Value/D2268E32");
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_shopBackdrop = DialogLastCreated();
    DialogCreate(800, 380, c_anchorBottomLeft, -5, -45, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_shopPanel = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopBackdrop, 800, 380, c_anchorCenter, 0, 0, StringToText(""), "Assets\\background-troll.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto98C5A800_ae = 23;
    auto98C5A800_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto98C5A800_ai >= 0 && lv_integer <= auto98C5A800_ae) || (auto98C5A800_ai <= 0 && lv_integer >= auto98C5A800_ae) ) ; lv_integer += auto98C5A800_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_itemdescription[lv_integer], StringToText(""), "");
        gv_itembuttons[lv_integer] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_itemiconimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_itemimage[lv_integer] = DialogControlLastCreated();
        lv_offsetx += lv_offsetxmodifier;
        lv_nextRow += 1;
        if ((lv_nextRow == 8)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 60;
        }

    }
    lv_offsetx = 60;
    lv_offsety = 80;
    auto0CDBA60D_ae = 47;
    auto0CDBA60D_ai = 1;
    lv_integer = 24;
    for ( ; ( (auto0CDBA60D_ai >= 0 && lv_integer <= auto0CDBA60D_ae) || (auto0CDBA60D_ai <= 0 && lv_integer >= auto0CDBA60D_ae) ) ; lv_integer += auto0CDBA60D_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_itemdescription[lv_integer], StringToText(""), "");
        gv_itembuttons[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_itemiconimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_itemimage[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_offsetx += lv_offsetxmodifier;
        lv_nextRow += 1;
        if ((lv_nextRow == 8)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 60;
        }

    }
    lv_offsetx = 60;
    lv_offsety = 80;
    autoE9561B0C_ae = 50;
    autoE9561B0C_ai = 1;
    lv_integer = 48;
    for ( ; ( (autoE9561B0C_ai >= 0 && lv_integer <= autoE9561B0C_ae) || (autoE9561B0C_ai <= 0 && lv_integer >= autoE9561B0C_ae) ) ; lv_integer += autoE9561B0C_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_itemdescription[lv_integer], StringToText(""), "");
        gv_itembuttons[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_itemiconimage[lv_integer], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_itemimage[lv_integer] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        if ((lv_integer == 47)) {
            libNtve_gf_CreateDialogItemButton(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, lv_itemdescription[51], StringToText(""), "");
            gv_itembuttons[51] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemImage(gv_shopPanel, 75, 75, c_anchorTopLeft, lv_offsetx, lv_offsety, StringToText(""), gv_itemiconimage[51], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_itemimage[51] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }

        lv_offsetx += lv_offsetxmodifier;
        lv_nextRow += 1;
        if ((lv_nextRow == 8)) {
            lv_offsety += lv_offsetymodifier;
            lv_nextRow = 0;
            lv_offsetx = 60;
        }

    }
    libNtve_gf_CreateDialogItemButton(gv_shopPanel, 50, 50, c_anchorTopLeft, 80, 25, StringExternal("Param/Value/BD568401"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_previousstorepage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopPanel, 50, 50, c_anchorTopLeft, 80, 25, StringToText(""), "Assets\\shop_prev.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_previousstorepageimage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_shopPanel, 50, 50, c_anchorTopLeft, 320, 25, StringExternal("Param/Value/953F6CBA"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_nextstorepage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopPanel, 50, 50, c_anchorTopLeft, 320, 25, StringToText(""), "Assets\\shop_next.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_nextstorepageimage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_shopPanel, 50, 50, c_anchorTopLeft, 140, 25, StringExternal("Param/Value/74DF182C"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_storePage1Button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopPanel, 50, 50, c_anchorTopLeft, 140, 25, StringToText(""), "Assets\\button-blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 140, 25, StringExternal("Param/Value/B551C890"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_shopPanel, 50, 50, c_anchorTopLeft, 200, 25, StringExternal("Param/Value/46CF4FF3"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_storePage2Button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopPanel, 50, 50, c_anchorTopLeft, 200, 25, StringToText(""), "Assets\\button-blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 200, 25, StringExternal("Param/Value/0DA807FC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_shopPanel, 50, 50, c_anchorTopLeft, 260, 25, StringExternal("Param/Value/7C8A1CDE"), StringToText(""), "");
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_storePage3Button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shopPanel, 50, 50, c_anchorTopLeft, 260, 25, StringToText(""), "Assets\\button-blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 260, 25, StringExternal("Param/Value/F2F20C72"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorePanel_Init () {
    gt_StorePanel = TriggerCreate("gt_StorePanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Health Pot 1
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseHealthPot1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 35) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollIII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollIII"))) {
                lv_holdingpotionscroll = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessHealthPotionI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 35);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/366DDD2E"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1DF4362D"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AED3EA03"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/73BE4895"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseHealthPot1_Init () {
    gt_PurchaseHealthPot1 = TriggerCreate("gt_PurchaseHealthPot1_Func");
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Energy Pot 1
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnergyPot1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 25) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollIII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollIII"))) {
                lv_holdingpotionscroll = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessEnergyPotionI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 25);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1276A1EB"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/09492D7D"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AFA48019"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/23C491AF"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnergyPot1_Init () {
    gt_PurchaseEnergyPot1 = TriggerCreate("gt_PurchaseEnergyPot1_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Cleric Scroll I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseClericScrollI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollIII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollIII"))) {
                lv_holdingpotionscroll = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ClericsScrollI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 50);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/20087B3D"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/853E6995"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A32A6A3C"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9E8D1EFA"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseClericScrollI_Init () {
    gt_PurchaseClericScrollI = TriggerCreate("gt_PurchaseClericScrollI_Func");
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Traveler's Scroll I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTravelersScrollI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 65) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionI") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionII") || (UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionIII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollIII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollI") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollII") || (UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollIII"))) {
                lv_holdingpotionscroll = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "TravelersScrollI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 65);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BD559AB5"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BE419181"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2F8641AD"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B0DA02FA"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTravelersScrollI_Init () {
    gt_PurchaseTravelersScrollI = TriggerCreate("gt_PurchaseTravelersScrollI_Func");
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Shield I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseShieldI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingshield;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 75) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ShieldI") || (UnitGetType(UnitGroupLoopCurrent()) == "ShieldII") || (UnitGetType(UnitGroupLoopCurrent()) == "ShieldIII"))) {
                lv_holdingshield = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingshield == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ShieldI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 75);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B8F97088"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9D542BB4"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/37522F37"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EA27DD1B"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseShieldI_Init () {
    gt_PurchaseShieldI = TriggerCreate("gt_PurchaseShieldI_Func");
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Quicksword I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseQuickswordI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingsword;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 85) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "QuickswordI") || (UnitGetType(UnitGroupLoopCurrent()) == "QuickswordII") || (UnitGetType(UnitGroupLoopCurrent()) == "QuickswordIII"))) {
                lv_holdingsword = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingsword == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "QuickswordI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 85);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E4E662F5"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/989DFDD8"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5E5C2ADE"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D09FFDC5"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseQuickswordI_Init () {
    gt_PurchaseQuickswordI = TriggerCreate("gt_PurchaseQuickswordI_Func");
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Battle Axe I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseBattleAxeI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingaxe;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 95) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BattleAxeI") || (UnitGetType(UnitGroupLoopCurrent()) == "BattleAxeII") || (UnitGetType(UnitGroupLoopCurrent()) == "BattleAxeIII"))) {
                lv_holdingaxe = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingaxe == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BattleAxeI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 95);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3F6BC95F"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6E92EFB3"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CECFD7D0"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/25A1D254"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseBattleAxeI_Init () {
    gt_PurchaseBattleAxeI = TriggerCreate("gt_PurchaseBattleAxeI_Func");
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase War Hammer I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseWarHammerI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinghammer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[7]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 105) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "WarHammerI") || (UnitGetType(UnitGroupLoopCurrent()) == "WarHammerII") || (UnitGetType(UnitGroupLoopCurrent()) == "WarHammerIII"))) {
                lv_holdinghammer = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinghammer == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "WarHammerI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 105);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0BD70B9F"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DAD7B67E"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/29D5AF61"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9E738D1D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseWarHammerI_Init () {
    gt_PurchaseWarHammerI = TriggerCreate("gt_PurchaseWarHammerI_Func");
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Health Pot 2
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseHealthPot2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[8]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 70)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionI"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessHealthPotionII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 70);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/13536127"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F6730AD5"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/38057C96"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/874AB423"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseHealthPot2_Init () {
    gt_PurchaseHealthPot2 = TriggerCreate("gt_PurchaseHealthPot2_Func");
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Energy Pot 2
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnergyPot2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[9]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionI"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessEnergyPotionII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 50);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/45046A66"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4FCE2CE5"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3376103C"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E5B4326E"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnergyPot2_Init () {
    gt_PurchaseEnergyPot2 = TriggerCreate("gt_PurchaseEnergyPot2_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Cleric Scroll II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseClericScrollII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[10]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 85)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollI"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ClericsScrollII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 85);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/63343895"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/991DDFA2"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/619B74C7"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/125FCD67"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseClericScrollII_Init () {
    gt_PurchaseClericScrollII = TriggerCreate("gt_PurchaseClericScrollII_Func");
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Traveler's Scroll II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTravelersScrollII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[11]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 90)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollI"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "TravelersScrollII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 90);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/78209F53"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5014F301"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3CAB99F7"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4E0B4285"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTravelersScrollII_Init () {
    gt_PurchaseTravelersScrollII = TriggerCreate("gt_PurchaseTravelersScrollII_Func");
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Shield II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseShieldII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingshield;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[12]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ShieldI"))) {
                lv_holdingshield = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingshield == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ShieldII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 100);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1CD2893D"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D08DB2DA"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EC82164B"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C2B92EE5"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseShieldII_Init () {
    gt_PurchaseShieldII = TriggerCreate("gt_PurchaseShieldII_Func");
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Quicksword II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseQuickswordII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingsword;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[13]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 115)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "QuickswordI"))) {
                lv_holdingsword = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingsword == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "QuickswordII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 115);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/334BC470"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AC49E989"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1F1AF230"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9CAFF78C"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseQuickswordII_Init () {
    gt_PurchaseQuickswordII = TriggerCreate("gt_PurchaseQuickswordII_Func");
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Battle Axe II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseBattleAxeII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingaxe;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[14]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 125)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BattleAxeI"))) {
                lv_holdingaxe = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingaxe == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BattleAxeII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 125);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E8F578FC"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CA5BADA7"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A7A3553D"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/32580B50"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseBattleAxeII_Init () {
    gt_PurchaseBattleAxeII = TriggerCreate("gt_PurchaseBattleAxeII_Func");
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase War Hammer II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseWarHammerII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinghammer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[15]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 135)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "WarHammerI"))) {
                lv_holdinghammer = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinghammer == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "WarHammerII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 135);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CB3D7E4C"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/820CC98A"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/90D5B572"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F33C49FA"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseWarHammerII_Init () {
    gt_PurchaseWarHammerII = TriggerCreate("gt_PurchaseWarHammerII_Func");
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Health Pot 3
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseHealthPot3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[16]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 105)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessHealthPotionII"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessHealthPotionIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 105);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2BB1A0AF"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/57A9C9E8"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F6E80DE7"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/086FEB70"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseHealthPot3_Init () {
    gt_PurchaseHealthPot3 = TriggerCreate("gt_PurchaseHealthPot3_Func");
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseHealthPot3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Energy Pot 3
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnergyPot3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[17]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 75)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BottomlessEnergyPotionII"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BottomlessEnergyPotionIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 75);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9115C780"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7903D9DC"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5BB6ADC6"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C149B8D1"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnergyPot3_Init () {
    gt_PurchaseEnergyPot3 = TriggerCreate("gt_PurchaseEnergyPot3_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnergyPot3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Cleric Scroll III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseClericScrollIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[18]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 115)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ClericsScrollII"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ClericsScrollIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 115);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FBBBCC66"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/52400B2F"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C91B04B5"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/77D9DA3D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseClericScrollIII_Init () {
    gt_PurchaseClericScrollIII = TriggerCreate("gt_PurchaseClericScrollIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseClericScrollIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Traveler's Scroll III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTravelersScrollIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingpotionscroll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[19]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 125)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "TravelersScrollII"))) {
                lv_holdingpotionscroll = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingpotionscroll == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "TravelersScrollIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 125);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CB7F9F1F"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6E68B328"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/260957BB"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DF06373F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTravelersScrollIII_Init () {
    gt_PurchaseTravelersScrollIII = TriggerCreate("gt_PurchaseTravelersScrollIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTravelersScrollIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Shield III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseShieldIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingshield;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[20]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 150)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ShieldII"))) {
                lv_holdingshield = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingshield == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ShieldIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 150);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E60A8E54"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2C6E59B2"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4572951C"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CE831ED7"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseShieldIII_Init () {
    gt_PurchaseShieldIII = TriggerCreate("gt_PurchaseShieldIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseShieldIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Quicksword III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseQuickswordIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingsword;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[21]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 155)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "QuickswordII"))) {
                lv_holdingsword = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingsword == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "QuickswordIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 155);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/416A228F"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B3D01A29"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EFB40FD0"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FF148924"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseQuickswordIII_Init () {
    gt_PurchaseQuickswordIII = TriggerCreate("gt_PurchaseQuickswordIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseQuickswordIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Battle Axe III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseBattleAxeIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingaxe;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[22]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 165)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BattleAxeII"))) {
                lv_holdingaxe = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingaxe == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BattleAxeIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 165);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/729FBFFB"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BAB8F74D"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/8AC5E0F0"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/412AEE3D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseBattleAxeIII_Init () {
    gt_PurchaseBattleAxeIII = TriggerCreate("gt_PurchaseBattleAxeIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBattleAxeIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase War Hammer III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseWarHammerIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinghammer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[23]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 175)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "WarHammerII"))) {
                lv_holdinghammer = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinghammer == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "WarHammerIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 175);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7CEB7E15"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0BC27847"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/ACCAC1A5"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F1A413C2"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseWarHammerIII_Init () {
    gt_PurchaseWarHammerIII = TriggerCreate("gt_PurchaseWarHammerIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWarHammerIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Enchanted Staff I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnchantedStaffI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingstaff;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[24]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 80) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "EnchantedStaffI") || (UnitGetType(UnitGroupLoopCurrent()) == "EnchantedStaffII") || (UnitGetType(UnitGroupLoopCurrent()) == "EnchantedStaffIII"))) {
                lv_holdingstaff = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingstaff == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "EnchantedStaffI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 80);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CE13A30D"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B1A00E70"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B0F26805"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4FE3722D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnchantedStaffI_Init () {
    gt_PurchaseEnchantedStaffI = TriggerCreate("gt_PurchaseEnchantedStaffI_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Adventurer Boots I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseAdventurerBootsI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingboots;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[25]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 55) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "AdventurerBootsI") || (UnitGetType(UnitGroupLoopCurrent()) == "AdventurerBootsII") || (UnitGetType(UnitGroupLoopCurrent()) == "AdventurerBootsIII"))) {
                lv_holdingboots = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingboots == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "AdventurerBootsI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 55);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A5C260D2"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/08C56963"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1E77B6C9"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A281CA2C"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseAdventurerBootsI_Init () {
    gt_PurchaseAdventurerBootsI = TriggerCreate("gt_PurchaseAdventurerBootsI_Func");
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Footman Gauntlets I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseFootmanGauntletsI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinggauntlets;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[26]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 60) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "FootmanGauntletsI") || (UnitGetType(UnitGroupLoopCurrent()) == "FootmanGauntletsII") || (UnitGetType(UnitGroupLoopCurrent()) == "FootmanGauntletsIII"))) {
                lv_holdinggauntlets = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinggauntlets == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "FootmanGauntletsI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 60);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1DD5AA7D"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/483DD374"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FBDA8FBA"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/91EB4E46"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseFootmanGauntletsI_Init () {
    gt_PurchaseFootmanGauntletsI = TriggerCreate("gt_PurchaseFootmanGauntletsI_Func");
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Grunts Bulwark I
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseGruntsBulwarkI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingbulwark;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[27]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "GruntsBulwarkI") || (UnitGetType(UnitGroupLoopCurrent()) == "GruntsBulwarkII") || (UnitGetType(UnitGroupLoopCurrent()) == "GruntsBulwarkIII"))) {
                lv_holdingbulwark = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingbulwark == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "GruntsBulwarkI");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 100);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5297CD7B"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3BA1337D"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BB65F91E"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4EB174C1"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseGruntsBulwarkI_Init () {
    gt_PurchaseGruntsBulwarkI = TriggerCreate("gt_PurchaseGruntsBulwarkI_Func");
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkI, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Spiritual Necklace
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseSpiritualNecklace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingnecklace;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[28]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 150) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "SpiritualNecklace"))) {
                lv_holdingnecklace = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingnecklace == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "SpiritualNecklace");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 150);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F5C5F453"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/94D4D4C9"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DE6252B7"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B35C8A1A"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseSpiritualNecklace_Init () {
    gt_PurchaseSpiritualNecklace = TriggerCreate("gt_PurchaseSpiritualNecklace_Func");
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSpiritualNecklace, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Sobi Mask
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseSobiMask_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingmask;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[29]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 120) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "SobiMask"))) {
                lv_holdingmask = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingmask == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "SobiMask");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 120);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7178B11A"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5AFF6A46"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/299F1D85"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EDA3596F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseSobiMask_Init () {
    gt_PurchaseSobiMask = TriggerCreate("gt_PurchaseSobiMask_Func");
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSobiMask, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Skull Trinket
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseSkullTrinket_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingtrinket;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[30]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 175) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "SkullTrinket"))) {
                lv_holdingtrinket = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingtrinket == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "SkullTrinket");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 175);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C5A2C2C2"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C212053D"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2C71DCBB"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A048C202"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseSkullTrinket_Init () {
    gt_PurchaseSkullTrinket = TriggerCreate("gt_PurchaseSkullTrinket_Func");
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseSkullTrinket, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Lucky Pocket Watch
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseLuckyPocketWatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingwatch;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[31]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 350) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "LuckyPocketWatch"))) {
                lv_holdingwatch = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingwatch == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "LuckyPocketWatch");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 350);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/60AE5F2C"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/98AE709F"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5293B990"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/08B1AF32"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseLuckyPocketWatch_Init () {
    gt_PurchaseLuckyPocketWatch = TriggerCreate("gt_PurchaseLuckyPocketWatch_Func");
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLuckyPocketWatch, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Enchanted Staff II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnchantedStaffII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingstaff;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[32]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "EnchantedStaffI"))) {
                lv_holdingstaff = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingstaff == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "EnchantedStaffII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 100);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2167177B"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/53D55B9E"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/82EBA516"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/06E1946A"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnchantedStaffII_Init () {
    gt_PurchaseEnchantedStaffII = TriggerCreate("gt_PurchaseEnchantedStaffII_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Adventurer Boots II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseAdventurerBootsII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingboots;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[33]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 85)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "AdventurerBootsI"))) {
                lv_holdingboots = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingboots == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "AdventurerBootsII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 85);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/176DFD39"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D7E92ACF"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/BB7D5945"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6B15E944"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseAdventurerBootsII_Init () {
    gt_PurchaseAdventurerBootsII = TriggerCreate("gt_PurchaseAdventurerBootsII_Func");
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Footman Gauntlets II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseFootmanGauntletsII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinggauntlets;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[34]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 90)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "FootmanGauntletsI"))) {
                lv_holdinggauntlets = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinggauntlets == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "FootmanGauntletsII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 90);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/06051FF3"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DEBB8DC9"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/87EF5F8A"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C87AAD6F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseFootmanGauntletsII_Init () {
    gt_PurchaseFootmanGauntletsII = TriggerCreate("gt_PurchaseFootmanGauntletsII_Func");
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Grunts Bulwark II
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseGruntsBulwarkII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingbulwark;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[35]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 150)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "GruntsBulwarkI"))) {
                lv_holdingbulwark = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingbulwark == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "GruntsBulwarkII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 150);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EFE4415F"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7A8E90DE"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0F7C15F4"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E5063B76"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseGruntsBulwarkII_Init () {
    gt_PurchaseGruntsBulwarkII = TriggerCreate("gt_PurchaseGruntsBulwarkII_Func");
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Infernal Core
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseInfernalCore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingcore;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[36]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 400) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "InfernalCore"))) {
                lv_holdingcore = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingcore == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "InfernalCore");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 400);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E3192966"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/2B38B367"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/01EA53F4"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/CFBCDBC3"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseInfernalCore_Init () {
    gt_PurchaseInfernalCore = TriggerCreate("gt_PurchaseInfernalCore_Func");
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseInfernalCore, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Essence Absorber
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEssenceAbsorber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingabsorber;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[37]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 300) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "EssenceAbsorber"))) {
                lv_holdingabsorber = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingabsorber == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "EssenceAbsorber");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 300);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9A377A99"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0069082B"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/69554142"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6EF8C677"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEssenceAbsorber_Init () {
    gt_PurchaseEssenceAbsorber = TriggerCreate("gt_PurchaseEssenceAbsorber_Func");
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEssenceAbsorber, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Scoundrel's Dagger
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseScoundrelsDagger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingdagger;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[38]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 275) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "ScoundrelsDagger"))) {
                lv_holdingdagger = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingdagger == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "ScoundrelsDagger");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 275);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/51805AC1"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/DB1C5C1B"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F38FA222"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6DF052B1"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseScoundrelsDagger_Init () {
    gt_PurchaseScoundrelsDagger = TriggerCreate("gt_PurchaseScoundrelsDagger_Func");
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseScoundrelsDagger, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Lost Sheppards Staff
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseLostSheppardsStaff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingstaff;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[39]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 425) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "LostSheppardsStaff"))) {
                lv_holdingstaff = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingstaff == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "LostSheppardsStaff");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 425);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/FE703269"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B04E16AB"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5284972E"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9A9E4AAA"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseLostSheppardsStaff_Init () {
    gt_PurchaseLostSheppardsStaff = TriggerCreate("gt_PurchaseLostSheppardsStaff_Func");
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseLostSheppardsStaff, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Enchanted Staff III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseEnchantedStaffIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingstaff;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[40]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 120)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "EnchantedStaffII"))) {
                lv_holdingstaff = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingstaff == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "EnchantedStaffIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 120);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/958703AC"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/80481042"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5441FF4A"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D5634016"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseEnchantedStaffIII_Init () {
    gt_PurchaseEnchantedStaffIII = TriggerCreate("gt_PurchaseEnchantedStaffIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseEnchantedStaffIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Adventurer Boots III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseAdventurerBootsIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingboots;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[41]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 105)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "AdventurerBootsII"))) {
                lv_holdingboots = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingboots == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "AdventurerBootsIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 105);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AECCA2A3"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0D7F2F3A"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D5150033"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3002BD11"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseAdventurerBootsIII_Init () {
    gt_PurchaseAdventurerBootsIII = TriggerCreate("gt_PurchaseAdventurerBootsIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseAdventurerBootsIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Footman Gauntlets III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseFootmanGauntletsIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdinggauntlets;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[42]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 120)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "FootmanGauntletsII"))) {
                lv_holdinggauntlets = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdinggauntlets == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "FootmanGauntletsIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 120);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7406D703"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/264E76DC"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/04AC3616"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/067D91D0"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseFootmanGauntletsIII_Init () {
    gt_PurchaseFootmanGauntletsIII = TriggerCreate("gt_PurchaseFootmanGauntletsIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseFootmanGauntletsIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Grunts Bulwark III
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseGruntsBulwarkIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingbulwark;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[43]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 200)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "GruntsBulwarkII"))) {
                lv_holdingbulwark = true;
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingbulwark == true)) {
            Wait(0.16, c_timeGame);
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "GruntsBulwarkIII");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 200);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/F2705B84"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9DAA34B3"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/544A4BEC"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B6711EC8"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseGruntsBulwarkIII_Init () {
    gt_PurchaseGruntsBulwarkIII = TriggerCreate("gt_PurchaseGruntsBulwarkIII_Func");
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseGruntsBulwarkIII, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Berserker's Mask
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseBerserkersMask_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingmask;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[44]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 160) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "BerserkersMask"))) {
                lv_holdingmask = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingmask == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "BerserkersMask");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 160);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4FC08656"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AC22541A"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C294C7E7"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6B3A0D00"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseBerserkersMask_Init () {
    gt_PurchaseBerserkersMask = TriggerCreate("gt_PurchaseBerserkersMask_Func");
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseBerserkersMask, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Wirt's Uncle's Leg
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseWirtsUnclesLeg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingleg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[45]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 75) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "WirtsUnclesLeg"))) {
                lv_holdingleg = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingleg == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "WirtsUnclesLeg");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 75);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6C493A64"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/8A36C90C"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5911D89D"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0050676B"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseWirtsUnclesLeg_Init () {
    gt_PurchaseWirtsUnclesLeg = TriggerCreate("gt_PurchaseWirtsUnclesLeg_Func");
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseWirtsUnclesLeg, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Strange Artifact
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseStrangeArtifact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingartifact;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[46]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 375) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "StrangeArtifact"))) {
                lv_holdingartifact = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingartifact == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "StrangeArtifact");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 375);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/327C0DFE"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/98DCA11E"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/D1EB75ED"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/0E399500"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseStrangeArtifact_Init () {
    gt_PurchaseStrangeArtifact = TriggerCreate("gt_PurchaseStrangeArtifact_Func");
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseStrangeArtifact, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Nagles Coin
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseNaglesCoin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_holdingcoin;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[47]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50) && (UnitInventoryCount(gv_hero[EventPlayer()], c_unitInventoryCountCarried) != 6)) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "PaglesCoin"))) {
                lv_holdingcoin = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_holdingcoin == false)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            UnitInventoryCreate(gv_hero[EventPlayer()], "PaglesCoin");
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 50);
        }
        else {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/73D79118"));
            }
            else {
                SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4EE78AA3"));
            }
        }
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/85A60BD6"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C2A33605"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseNaglesCoin_Init () {
    gt_PurchaseNaglesCoin = TriggerCreate("gt_PurchaseNaglesCoin_Func");
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseNaglesCoin, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Tome of Str
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTomeofStr_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[48]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 15)) {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        UnitBehaviorAdd(gv_hero[EventPlayer()], "TomeofStrength", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 15);
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6EE2E026"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C224819D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTomeofStr_Init () {
    gt_PurchaseTomeofStr = TriggerCreate("gt_PurchaseTomeofStr_Func");
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofStr, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Tome of Agility
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTomeofAgility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[49]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 15)) {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        UnitBehaviorAdd(gv_hero[EventPlayer()], "TomeofAgility", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 15);
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B8ED50B2"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/AD46171E"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTomeofAgility_Init () {
    gt_PurchaseTomeofAgility = TriggerCreate("gt_PurchaseTomeofAgility_Func");
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofAgility, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Tome of Int
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseTomeofInt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_itembuttons[50]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 15)) {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_PurchaseSoundPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
        UnitBehaviorAdd(gv_hero[EventPlayer()], "TomeofIntellect", gv_hero[EventPlayer()], 1);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 15);
    }
    else {
        if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/1E1F9027"));
        }
        else {
            SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6D0696F7"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseTomeofInt_Init () {
    gt_PurchaseTomeofInt = TriggerCreate("gt_PurchaseTomeofInt_Func");
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_PurchaseTomeofInt, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store - Next Page
//--------------------------------------------------------------------------------------------------
bool gt_StoreNextPage_Func (bool testConds, bool runActions) {
    int autoAA99B352_ae;
    int autoAA99B352_ai;
    int auto648E3C5F_ae;
    int auto648E3C5F_ai;
    int auto2AED8319_ae;
    int auto2AED8319_ai;
    int auto6B36540A_ae;
    int auto6B36540A_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_nextstorepage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_storeCurrentPage[EventPlayer()] == 0)) {
        gv_storeCurrentPage[EventPlayer()] = 1;
        auto2AED8319_ae = 23;
        auto2AED8319_ai = 1;
        lv_integer = 0;
        for ( ; ( (auto2AED8319_ai >= 0 && lv_integer <= auto2AED8319_ae) || (auto2AED8319_ai <= 0 && lv_integer >= auto2AED8319_ae) ) ; lv_integer += auto2AED8319_ai ) {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
        auto6B36540A_ae = 47;
        auto6B36540A_ai = 1;
        lv_integer = 24;
        for ( ; ( (auto6B36540A_ai >= 0 && lv_integer <= auto6B36540A_ae) || (auto6B36540A_ai <= 0 && lv_integer >= auto6B36540A_ae) ) ; lv_integer += auto6B36540A_ai ) {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_storeCurrentPage[EventPlayer()] = 2;
        autoAA99B352_ae = 48;
        autoAA99B352_ai = 1;
        lv_integer = 24;
        for ( ; ( (autoAA99B352_ai >= 0 && lv_integer <= autoAA99B352_ae) || (autoAA99B352_ai <= 0 && lv_integer >= autoAA99B352_ae) ) ; lv_integer += autoAA99B352_ai ) {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
        auto648E3C5F_ae = 50;
        auto648E3C5F_ai = 1;
        lv_integer = 48;
        for ( ; ( (auto648E3C5F_ai >= 0 && lv_integer <= auto648E3C5F_ae) || (auto648E3C5F_ai <= 0 && lv_integer >= auto648E3C5F_ae) ) ; lv_integer += auto648E3C5F_ai ) {
            if ((lv_integer == 47)) {
                if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                    DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                    DialogControlSetVisible(gv_itembuttons[51], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_itemimage[51], PlayerGroupSingle(EventPlayer()), true);
                }
            }
            else {
                DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreNextPage_Init () {
    gt_StoreNextPage = TriggerCreate("gt_StoreNextPage_Func");
    TriggerAddEventDialogControl(gt_StoreNextPage, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StoreNextPage, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store - Previous Page
//--------------------------------------------------------------------------------------------------
bool gt_StorePreviousPage_Func (bool testConds, bool runActions) {
    int autoBBD72112_ae;
    int autoBBD72112_ai;
    int auto58A7CFD6_ae;
    int auto58A7CFD6_ai;
    int auto9B562FB8_ae;
    int auto9B562FB8_ai;
    int autoC61EF197_ae;
    int autoC61EF197_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_previousstorepage))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_storeCurrentPage[EventPlayer()] == 2)) {
        gv_storeCurrentPage[EventPlayer()] = 1;
        auto9B562FB8_ae = 47;
        auto9B562FB8_ai = 1;
        lv_integer = 24;
        for ( ; ( (auto9B562FB8_ai >= 0 && lv_integer <= auto9B562FB8_ae) || (auto9B562FB8_ai <= 0 && lv_integer >= auto9B562FB8_ae) ) ; lv_integer += auto9B562FB8_ai ) {
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
        autoC61EF197_ae = 50;
        autoC61EF197_ai = 1;
        lv_integer = 48;
        for ( ; ( (autoC61EF197_ai >= 0 && lv_integer <= autoC61EF197_ae) || (autoC61EF197_ai <= 0 && lv_integer >= autoC61EF197_ae) ) ; lv_integer += autoC61EF197_ai ) {
            if ((lv_integer == 47)) {
                if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                    DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                    DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                    DialogControlSetVisible(gv_itembuttons[51], PlayerGroupSingle(EventPlayer()), false);
                    DialogControlSetVisible(gv_itemimage[51], PlayerGroupSingle(EventPlayer()), false);
                }
            }
            else {
                DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
        }
    }
    else {
        gv_storeCurrentPage[EventPlayer()] = 0;
        autoBBD72112_ae = 23;
        autoBBD72112_ai = 1;
        lv_integer = 0;
        for ( ; ( (autoBBD72112_ai >= 0 && lv_integer <= autoBBD72112_ae) || (autoBBD72112_ai <= 0 && lv_integer >= autoBBD72112_ae) ) ; lv_integer += autoBBD72112_ai ) {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
        auto58A7CFD6_ae = 47;
        auto58A7CFD6_ai = 1;
        lv_integer = 24;
        for ( ; ( (auto58A7CFD6_ai >= 0 && lv_integer <= auto58A7CFD6_ae) || (auto58A7CFD6_ai <= 0 && lv_integer >= auto58A7CFD6_ae) ) ; lv_integer += auto58A7CFD6_ai ) {
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorePreviousPage_Init () {
    gt_StorePreviousPage = TriggerCreate("gt_StorePreviousPage_Func");
    TriggerAddEventDialogControl(gt_StorePreviousPage, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePreviousPage, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store - Page 1
//--------------------------------------------------------------------------------------------------
bool gt_StorePage1_Func (bool testConds, bool runActions) {
    int autoA25CFDED_ae;
    int autoA25CFDED_ai;
    int autoF70F2162_ae;
    int autoF70F2162_ai;
    int autoF4A894ED_ae;
    int autoF4A894ED_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_storePage1Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA25CFDED_ae = 23;
    autoA25CFDED_ai = 1;
    lv_integer = 0;
    for ( ; ( (autoA25CFDED_ai >= 0 && lv_integer <= autoA25CFDED_ae) || (autoA25CFDED_ai <= 0 && lv_integer >= autoA25CFDED_ae) ) ; lv_integer += autoA25CFDED_ai ) {
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
    }
    autoF70F2162_ae = 47;
    autoF70F2162_ai = 1;
    lv_integer = 24;
    for ( ; ( (autoF70F2162_ai >= 0 && lv_integer <= autoF70F2162_ae) || (autoF70F2162_ai <= 0 && lv_integer >= autoF70F2162_ae) ) ; lv_integer += autoF70F2162_ai ) {
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    autoF4A894ED_ae = 50;
    autoF4A894ED_ai = 1;
    lv_integer = 48;
    for ( ; ( (autoF4A894ED_ai >= 0 && lv_integer <= autoF4A894ED_ae) || (autoF4A894ED_ai <= 0 && lv_integer >= autoF4A894ED_ae) ) ; lv_integer += autoF4A894ED_ai ) {
        if ((lv_integer == 47)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                DialogControlSetVisible(gv_itembuttons[51], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_itemimage[51], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        else {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    gv_storeCurrentPage[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorePage1_Init () {
    gt_StorePage1 = TriggerCreate("gt_StorePage1_Func");
    TriggerAddEventDialogControl(gt_StorePage1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage1, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store - Page 2
//--------------------------------------------------------------------------------------------------
bool gt_StorePage2_Func (bool testConds, bool runActions) {
    int auto48F59063_ae;
    int auto48F59063_ai;
    int auto58791796_ae;
    int auto58791796_ai;
    int auto2DAF9C03_ae;
    int auto2DAF9C03_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_storePage2Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto48F59063_ae = 23;
    auto48F59063_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto48F59063_ai >= 0 && lv_integer <= auto48F59063_ae) || (auto48F59063_ai <= 0 && lv_integer >= auto48F59063_ae) ) ; lv_integer += auto48F59063_ai ) {
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    auto58791796_ae = 47;
    auto58791796_ai = 1;
    lv_integer = 24;
    for ( ; ( (auto58791796_ai >= 0 && lv_integer <= auto58791796_ae) || (auto58791796_ai <= 0 && lv_integer >= auto58791796_ae) ) ; lv_integer += auto58791796_ai ) {
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
    }
    auto2DAF9C03_ae = 50;
    auto2DAF9C03_ai = 1;
    lv_integer = 48;
    for ( ; ( (auto2DAF9C03_ai >= 0 && lv_integer <= auto2DAF9C03_ae) || (auto2DAF9C03_ai <= 0 && lv_integer >= auto2DAF9C03_ae) ) ; lv_integer += auto2DAF9C03_ai ) {
        if ((lv_integer == 47)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                DialogControlSetVisible(gv_itembuttons[51], PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_itemimage[51], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        else {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    gv_storeCurrentPage[EventPlayer()] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorePage2_Init () {
    gt_StorePage2 = TriggerCreate("gt_StorePage2_Func");
    TriggerAddEventDialogControl(gt_StorePage2, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage2, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Store - Page 3
//--------------------------------------------------------------------------------------------------
bool gt_StorePage3_Func (bool testConds, bool runActions) {
    int auto1CEA101E_ae;
    int auto1CEA101E_ai;
    int autoCDDB399F_ae;
    int autoCDDB399F_ai;
    int auto4A48D8FB_ae;
    int auto4A48D8FB_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_storePage3Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CEA101E_ae = 23;
    auto1CEA101E_ai = 1;
    lv_integer = 0;
    for ( ; ( (auto1CEA101E_ai >= 0 && lv_integer <= auto1CEA101E_ae) || (auto1CEA101E_ai <= 0 && lv_integer >= auto1CEA101E_ae) ) ; lv_integer += auto1CEA101E_ai ) {
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    autoCDDB399F_ae = 47;
    autoCDDB399F_ai = 1;
    lv_integer = 24;
    for ( ; ( (autoCDDB399F_ai >= 0 && lv_integer <= autoCDDB399F_ae) || (autoCDDB399F_ai <= 0 && lv_integer >= autoCDDB399F_ae) ) ; lv_integer += autoCDDB399F_ai ) {
        DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), false);
    }
    auto4A48D8FB_ae = 50;
    auto4A48D8FB_ai = 1;
    lv_integer = 48;
    for ( ; ( (auto4A48D8FB_ai >= 0 && lv_integer <= auto4A48D8FB_ae) || (auto4A48D8FB_ai <= 0 && lv_integer >= auto4A48D8FB_ae) ) ; lv_integer += auto4A48D8FB_ai ) {
        if ((lv_integer == 47)) {
            if (((PlayerGroupHasPlayer(gv_p5, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p6, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p7, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_p8, EventPlayer()) == true))) {
                DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
                DialogControlSetVisible(gv_itembuttons[51], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_itemimage[51], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else {
            DialogControlSetVisible(gv_itembuttons[lv_integer], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_itemimage[lv_integer], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    gv_storeCurrentPage[EventPlayer()] = 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorePage3_Init () {
    gt_StorePage3 = TriggerCreate("gt_StorePage3_Func");
    TriggerAddEventDialogControl(gt_StorePage3, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorePage3, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Mouse Enter
//--------------------------------------------------------------------------------------------------
bool gt_DialogItemMouseEnter_Func (bool testConds, bool runActions) {
    int autoC44EBB8D_ae;
    int autoC44EBB8D_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC44EBB8D_ae = 4;
    autoC44EBB8D_ai = 1;
    lv_integer = 1;
    for ( ; ( (autoC44EBB8D_ai >= 0 && lv_integer <= autoC44EBB8D_ae) || (autoC44EBB8D_ai <= 0 && lv_integer >= autoC44EBB8D_ae) ) ; lv_integer += autoC44EBB8D_ai ) {
        if ((EventDialogControl() == gv_advancedCreateDialogButton[lv_integer].lv_btn)) {
            libNtve_gf_SetDialogItemDesaturated(gv_advancedCreateDialogButton[lv_integer].lv_img, true, PlayerGroupSingle(EventPlayer()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogItemMouseEnter_Init () {
    gt_DialogItemMouseEnter = TriggerCreate("gt_DialogItemMouseEnter_Func");
    TriggerAddEventDialogControl(gt_DialogItemMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Mouse Exit
//--------------------------------------------------------------------------------------------------
bool gt_DialogItemMouseExit_Func (bool testConds, bool runActions) {
    int auto5A3DF7A2_ae;
    int auto5A3DF7A2_ai;

    // Variable Declarations
    int lv_integer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A3DF7A2_ae = 4;
    auto5A3DF7A2_ai = 1;
    lv_integer = 1;
    for ( ; ( (auto5A3DF7A2_ai >= 0 && lv_integer <= auto5A3DF7A2_ae) || (auto5A3DF7A2_ai <= 0 && lv_integer >= auto5A3DF7A2_ae) ) ; lv_integer += auto5A3DF7A2_ai ) {
        if ((EventDialogControl() == gv_advancedCreateDialogButton[lv_integer].lv_btn)) {
            libNtve_gf_SetDialogItemDesaturated(gv_advancedCreateDialogButton[lv_integer].lv_img, false, PlayerGroupSingle(EventPlayer()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogItemMouseExit_Init () {
    gt_DialogItemMouseExit = TriggerCreate("gt_DialogItemMouseExit_Func");
    TriggerAddEventDialogControl(gt_DialogItemMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Gain
//--------------------------------------------------------------------------------------------------
bool gt_LevelGain_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(EventUnit()), "LevelUpVisual", null, null, null);
    libNtve_gf_CreateActorAtPoint("LevelUpSound", UnitGetPosition(EventUnit()));
    PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropCustom, c_playerPropOperAdd, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelGain_Init () {
    gt_LevelGain = TriggerCreate("gt_LevelGain_Func");
    TriggerAddEventUnitGainLevel(gt_LevelGain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_resurrectionmoddedtime;
    fixed lv_resurrectionbasetime;
    int lv_essenceabsorberhealthstacks;
    int lv_essenceabsorbermanastacks;

    // Variable Initialization
    lv_resurrectionbasetime = 10.0;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deaths[UnitGetOwner(EventUnit())] += 1;
    lv_resurrectionmoddedtime = (UnitXPGetCurrentLevel(EventUnit(), null) * 1.5);
    lv_resurrectionbasetime += lv_resurrectionmoddedtime;
    libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(EventUnit())], StringExternal("Param/Value/931D1D47"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_playerstatus[UnitGetOwner(EventUnit())], Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    if ((UnitHasBehavior2(EventUnit(), "VoodooSpiritDeathRecog") == true)) {
        lv_resurrectionbasetime -= 5.0;
        UnitBehaviorRemove(EventUnit(), "VoodooSpiritDeathRecog", 1);
    }

    if ((UnitHasBehavior2(EventUnit(), "DeathlyDeal") == true)) {
        if ((UnitBehaviorCount(EventUnit(), "DeathlyDeal") == 1)) {
            lv_resurrectionbasetime -= 1.0;
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "DeathlyDeal") == 2)) {
                lv_resurrectionbasetime -= 2.0;
            }
            else {
                if ((UnitBehaviorCount(EventUnit(), "DeathlyDeal") == 3)) {
                    lv_resurrectionbasetime -= 3.0;
                }
                else {
                    if ((UnitBehaviorCount(EventUnit(), "DeathlyDeal") == 4)) {
                        lv_resurrectionbasetime -= 4.0;
                    }
                    else {
                        if ((UnitBehaviorCount(EventUnit(), "DeathlyDeal") == 5)) {
                            lv_resurrectionbasetime -= 5.0;
                        }

                    }
                }
            }
        }
    }

    if ((UnitHasBehavior2(EventUnit(), "SpiritualNecklace") == true)) {
        lv_resurrectionbasetime *= 0.9;
    }

    if ((UnitHasBehavior2(EventUnit(), "EssenceAbsorberStats") == true)) {
        lv_resurrectionbasetime *= 0.8;
        lv_essenceabsorberhealthstacks = UnitBehaviorCount(EventUnit(), "EssenceAbsorberHealthStacks");
        lv_essenceabsorbermanastacks = UnitBehaviorCount(EventUnit(), "EssenceAbsorberManaStacks");
        lv_essenceabsorberhealthstacks = FixedToInt((lv_essenceabsorberhealthstacks * 0.5));
        lv_essenceabsorbermanastacks = FixedToInt((lv_essenceabsorbermanastacks * 0.5));
        UnitBehaviorRemove(EventUnit(), "EssenceAbsorberHealthStacks", lv_essenceabsorberhealthstacks);
        UnitBehaviorRemove(EventUnit(), "EssenceAbsorberManaStacks", lv_essenceabsorbermanastacks);
    }

    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_messageAreaSubtitle, (((PlayerName(EventPlayer()) + StringExternal("Param/Value/B6343375")) + UnitGetName(gv_hero[EventPlayer()])) + (StringExternal("Param/Value/40B5F1FD") + (FixedToText(lv_resurrectionbasetime, c_fixedPrecisionAny) + StringExternal("Param/Value/BCFD7D86")))));
    UnitRevive(gv_hero[EventPlayer()]);
    UnitSetState(gv_hero[EventPlayer()], c_unitStateSelectable, false);
    UnitSetState(gv_hero[EventPlayer()], c_unitStateHighlightable, false);
    libNtve_gf_MakeUnitInvulnerable(gv_hero[EventPlayer()], true);
    UnitXPGainEnable(gv_hero[EventPlayer()], null, false);
    UnitBehaviorAdd(gv_hero[EventPlayer()], "DeadHero", gv_hero[EventPlayer()], 1);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_hero[EventPlayer()]), c_animNameDefault);
    if (((UnitGetType(EventUnit()) == "Zeratul") || (UnitGetType(EventUnit()) == "VoidHerald") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "TaurenChieftan") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "PreserverC") || (UnitGetType(EventUnit()) == "DarkTemplar"))) {
        libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
        Wait(1.5, c_timeGame);
        libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Dissipate", 0, 0.0);
        Wait(1.5, c_timeGame);
    }
    else {
        if ((UnitGetType(EventUnit()) == "Probe")) {
            libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
            Wait(2.75, c_timeGame);
            libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Dissipate", 0, 0.0);
            Wait(2.5, c_timeGame);
        }
        else {
            if ((UnitGetType(EventUnit()) == "HybridReaver")) {
                libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Death", 0, 0.0);
                Wait(1.0, c_timeGame);
                libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
                UnitSetHeight(EventUnit(), 6.0, 1.0);
                Wait(1.0, c_timeGame);
            }
            else {
                if ((UnitGetType(EventUnit()) == "DeathKnight")) {
                    libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
                    Wait(1.5, c_timeGame);
                    libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Dissipate", 0, 0.0);
                    UnitSetHeight(EventUnit(), 6.0, 1.5);
                    Wait(1.0, c_timeGame);
                }
                else {
                    if (((UnitGetType(EventUnit()) == "DehakaMirrorImage") || (UnitGetType(EventUnit()) == "Stalker"))) {
                        libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Death", 0, 0.0);
                        Wait(2.5, c_timeGame);
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Dissipate", 0, 0.0);
                        Wait(1.5, c_timeGame);
                    }

                }
            }
        }
    }
    libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
    UnitSetHeight(gv_hero[EventPlayer()], 0.0, 0.0);
    UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
    UnitGroupLoopBegin(UnitGroupFilter("PreserverC", c_playerAny, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(gv_hero[EventPlayer()]), UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RedemptionRequirement", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    TimerStart(gv_resurrectionTimer[EventPlayer()], lv_resurrectionbasetime, false, c_timeGame);
    gv_resurrectionTimer[EventPlayer()] = TimerLastStarted();
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/BE33D545"), true, false);
    gv_resurrectionTimerWindow[EventPlayer()] = TimerWindowLastCreated();
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    TimerWindowSetAnchor(gv_resurrectionTimerWindow[EventPlayer()], c_anchorRight, 0, 225);
    TimerWindowShow(gv_resurrectionTimerWindow[EventPlayer()], PlayerGroupAll(), false);
    TimerWindowShow(gv_resurrectionTimerWindow[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeath_Init () {
    gt_HeroDeath = TriggerCreate("gt_HeroDeath_Func");
    TriggerAddEventUnitDied(gt_HeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Resurrection
//--------------------------------------------------------------------------------------------------
bool gt_HeroResurrection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_spawnPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventTimer() == gv_resurrectionTimer[1]) || (EventTimer() == gv_resurrectionTimer[2]) || (EventTimer() == gv_resurrectionTimer[3]) || (EventTimer() == gv_resurrectionTimer[4]) || (EventTimer() == gv_resurrectionTimer[5]) || (EventTimer() == gv_resurrectionTimer[6]) || (EventTimer() == gv_resurrectionTimer[7]) || (EventTimer() == gv_resurrectionTimer[8]) || (EventTimer() == gv_resurrectionTimer[9]) || (EventTimer() == gv_resurrectionTimer[10]) || (EventTimer() == gv_resurrectionTimer[11]) || (EventTimer() == gv_resurrectionTimer[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == gv_resurrectionTimer[1])) {
        lv_player = 1;
    }
    else {
        if ((EventTimer() == gv_resurrectionTimer[2])) {
            lv_player = 2;
        }
        else {
            if ((EventTimer() == gv_resurrectionTimer[3])) {
                lv_player = 3;
            }
            else {
                if ((EventTimer() == gv_resurrectionTimer[4])) {
                    lv_player = 4;
                }

                if ((EventTimer() == gv_resurrectionTimer[5])) {
                    lv_player = 5;
                }
                else {
                    if ((EventTimer() == gv_resurrectionTimer[6])) {
                        lv_player = 6;
                    }
                    else {
                        if ((EventTimer() == gv_resurrectionTimer[7])) {
                            lv_player = 7;
                        }
                        else {
                            if ((EventTimer() == gv_resurrectionTimer[8])) {
                                lv_player = 8;
                            }
                            else {
                                if ((EventTimer() == gv_resurrectionTimer[9])) {
                                    lv_player = 9;
                                }
                                else {
                                    if ((EventTimer() == gv_resurrectionTimer[10])) {
                                        lv_player = 10;
                                    }
                                    else {
                                        if ((EventTimer() == gv_resurrectionTimer[11])) {
                                            lv_player = 11;
                                        }
                                        else {
                                            if ((EventTimer() == gv_resurrectionTimer[12])) {
                                                lv_player = 12;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    TimerWindowDestroy(gv_resurrectionTimerWindow[lv_player]);
    libNtve_gf_MakeUnitInvulnerable(gv_hero[lv_player], false);
    UnitSetHeight(gv_hero[lv_player], 0.0, 0.0);
    UnitSetState(gv_hero[lv_player], c_unitStateSelectable, true);
    UnitSetState(gv_hero[lv_player], c_unitStateHighlightable, true);
    UnitSetPropertyFixed(gv_hero[lv_player], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[lv_player], c_unitPropEnergyPercent, 100.0);
    libNtve_gf_ShowHideUnit(gv_hero[lv_player], true);
    if ((lv_player == PlayerGroupPlayer(gv_p1, 1))) {
        lv_spawnPoint = PointFromId(5858);
    }
    else {
        if ((lv_player == PlayerGroupPlayer(gv_p2, 1))) {
            lv_spawnPoint = PointFromId(10);
        }
        else {
            if ((lv_player == PlayerGroupPlayer(gv_p3, 1))) {
                lv_spawnPoint = PointFromId(477);
            }
            else {
                if ((lv_player == PlayerGroupPlayer(gv_p4, 1))) {
                    lv_spawnPoint = PointFromId(1357);
                }
                else {
                    if ((lv_player == PlayerGroupPlayer(gv_p5, 1))) {
                        lv_spawnPoint = PointFromId(1399);
                    }
                    else {
                        if ((lv_player == PlayerGroupPlayer(gv_p6, 1))) {
                            lv_spawnPoint = PointFromId(5841);
                        }
                        else {
                            if ((lv_player == PlayerGroupPlayer(gv_p7, 1))) {
                                lv_spawnPoint = PointFromId(5842);
                            }
                            else {
                                if ((lv_player == PlayerGroupPlayer(gv_p8, 1))) {
                                    lv_spawnPoint = PointFromId(5843);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    UnitSetPosition(gv_hero[lv_player], lv_spawnPoint, false);
    UnitBehaviorRemove(gv_hero[lv_player], "DeadHero", 1);
    UnitXPGainEnable(gv_hero[lv_player], null, true);
    ActorCreate(ActorScopeFromUnit(gv_hero[lv_player]), "HeroRespawnVisual", null, null, null);
    ActorCreate(ActorScopeFromUnit(gv_hero[lv_player]), "HeroRespawnSound", null, null, null);
    UnitGroupLoopBegin(UnitGroupFilter("PreserverC", c_playerAny, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(gv_hero[lv_player]), UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "RedemptionRequirement", 1);
        }

    }
    UnitGroupLoopEnd();
    CameraPan(lv_player, UnitGetPosition(gv_hero[lv_player]), 1.0, -1, 10.0, false);
    libNtve_gf_SetDialogItemText(gv_playerstatus[lv_player], StringExternal("Param/Value/3D66EEBD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_playerstatus[lv_player], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroResurrection_Init () {
    gt_HeroResurrection = TriggerCreate("gt_HeroResurrection_Func");
    TriggerAddEventTimer(gt_HeroResurrection, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Morph 1
//--------------------------------------------------------------------------------------------------
bool gt_TreeMorph1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TreeMorphToNoRadius", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeMorph1_Init () {
    gt_TreeMorph1 = TriggerCreate("gt_TreeMorph1_Func");
    TriggerAddEventUnitBehaviorChange(gt_TreeMorph1, null, "TreeRevival2", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Morph 2
//--------------------------------------------------------------------------------------------------
bool gt_TreeMorph2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TreeMorphToRegular", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeMorph2_Init () {
    gt_TreeMorph2 = TriggerCreate("gt_TreeMorph2_Func");
    TriggerAddEventUnitBehaviorChange(gt_TreeMorph2, null, "TreeRevival22", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: remaining heroes
//--------------------------------------------------------------------------------------------------
bool gt_remainingheroes_Func (bool testConds, bool runActions) {
    int auto859FA7AB_ae;
    int auto859FA7AB_ai;
    int auto526F64EC_ae;
    int auto526F64EC_ai;
    int auto6FB09816_ae;
    int auto6FB09816_ai;

    // Variable Declarations
    int lv_newmax;
    int lv_counter;
    string[12] lv_newrandomherolist;
    int lv_newrandomherolistcounter;

    // Variable Initialization
    lv_newmax = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto859FA7AB_ae = 11;
    auto859FA7AB_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto859FA7AB_ai >= 0 && lv_counter <= auto859FA7AB_ae) || (auto859FA7AB_ai <= 0 && lv_counter >= auto859FA7AB_ae) ) ; lv_counter += auto859FA7AB_ai ) {
        if ((gv_remainingheroes[lv_counter] != "")) {
            lv_newmax += 1;
        }

    }
    gv_maxrandomhero = lv_newmax;
    lv_counter = 0;
    auto526F64EC_ae = 11;
    auto526F64EC_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto526F64EC_ai >= 0 && lv_counter <= auto526F64EC_ae) || (auto526F64EC_ai <= 0 && lv_counter >= auto526F64EC_ae) ) ; lv_counter += auto526F64EC_ai ) {
        if ((gv_remainingheroes[lv_counter] != "")) {
            lv_newrandomherolist[lv_newrandomherolistcounter] = gv_remainingheroes[lv_counter];
            lv_newrandomherolistcounter += 1;
            gv_remainingheroes[lv_counter] = "";
        }

    }
    lv_counter = 0;
    auto6FB09816_ae = 11;
    auto6FB09816_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto6FB09816_ai >= 0 && lv_counter <= auto6FB09816_ae) || (auto6FB09816_ai <= 0 && lv_counter >= auto6FB09816_ae) ) ; lv_counter += auto6FB09816_ai ) {
        gv_remainingheroes[lv_counter] = lv_newrandomherolist[lv_counter];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_remainingheroes_Init () {
    gt_remainingheroes = TriggerCreate("gt_remainingheroes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: remove chosen Hero
//--------------------------------------------------------------------------------------------------
bool gt_removechosenHero_Func (bool testConds, bool runActions) {
    int auto11D07A50_ae;
    int auto11D07A50_ai;

    // Variable Declarations
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto11D07A50_ae = 11;
    auto11D07A50_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto11D07A50_ai >= 0 && lv_counter <= auto11D07A50_ae) || (auto11D07A50_ai <= 0 && lv_counter >= auto11D07A50_ae) ) ; lv_counter += auto11D07A50_ai ) {
        if ((gv_remainingheroes[lv_counter] == gv_chosenhero)) {
            gv_remainingheroes[lv_counter] = "";
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_removechosenHero_Init () {
    gt_removechosenHero = TriggerCreate("gt_removechosenHero_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Hero
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoHero_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_hero[EventPlayer()] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroupSelected(EventPlayer()), EventPlayer(), false);
    UnitSelect(gv_hero[EventPlayer()], EventPlayer(), true);
    CameraPan(EventPlayer(), UnitGetPosition(gv_hero[EventPlayer()]), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoHero_Init () {
    gt_ReturntoHero = TriggerCreate("gt_ReturntoHero_Func");
    TriggerAddEventKeyPressed(gt_ReturntoHero, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selection Timer Post-Tip
//--------------------------------------------------------------------------------------------------
bool gt_SelectionTimerPostTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E4899545"));
    Wait(30.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EEBE99BD"));
    Wait(30.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/88F822CF"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectionTimerPostTip_Init () {
    gt_SelectionTimerPostTip = TriggerCreate("gt_SelectionTimerPostTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Select Time
//--------------------------------------------------------------------------------------------------
bool gt_EndSelectTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_selectedMode;
    int lv_int;
    int lv_randomint;

    // Variable Initialization
    lv_selectedMode = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RunSelectHero, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    DialogCreate(500, 400, c_anchorTop, 0, 25, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 400, c_anchorTop, 0, 0, (StringExternal("Param/Value/CDEAE9A3") + (FixedToText(gv_version, 2) + StringExternal("Param/Value/20DEA3E4"))), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 15.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(gt_GameTimerandCoreDialog, true, false);
    DialogSetVisible(gv_menu, PlayerGroupAll(), false);
    DialogSetVisible(gv_leftTeamPicks, PlayerGroupAll(), false);
    DialogSetVisible(gv_rightTeamPicks, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_selectionTimerWindow);
    PlayerGroupLoopBegin(gv_noHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            lv_randomint = RandomInt(0, gv_maxrandomhero);
            gv_heroTypeSelection[PlayerGroupLoopCurrent()] = gv_remainingheroes[lv_randomint];
            gv_chosenhero = gv_heroTypeSelection[PlayerGroupLoopCurrent()];
            TriggerExecute(gt_removechosenHero, true, false);
            TriggerExecute(gt_remainingheroes, true, false);
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            PlayerGroupRemove(gv_noHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_selectedHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            PlayerGroupRemove(gv_selectedHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    TimerWindowShow(gv_gameBeginsTimerWindow, PlayerGroupAll(), true);
    UnitSetState(UnitFromId(6), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(5), c_unitStateSelectable, true);
    TriggerExecute(gt_CreateScoreboard, true, false);
    TriggerExecute(gt_StorePanel, true, false);
    TriggerExecute(gt_TalentsPanel, true, false);
    TriggerExecute(gt_MinionPanel, true, false);
    TriggerExecute(gt_UIButtons, true, false);
    TriggerExecute(gt_SelectionTimerPostTip, true, false);
    TriggerExecute(gt_DefaultPage, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndSelectTime_Init () {
    gt_EndSelectTime = TriggerCreate("gt_EndSelectTime_Func");
    TriggerAddEventTimer(gt_EndSelectTime, gv_selectionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force End Select Time
//--------------------------------------------------------------------------------------------------
bool gt_ForceEndSelectTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_selectedMode;
    int lv_int;
    int lv_randomint;

    // Variable Initialization
    lv_selectedMode = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RunSelectHero, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    DialogCreate(500, 400, c_anchorTop, 0, 25, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 400, c_anchorTop, 0, 0, (StringExternal("Param/Value/7F04F85E") + (FixedToText(gv_version, 2) + StringExternal("Param/Value/36446CD7"))), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 15.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerExecute(gt_GameTimerandCoreDialog, true, false);
    DialogSetVisible(gv_menu, PlayerGroupAll(), false);
    DialogSetVisible(gv_leftTeamPicks, PlayerGroupAll(), false);
    DialogSetVisible(gv_rightTeamPicks, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_selectionTimerWindow);
    PlayerGroupLoopBegin(gv_selectedHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            if ((lv_selectedMode == 3)) {
                UnitBehaviorAdd(UnitLastCreated(), "HardcoreDeath2", UnitLastCreated(), 1);
            }
            else {
                if ((lv_selectedMode == 2)) {
                    UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay", UnitLastCreated(), 1);
                }
                else {
                    if ((lv_selectedMode == 0)) {
                        UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay2", UnitLastCreated(), 1);
                    }

                }
            }
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            PlayerGroupRemove(gv_selectedHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    TimerWindowShow(gv_gameBeginsTimerWindow, PlayerGroupAll(), true);
    UnitSetState(UnitFromId(6), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(5), c_unitStateSelectable, true);
    TriggerExecute(gt_CreateScoreboard, true, false);
    TriggerExecute(gt_StorePanel, true, false);
    TriggerExecute(gt_TalentsPanel, true, false);
    TriggerExecute(gt_MinionPanel, true, false);
    TriggerExecute(gt_UIButtons, true, false);
    TriggerExecute(gt_DefaultPage, true, false);
    TriggerExecute(gt_SelectionTimerPostTip, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceEndSelectTime_Init () {
    gt_ForceEndSelectTime = TriggerCreate("gt_ForceEndSelectTime_Func");
    TriggerEnable(gt_ForceEndSelectTime, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Select Hero
//--------------------------------------------------------------------------------------------------
bool gt_RunSelectHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_choose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_noHero, EventPlayer());
    PlayerGroupAdd(gv_selectedHero, EventPlayer());
    DialogControlSetEnabled(gv_choose, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_heroTypeSelection[EventPlayer()] == "PreserverC")) {
        gv_paladinTaken = true;
        gv_heroicon[0] = "Assets\\Textures\\Paladin-Taken.dds";
        libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnheropaladin.dds", PlayerGroupAll());
        gv_chosenhero = "PreserverC";
        TriggerExecute(gt_removechosenHero, true, true);
        TriggerExecute(gt_remainingheroes, true, true);
        libNtve_gf_SetDialogItemImage(gv_heroImage[0], gv_heroicon[0], PlayerGroupAll());
    }
    else {
        if ((gv_heroTypeSelection[EventPlayer()] == "HighTemplar")) {
            gv_farSeerTaken = true;
            gv_heroicon[5] = "Assets\\Textures\\Far-Seer-Taken.dds";
            libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherofarseer.dds", PlayerGroupAll());
            gv_chosenhero = "HighTemplar";
            TriggerExecute(gt_removechosenHero, true, true);
            TriggerExecute(gt_remainingheroes, true, true);
            libNtve_gf_SetDialogItemImage(gv_heroImage[5], gv_heroicon[5], PlayerGroupAll());
        }
        else {
            if ((gv_heroTypeSelection[EventPlayer()] == "VoidHerald")) {
                gv_bloodMTaken = true;
                gv_heroicon[8] = "Assets\\Textures\\Bloodmage-Taken.dds";
                libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherobloodelfprince.dds", PlayerGroupAll());
                gv_chosenhero = "VoidHerald";
                TriggerExecute(gt_removechosenHero, true, true);
                TriggerExecute(gt_remainingheroes, true, true);
                libNtve_gf_SetDialogItemImage(gv_heroImage[8], gv_heroicon[8], PlayerGroupAll());
            }
            else {
                if ((gv_heroTypeSelection[EventPlayer()] == "DeathKnight")) {
                    gv_dKTaken = true;
                    gv_heroicon[6] = "Assets\\Textures\\Death-Knight-Taken.dds";
                    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherodeathknight.dds", PlayerGroupAll());
                    gv_chosenhero = "DeathKnight";
                    TriggerExecute(gt_removechosenHero, true, true);
                    TriggerExecute(gt_remainingheroes, true, true);
                    libNtve_gf_SetDialogItemImage(gv_heroImage[6], gv_heroicon[6], PlayerGroupAll());
                }
                else {
                    if ((gv_heroTypeSelection[EventPlayer()] == "Stalker")) {
                        gv_sHTaken = true;
                        gv_heroicon[10] = "Assets\\Textures\\Shadow-Hunter-Taken.dds";
                        libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnshadowhunter.dds", PlayerGroupAll());
                        gv_chosenhero = "Stalker";
                        TriggerExecute(gt_removechosenHero, true, true);
                        TriggerExecute(gt_remainingheroes, true, true);
                        libNtve_gf_SetDialogItemImage(gv_heroImage[10], gv_heroicon[10], PlayerGroupAll());
                    }
                    else {
                        if ((gv_heroTypeSelection[EventPlayer()] == "HybridReaver")) {
                            gv_bMTaken = true;
                            gv_heroicon[4] = "Assets\\Textures\\Beastmaster-Taken.dds";
                            libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnbeastmaster.dds", PlayerGroupAll());
                            gv_chosenhero = "HybridReaver";
                            TriggerExecute(gt_removechosenHero, true, true);
                            TriggerExecute(gt_remainingheroes, true, true);
                            libNtve_gf_SetDialogItemImage(gv_heroImage[4], gv_heroicon[4], PlayerGroupAll());
                        }
                        else {
                            if ((gv_heroTypeSelection[EventPlayer()] == "Zeratul")) {
                                gv_bladeMTaken = true;
                                gv_heroicon[7] = "Assets\\Textures\\Blademaster-Taken.dds";
                                libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnheroblademaster.dds", PlayerGroupAll());
                                gv_chosenhero = "Zeratul";
                                TriggerExecute(gt_removechosenHero, true, true);
                                TriggerExecute(gt_remainingheroes, true, true);
                                libNtve_gf_SetDialogItemImage(gv_heroImage[7], gv_heroicon[7], PlayerGroupAll());
                            }
                            else {
                                if ((gv_heroTypeSelection[EventPlayer()] == "Zealot")) {
                                    gv_dHTaken = true;
                                    gv_heroicon[1] = "Assets\\Textures\\Demon-Hunter-Taken.dds";
                                    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherodemonhunter.dds", PlayerGroupAll());
                                    gv_chosenhero = "Zealot";
                                    TriggerExecute(gt_removechosenHero, true, true);
                                    TriggerExecute(gt_remainingheroes, true, true);
                                    libNtve_gf_SetDialogItemImage(gv_heroImage[1], gv_heroicon[1], PlayerGroupAll());
                                }
                                else {
                                    if ((gv_heroTypeSelection[EventPlayer()] == "DehakaMirrorImage")) {
                                        gv_mKTaken = true;
                                        gv_heroicon[2] = "Assets\\Textures\\Mountain-King-Taken.dds";
                                        libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnheromountainking.dds", PlayerGroupAll());
                                        gv_chosenhero = "DehakaMirrorImage";
                                        TriggerExecute(gt_removechosenHero, true, true);
                                        TriggerExecute(gt_remainingheroes, true, true);
                                        libNtve_gf_SetDialogItemImage(gv_heroImage[2], gv_heroicon[2], PlayerGroupAll());
                                    }
                                    else {
                                        if ((gv_heroTypeSelection[EventPlayer()] == "Probe")) {
                                            gv_kotGTaken = true;
                                            gv_heroicon[3] = "Assets\\Textures\\KotG-Taken.dds";
                                            libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnkeeperofthegrove.dds", PlayerGroupAll());
                                            gv_chosenhero = "Probe";
                                            TriggerExecute(gt_removechosenHero, true, true);
                                            TriggerExecute(gt_remainingheroes, true, true);
                                            libNtve_gf_SetDialogItemImage(gv_heroImage[3], gv_heroicon[3], PlayerGroupAll());
                                        }
                                        else {
                                            if ((gv_heroTypeSelection[EventPlayer()] == "DarkTemplar")) {
                                                gv_dLTaken = true;
                                                gv_heroicon[11] = "Assets\\Textures\\Dreadlord-Taken.dds";
                                                libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherodreadlord.dds", PlayerGroupAll());
                                                gv_chosenhero = "DarkTemplar";
                                                TriggerExecute(gt_removechosenHero, true, true);
                                                TriggerExecute(gt_remainingheroes, true, true);
                                                libNtve_gf_SetDialogItemImage(gv_heroImage[11], gv_heroicon[11], PlayerGroupAll());
                                            }
                                            else {
                                                if ((gv_heroTypeSelection[EventPlayer()] == "TaurenChieftan")) {
                                                    gv_tCTaken = true;
                                                    gv_heroicon[9] = "Assets\\Textures\\Tauren-Chieftain-Taken.dds";
                                                    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\war3_btnherotaurenchieftain.dds", PlayerGroupAll());
                                                    gv_chosenhero = "TaurenChieftan";
                                                    TriggerExecute(gt_removechosenHero, true, true);
                                                    TriggerExecute(gt_remainingheroes, true, true);
                                                    libNtve_gf_SetDialogItemImage(gv_heroImage[9], gv_heroicon[9], PlayerGroupAll());
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((EventPlayer() == PlayerGroupPlayer(gv_p1, 1))) {
        lv_spawnPoint = PointFromId(5858);
    }
    else {
        if ((EventPlayer() == PlayerGroupPlayer(gv_p2, 1))) {
            lv_spawnPoint = PointFromId(10);
        }
        else {
            if ((EventPlayer() == PlayerGroupPlayer(gv_p3, 1))) {
                lv_spawnPoint = PointFromId(477);
            }
            else {
                if ((EventPlayer() == PlayerGroupPlayer(gv_p4, 1))) {
                    lv_spawnPoint = PointFromId(1357);
                }
                else {
                    if ((EventPlayer() == PlayerGroupPlayer(gv_p5, 1))) {
                        lv_spawnPoint = PointFromId(1399);
                    }
                    else {
                        if ((EventPlayer() == PlayerGroupPlayer(gv_p6, 1))) {
                            lv_spawnPoint = PointFromId(5841);
                        }
                        else {
                            if ((EventPlayer() == PlayerGroupPlayer(gv_p7, 1))) {
                                lv_spawnPoint = PointFromId(5842);
                            }
                            else {
                                if ((EventPlayer() == PlayerGroupPlayer(gv_p8, 1))) {
                                    lv_spawnPoint = PointFromId(5843);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    if ((PlayerGroupCount(gv_selectedHero) == PlayerGroupCount(PlayerGroupActive()))) {
        TriggerEnable(gt_EndSelectTime, false);
        TriggerEnable(gt_ForceEndSelectTime, true);
        TriggerExecute(gt_ForceEndSelectTime, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunSelectHero_Init () {
    gt_RunSelectHero = TriggerCreate("gt_RunSelectHero_Func");
    TriggerAddEventDialogControl(gt_RunSelectHero, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Paladin
//--------------------------------------------------------------------------------------------------
bool gt_ChoosePaladin_Func (bool testConds, bool runActions) {
    int auto4C64E2D3_ae;
    int auto4C64E2D3_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Paladin-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Paladin-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("Karass_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_paladinTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "PreserverC";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E88E2111"));
        }

    }
    auto4C64E2D3_ae = gv_heroinfoamount;
    auto4C64E2D3_ai = 1;
    lv_start = 0;
    for ( ; ( (auto4C64E2D3_ai >= 0 && lv_start <= auto4C64E2D3_ae) || (auto4C64E2D3_ai <= 0 && lv_start >= auto4C64E2D3_ae) ) ; lv_start += auto4C64E2D3_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChoosePaladin_Init () {
    gt_ChoosePaladin = TriggerCreate("gt_ChoosePaladin_Func");
    TriggerAddEventDialogControl(gt_ChoosePaladin, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChoosePaladin, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Demon Hunter
//--------------------------------------------------------------------------------------------------
bool gt_ChooseDemonHunter_Func (bool testConds, bool runActions) {
    int auto8AA2AB89_ae;
    int auto8AA2AB89_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Demon-Hunter-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Demon-Hunter-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("Zealot_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_dHTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "Zealot";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3B5CABFE"));
        }

    }
    auto8AA2AB89_ae = gv_heroinfoamount;
    auto8AA2AB89_ai = 1;
    lv_start = 0;
    for ( ; ( (auto8AA2AB89_ai >= 0 && lv_start <= auto8AA2AB89_ae) || (auto8AA2AB89_ai <= 0 && lv_start >= auto8AA2AB89_ae) ) ; lv_start += auto8AA2AB89_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseDemonHunter_Init () {
    gt_ChooseDemonHunter = TriggerCreate("gt_ChooseDemonHunter_Func");
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDemonHunter, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Mountain King
//--------------------------------------------------------------------------------------------------
bool gt_ChooseMountainKing_Func (bool testConds, bool runActions) {
    int auto7EFDE3AF_ae;
    int auto7EFDE3AF_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Mountain-King-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Mountain-King-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("MountainKing_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_mKTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "DehakaMirrorImage";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/43487A07"));
        }

    }
    auto7EFDE3AF_ae = gv_heroinfoamount;
    auto7EFDE3AF_ai = 1;
    lv_start = 0;
    for ( ; ( (auto7EFDE3AF_ai >= 0 && lv_start <= auto7EFDE3AF_ae) || (auto7EFDE3AF_ai <= 0 && lv_start >= auto7EFDE3AF_ae) ) ; lv_start += auto7EFDE3AF_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseMountainKing_Init () {
    gt_ChooseMountainKing = TriggerCreate("gt_ChooseMountainKing_Func");
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseMountainKing, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose KotG
//--------------------------------------------------------------------------------------------------
bool gt_ChooseKotG_Func (bool testConds, bool runActions) {
    int auto2E5D0ED7_ae;
    int auto2E5D0ED7_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\KotG-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\KotG-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("KOTG_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_kotGTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "Probe";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/7E7FE333"));
        }

    }
    auto2E5D0ED7_ae = gv_heroinfoamount;
    auto2E5D0ED7_ai = 1;
    lv_start = 0;
    for ( ; ( (auto2E5D0ED7_ai >= 0 && lv_start <= auto2E5D0ED7_ae) || (auto2E5D0ED7_ai <= 0 && lv_start >= auto2E5D0ED7_ae) ) ; lv_start += auto2E5D0ED7_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseKotG_Init () {
    gt_ChooseKotG = TriggerCreate("gt_ChooseKotG_Func");
    TriggerAddEventDialogControl(gt_ChooseKotG, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseKotG, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Beast Master
//--------------------------------------------------------------------------------------------------
bool gt_ChooseBeastMaster_Func (bool testConds, bool runActions) {
    int auto5E8849F4_ae;
    int auto5E8849F4_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Beastmaster-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Beastmaster-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("BeastMaster_Selection", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_bMTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "HybridReaver";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EE0DA574"));
        }

    }
    auto5E8849F4_ae = gv_heroinfoamount;
    auto5E8849F4_ai = 1;
    lv_start = 0;
    for ( ; ( (auto5E8849F4_ai >= 0 && lv_start <= auto5E8849F4_ae) || (auto5E8849F4_ai <= 0 && lv_start >= auto5E8849F4_ae) ) ; lv_start += auto5E8849F4_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseBeastMaster_Init () {
    gt_ChooseBeastMaster = TriggerCreate("gt_ChooseBeastMaster_Func");
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastMaster, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Far Seer
//--------------------------------------------------------------------------------------------------
bool gt_ChooseFarSeer_Func (bool testConds, bool runActions) {
    int auto045E5945_ae;
    int auto045E5945_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Far-Seer-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Far-Seer-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("HighTemplar_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_farSeerTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "HighTemplar";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/6A5982E5"));
        }

    }
    auto045E5945_ae = gv_heroinfoamount;
    auto045E5945_ai = 1;
    lv_start = 0;
    for ( ; ( (auto045E5945_ai >= 0 && lv_start <= auto045E5945_ae) || (auto045E5945_ai <= 0 && lv_start >= auto045E5945_ae) ) ; lv_start += auto045E5945_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseFarSeer_Init () {
    gt_ChooseFarSeer = TriggerCreate("gt_ChooseFarSeer_Func");
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseFarSeer, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Deathknight
//--------------------------------------------------------------------------------------------------
bool gt_ChooseDeathknight_Func (bool testConds, bool runActions) {
    int auto33FD2308_ae;
    int auto33FD2308_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Death-Knight-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Death-Knight-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("DarkTemplar_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_dKTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "DeathKnight";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/5AA224EC"));
        }

    }
    auto33FD2308_ae = gv_heroinfoamount;
    auto33FD2308_ai = 1;
    lv_start = 0;
    for ( ; ( (auto33FD2308_ai >= 0 && lv_start <= auto33FD2308_ae) || (auto33FD2308_ai <= 0 && lv_start >= auto33FD2308_ae) ) ; lv_start += auto33FD2308_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseDeathknight_Init () {
    gt_ChooseDeathknight = TriggerCreate("gt_ChooseDeathknight_Func");
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDeathknight, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Blademaster
//--------------------------------------------------------------------------------------------------
bool gt_ChooseBlademaster_Func (bool testConds, bool runActions) {
    int auto3CB54F78_ae;
    int auto3CB54F78_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[7]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Blademaster-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Blademaster-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("Zeratul_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_bladeMTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "Zeratul";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/C3B63C4F"));
        }

    }
    auto3CB54F78_ae = gv_heroinfoamount;
    auto3CB54F78_ai = 1;
    lv_start = 0;
    for ( ; ( (auto3CB54F78_ai >= 0 && lv_start <= auto3CB54F78_ae) || (auto3CB54F78_ai <= 0 && lv_start >= auto3CB54F78_ae) ) ; lv_start += auto3CB54F78_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseBlademaster_Init () {
    gt_ChooseBlademaster = TriggerCreate("gt_ChooseBlademaster_Func");
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBlademaster, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Bloodmage
//--------------------------------------------------------------------------------------------------
bool gt_ChooseBloodmage_Func (bool testConds, bool runActions) {
    int autoCB9DFF65_ae;
    int autoCB9DFF65_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[8]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Bloodmage-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Bloodmage-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("BloodMage_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_bloodMTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "VoidHerald";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3BDCBB9F"));
        }

    }
    autoCB9DFF65_ae = gv_heroinfoamount;
    autoCB9DFF65_ai = 1;
    lv_start = 0;
    for ( ; ( (autoCB9DFF65_ai >= 0 && lv_start <= autoCB9DFF65_ae) || (autoCB9DFF65_ai <= 0 && lv_start >= autoCB9DFF65_ae) ) ; lv_start += autoCB9DFF65_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseBloodmage_Init () {
    gt_ChooseBloodmage = TriggerCreate("gt_ChooseBloodmage_Func");
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBloodmage, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Tauren Chieftain
//--------------------------------------------------------------------------------------------------
bool gt_ChooseTaurenChieftain_Func (bool testConds, bool runActions) {
    int autoD4D0C09E_ae;
    int autoD4D0C09E_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[9]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Tauren-Chieftain-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Tauren-Chieftain-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("Urun_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_tCTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "TaurenChieftan";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E1F86672"));
        }

    }
    autoD4D0C09E_ae = gv_heroinfoamount;
    autoD4D0C09E_ai = 1;
    lv_start = 0;
    for ( ; ( (autoD4D0C09E_ai >= 0 && lv_start <= autoD4D0C09E_ae) || (autoD4D0C09E_ai <= 0 && lv_start >= autoD4D0C09E_ae) ) ; lv_start += autoD4D0C09E_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseTaurenChieftain_Init () {
    gt_ChooseTaurenChieftain = TriggerCreate("gt_ChooseTaurenChieftain_Func");
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTaurenChieftain, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Shadow Hunter
//--------------------------------------------------------------------------------------------------
bool gt_ChooseShadowHunter_Func (bool testConds, bool runActions) {
    int autoA6EFFA31_ae;
    int autoA6EFFA31_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[10]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Shadow-Hunter-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Shadow-Hunter-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("Stalker_Ready", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_sHTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "Stalker";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/EB380304"));
        }

    }
    autoA6EFFA31_ae = gv_heroinfoamount;
    autoA6EFFA31_ai = 1;
    lv_start = 0;
    for ( ; ( (autoA6EFFA31_ai >= 0 && lv_start <= autoA6EFFA31_ae) || (autoA6EFFA31_ai <= 0 && lv_start >= autoA6EFFA31_ae) ) ; lv_start += autoA6EFFA31_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseShadowHunter_Init () {
    gt_ChooseShadowHunter = TriggerCreate("gt_ChooseShadowHunter_Func");
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseShadowHunter, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Dreadlord
//--------------------------------------------------------------------------------------------------
bool gt_ChooseDreadlord_Func (bool testConds, bool runActions) {
    int auto8F550DF3_ae;
    int auto8F550DF3_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[11]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Dreadlord-Taken.dds", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_teamPickImage[EventPlayer()], "Assets\\Textures\\Dreadlord-Taken.dds", PlayerGroupSingle(EventPlayer()));
    SoundPlayForPlayer(SoundLink("DreadLord_Select", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_dLTaken == false)) {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            gv_heroTypeSelection[EventPlayer()] = "DarkTemplar";
        }

    }
    else {
        if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A1518C4F"));
        }

    }
    auto8F550DF3_ae = gv_heroinfoamount;
    auto8F550DF3_ai = 1;
    lv_start = 0;
    for ( ; ( (auto8F550DF3_ai >= 0 && lv_start <= auto8F550DF3_ae) || (auto8F550DF3_ai <= 0 && lv_start >= auto8F550DF3_ae) ) ; lv_start += auto8F550DF3_ai ) {
        DialogControlSetVisible(gv_heroInfo[0][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[1][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[2][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[3][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[4][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[5][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[6][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[7][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[8][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[9][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[10][lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_heroInfo[11][lv_start], PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseDreadlord_Init () {
    gt_ChooseDreadlord = TriggerCreate("gt_ChooseDreadlord_Func");
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseDreadlord, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fall Back Hide Info
//--------------------------------------------------------------------------------------------------
bool gt_FallBackHideInfo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_menu, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_menu, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FallBackHideInfo_Init () {
    gt_FallBackHideInfo = TriggerCreate("gt_FallBackHideInfo_Func");
    TriggerAddEventTimeElapsed(gt_FallBackHideInfo, 121.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wasted
//--------------------------------------------------------------------------------------------------
bool gt_Wasted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Wasted", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wasted_Init () {
    gt_Wasted = TriggerCreate("gt_Wasted_Func");
    TriggerAddEventChatMessage(gt_Wasted, c_playerAny, "!wasted", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talkshow
//--------------------------------------------------------------------------------------------------
bool gt_Talkshow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Wasted2", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 120.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Talkshow_Init () {
    gt_Talkshow = TriggerCreate("gt_Talkshow_Func");
    TriggerAddEventChatMessage(gt_Talkshow, c_playerAny, "!talkshow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dog
//--------------------------------------------------------------------------------------------------
bool gt_Dog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Doe2", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dog_Init () {
    gt_Dog = TriggerCreate("gt_Dog_Func");
    TriggerAddEventChatMessage(gt_Dog, c_playerAny, "!dog", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light
//--------------------------------------------------------------------------------------------------
bool gt_Light_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Doe", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Light_Init () {
    gt_Light = TriggerCreate("gt_Light_Func");
    TriggerAddEventChatMessage(gt_Light, c_playerAny, "!light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intervention
//--------------------------------------------------------------------------------------------------
bool gt_Intervention_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Doe3", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Intervention_Init () {
    gt_Intervention = TriggerCreate("gt_Intervention_Func");
    TriggerAddEventChatMessage(gt_Intervention, c_playerAny, "!intervention", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fart
//--------------------------------------------------------------------------------------------------
bool gt_Fart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Doe32", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fart_Init () {
    gt_Fart = TriggerCreate("gt_Fart_Func");
    TriggerAddEventChatMessage(gt_Fart, c_playerAny, "!fart", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Love
//--------------------------------------------------------------------------------------------------
bool gt_Love_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_tauntTimer) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("TeamTaunt_Doe322", -1), c_maxPlayers, PlayerGroupAll(), 500.0, 0.0);
    TimerStart(gv_tauntTimer, 60.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Love_Init () {
    gt_Love = TriggerCreate("gt_Love_Func");
    TriggerAddEventChatMessage(gt_Love, c_playerAny, "!love", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: sell item
//--------------------------------------------------------------------------------------------------
bool gt_sellitem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackcount;
    int lv_itemsmaxcharge;
    string lv_chargelink;
    int lv_pawnvalue;

    // Variable Initialization
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SellItem", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 500.0, 0.0);
    lv_pawnvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitInventoryItem()), "CostResource[" + IntToString(0) + "]", c_playerAny);
    lv_pawnvalue = (lv_pawnvalue / 2);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, lv_pawnvalue);
    TextTagCreate((StringExternal("Param/Value/5E5DC6EA") + (IntToText(lv_pawnvalue) + StringExternal("Param/Value/171AE1DF"))), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
    UnitRemove(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_sellitem_Init () {
    gt_sellitem = TriggerCreate("gt_sellitem_Func");
    TriggerAddEventUnitInventoryChange(gt_sellitem, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_sellitem, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Timer and Core Dialog
//--------------------------------------------------------------------------------------------------
bool gt_GameTimerandCoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_gameBeginsTimer, gv_gameBeginsTimerTotal, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/641ADC42"), true, false);
    gv_gameBeginsTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    TimerWindowSetAnchor(gv_gameBeginsTimerWindow, c_anchorTopLeft, 0, -25);
    DialogCreate(300, 84, c_anchorTop, -165, 5, true);
    gv_team1CoreDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team1CoreDialog, 300, 84, c_anchorCenter, 0, 0, StringToText(""), "Assets\\core\\core-100.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_team1CoreImage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team1CoreDialog, 160, 50, c_anchorBottom, 0, -12, StringExternal("Param/Value/44401EEE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team1CoreLife = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team1CoreDialog, 160, 50, c_anchorTop, 0, 5, StringExternal("Param/Value/BC59B813"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(300, 84, c_anchorTop, 165, 5, true);
    gv_team1Core2Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team1Core2Dialog, 300, 84, c_anchorCenter, 0, 0, StringToText(""), "Assets\\core\\core-100.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_team1Core2Image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team1Core2Dialog, 160, 50, c_anchorBottom, 0, -12, StringExternal("Param/Value/3D4E100A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team1Core2Life = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team1Core2Dialog, 160, 50, c_anchorTop, 0, 5, StringExternal("Param/Value/458CC6A1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_team1CoreDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        DialogSetVisible(gv_team1Core2Dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    DialogCreate(300, 84, c_anchorTop, -165, 5, true);
    gv_team2CoreDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team2CoreDialog, 300, 84, c_anchorCenter, 0, 0, StringToText(""), "Assets\\core\\core-100.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_team2CoreImage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team2CoreDialog, 160, 50, c_anchorBottom, 0, -12, StringExternal("Param/Value/152CB565"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team2CoreLife = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team2CoreDialog, 160, 50, c_anchorTop, 0, 15, StringExternal("Param/Value/24FE2935"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(300, 84, c_anchorTop, 165, 5, true);
    gv_team2Core1Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_team2Core1Dialog, 300, 84, c_anchorCenter, 0, 0, StringToText(""), "Assets\\core\\core-100.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_team2Core1Image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team2Core1Dialog, 160, 50, c_anchorBottom, 0, -12, StringExternal("Param/Value/8672CA67"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team2Core1Life = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team2Core1Dialog, 160, 50, c_anchorTop, 0, 15, StringExternal("Param/Value/D456AC5A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_team2CoreDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        DialogSetVisible(gv_team2Core1Dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameTimerandCoreDialog_Init () {
    gt_GameTimerandCoreDialog = TriggerCreate("gt_GameTimerandCoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dialog Update [Team 1]
//--------------------------------------------------------------------------------------------------
bool gt_CoreDialogUpdateTeam1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 10000.0)) {
        libNtve_gf_SetDialogItemText(gv_team1CoreLife, (IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/13C6CABA")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team2Core1Life, (IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/79809699")), PlayerGroupAll());
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 10000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 1000.0)) {
            libNtve_gf_SetDialogItemText(gv_team1CoreLife, ((StringExternal("Param/Value/FAF0A4CA") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/D9B4B4ED")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_team2Core1Life, ((StringExternal("Param/Value/43815220") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/1548FDF5")), PlayerGroupAll());
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 1000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 100.0)) {
                libNtve_gf_SetDialogItemText(gv_team1CoreLife, ((StringExternal("Param/Value/C249FB8F") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/56813B41")), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_team2Core1Life, ((StringExternal("Param/Value/89EC09E3") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/A1AE24D6")), PlayerGroupAll());
            }
            else {
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 10.0)) {
                    libNtve_gf_SetDialogItemText(gv_team1CoreLife, ((StringExternal("Param/Value/DC3608F8") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/23D25B4A")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_team2Core1Life, ((StringExternal("Param/Value/6AD79D9D") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/37D13145")), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_team1CoreLife, ((StringExternal("Param/Value/BC84F62E") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/790B6736")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_team2Core1Life, ((StringExternal("Param/Value/E8FDA1D9") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/63BD6B24")), PlayerGroupAll());
                }
            }
        }
    }
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        gv_newCoreImage = "Assets\\core\\core-100.dds";
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 95.0)) {
            gv_newCoreImage = "Assets\\core\\core-95.dds";
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 95.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 90.0)) {
                gv_newCoreImage = "Assets\\core\\core-90.dds";
            }
            else {
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 90.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 85.0)) {
                    gv_newCoreImage = "Assets\\core\\core-85.dds";
                }
                else {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 85.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 80.0)) {
                        gv_newCoreImage = "Assets\\core\\core-80.dds";
                    }
                    else {
                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 80.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 75.0)) {
                            gv_newCoreImage = "Assets\\core\\core-75.dds";
                        }
                        else {
                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 70.0)) {
                                gv_newCoreImage = "Assets\\core\\core-70.dds";
                            }
                            else {
                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 70.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 65.0)) {
                                    gv_newCoreImage = "Assets\\core\\core-65.dds";
                                }
                                else {
                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 65.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 60.0)) {
                                        gv_newCoreImage = "Assets\\core\\core-60.dds";
                                    }
                                    else {
                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 60.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 55.0)) {
                                            gv_newCoreImage = "Assets\\core\\core-55.dds";
                                        }
                                        else {
                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 55.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 50.0)) {
                                                gv_newCoreImage = "Assets\\core\\core-50.dds";
                                            }
                                            else {
                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 50.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 45.0)) {
                                                    gv_newCoreImage = "Assets\\core\\core-45.dds";
                                                }
                                                else {
                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 45.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 40.0)) {
                                                        gv_newCoreImage = "Assets\\core\\core-40.dds";
                                                    }
                                                    else {
                                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 40.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 35.0)) {
                                                            gv_newCoreImage = "Assets\\core\\core-35.dds";
                                                        }
                                                        else {
                                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 35.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 30.0)) {
                                                                gv_newCoreImage = "Assets\\core\\core-30.dds";
                                                            }
                                                            else {
                                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 30.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 25.0)) {
                                                                    gv_newCoreImage = "Assets\\core\\core-25.dds";
                                                                }
                                                                else {
                                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 25.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 20.0)) {
                                                                        gv_newCoreImage = "Assets\\core\\core-20.dds";
                                                                    }
                                                                    else {
                                                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 20.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 15.0)) {
                                                                            gv_newCoreImage = "Assets\\core\\core-15.dds";
                                                                        }
                                                                        else {
                                                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 15.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 10.0)) {
                                                                                gv_newCoreImage = "Assets\\core\\core-10.dds";
                                                                            }
                                                                            else {
                                                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 10.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 5.0)) {
                                                                                    gv_newCoreImage = "Assets\\core\\core-5.dds";
                                                                                }
                                                                                else {
                                                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 5.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 0.0)) {
                                                                                        gv_newCoreImage = "Assets\\core\\core-fatal.dds";
                                                                                    }

                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    libNtve_gf_SetDialogItemImage(gv_team1CoreImage, gv_newCoreImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_team2Core1Image, gv_newCoreImage, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreDialogUpdateTeam1_Init () {
    gt_CoreDialogUpdateTeam1 = TriggerCreate("gt_CoreDialogUpdateTeam1_Func");
    TriggerAddEventUnitProperty(gt_CoreDialogUpdateTeam1, UnitRefFromUnit(UnitFromId(5)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dialog Update [Team 2]
//--------------------------------------------------------------------------------------------------
bool gt_CoreDialogUpdateTeam2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) == 10000.0)) {
        libNtve_gf_SetDialogItemText(gv_team2CoreLife, (IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/BB9FB5E3")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team1Core2Life, (IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/6D75186A")), PlayerGroupAll());
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 10000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 1000.0)) {
            libNtve_gf_SetDialogItemText(gv_team2CoreLife, ((StringExternal("Param/Value/4E6B4309") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/65D86575")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_team1Core2Life, ((StringExternal("Param/Value/2E8759BC") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/8CA4323F")), PlayerGroupAll());
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 1000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 100.0)) {
                libNtve_gf_SetDialogItemText(gv_team2CoreLife, ((StringExternal("Param/Value/0651ECA2") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/5E32FADA")), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_team1Core2Life, ((StringExternal("Param/Value/7A91C122") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/EB30A4DB")), PlayerGroupAll());
            }
            else {
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 10.0)) {
                    libNtve_gf_SetDialogItemText(gv_team2CoreLife, ((StringExternal("Param/Value/ED6B2CF1") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/6CB7D806")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_team1Core2Life, ((StringExternal("Param/Value/8F93CE84") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/313BCAA4")), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_team2CoreLife, ((StringExternal("Param/Value/84EBB60F") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/8E5494E3")), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_team1Core2Life, ((StringExternal("Param/Value/5537E273") + IntToText(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)))) + StringExternal("Param/Value/B8D83AFD")), PlayerGroupAll());
                }
            }
        }
    }
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
        gv_newCoreImage = "Assets\\core\\core-100.dds";
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 95.0)) {
            gv_newCoreImage = "Assets\\core\\core-95.dds";
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 95.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 90.0)) {
                gv_newCoreImage = "Assets\\core\\core-90.dds";
            }
            else {
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 90.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 85.0)) {
                    gv_newCoreImage = "Assets\\core\\core-85.dds";
                }
                else {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 85.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 80.0)) {
                        gv_newCoreImage = "Assets\\core\\core-80.dds";
                    }
                    else {
                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 80.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 75.0)) {
                            gv_newCoreImage = "Assets\\core\\core-75.dds";
                        }
                        else {
                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 70.0)) {
                                gv_newCoreImage = "Assets\\core\\core-70.dds";
                            }
                            else {
                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 70.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 65.0)) {
                                    gv_newCoreImage = "Assets\\core\\core-65.dds";
                                }
                                else {
                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 65.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 60.0)) {
                                        gv_newCoreImage = "Assets\\core\\core-60.dds";
                                    }
                                    else {
                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 60.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 55.0)) {
                                            gv_newCoreImage = "Assets\\core\\core-55.dds";
                                        }
                                        else {
                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 55.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 50.0)) {
                                                gv_newCoreImage = "Assets\\core\\core-50.dds";
                                            }
                                            else {
                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 50.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 45.0)) {
                                                    gv_newCoreImage = "Assets\\core\\core-45.dds";
                                                }
                                                else {
                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 45.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 40.0)) {
                                                        gv_newCoreImage = "Assets\\core\\core-40.dds";
                                                    }
                                                    else {
                                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 40.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 35.0)) {
                                                            gv_newCoreImage = "Assets\\core\\core-35.dds";
                                                        }
                                                        else {
                                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 35.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 30.0)) {
                                                                gv_newCoreImage = "Assets\\core\\core-30.dds";
                                                            }
                                                            else {
                                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 30.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 25.0)) {
                                                                    gv_newCoreImage = "Assets\\core\\core-25.dds";
                                                                }
                                                                else {
                                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 25.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 20.0)) {
                                                                        gv_newCoreImage = "Assets\\core\\core-20.dds";
                                                                    }
                                                                    else {
                                                                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 20.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 15.0)) {
                                                                            gv_newCoreImage = "Assets\\core\\core-15.dds";
                                                                        }
                                                                        else {
                                                                            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 15.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 10.0)) {
                                                                                gv_newCoreImage = "Assets\\core\\core-10.dds";
                                                                            }
                                                                            else {
                                                                                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 10.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 5.0)) {
                                                                                    gv_newCoreImage = "Assets\\core\\core-5.dds";
                                                                                }
                                                                                else {
                                                                                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 5.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 0.0)) {
                                                                                        gv_newCoreImage = "Assets\\core\\core-fatal.dds";
                                                                                    }

                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    libNtve_gf_SetDialogItemImage(gv_team2CoreImage, gv_newCoreImage, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_team1Core2Image, gv_newCoreImage, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CoreDialogUpdateTeam2_Init () {
    gt_CoreDialogUpdateTeam2 = TriggerCreate("gt_CoreDialogUpdateTeam2_Func");
    TriggerAddEventUnitProperty(gt_CoreDialogUpdateTeam2, UnitRefFromUnit(UnitFromId(6)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Begins
//--------------------------------------------------------------------------------------------------
bool gt_GameBegins_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5246B916"));
    TimerWindowDestroy(gv_gameBeginsTimerWindow);
    SoundPlayForPlayer(SoundLink("GameBegin", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_SpawnTimer, true, false);
    TriggerEnable(gt_ScaleGruntsFooties, true);
    gv_spawnMinionType[1] = "JungleWarrior";
    gv_spawnMinionType[2] = "JunglePriest";
    gv_spawnMinionType[3] = "JungleHeadhunter";
    gv_spawnMinionType[4] = "SpaceCowSmall";
    gv_spawnMinionType[5] = "OgreBrute";
    gv_spawnMinionType[6] = "OgreMagi";
    gv_spawnMinionType[7] = "OgreArmoredBrute";
    gv_spawnMinionType[8] = "MurlocSpawn";
    gv_spawnMinionType[9] = "MurlocTidewarrior";
    gv_spawnMinionType[10] = "MurlocCorruptor";
    gv_spawnMinionType[11] = "MurlocProtector";
    gv_spawnMinionType[12] = "NagaGuard";
    gv_spawnMinionType[13] = "NagaSiren";
    gv_spawnMinionType[14] = "TidalSerpent";
    gv_spawnMinionType[15] = "NagaHighGuard";
    gv_spawnMinionType[16] = "Hydra";
    gv_spawnMinionType[17] = "SkeletonWarrior";
    gv_spawnMinionType[18] = "SkeletonArcher";
    gv_spawnMinionType[19] = "GhoulHostile";
    gv_spawnMinionType[20] = "Necromancer";
    gv_spawnMinionType[21] = "CryptFiend";
    gv_spawnMinionType[22] = "Gargoyle";
    gv_spawnMinionType[23] = "AbominationHostile";
    gv_spawnMinionType[24] = "ChaosGrunt";
    gv_spawnMinionType[25] = "ChaosShaman";
    gv_spawnMinionType[26] = "ChaosWolfrider";
    gv_spawnMinionType[27] = "RedDragonWhelp";
    gv_spawnMinionType[28] = "ChaosWarlock";
    gv_spawnMinionType[29] = "ChaosKodorider";
    gv_spawnMinionType[30] = "FelHound";
    gv_spawnMinionType[31] = "FelGuard";
    gv_spawnMinionType[32] = "Succubus";
    gv_spawnMinionType[33] = "VoidWalker";
    gv_spawnMinionType[34] = "Doomguard";
    gv_spawnMinionType[35] = "EredarWarlock";
    gv_spawnMinionType[36] = "JinRahk";
    gv_spawnMinionType[37] = "HighLordOgRok";
    gv_spawnMinionType[38] = "Murkee";
    gv_spawnMinionType[39] = "QueenofTides";
    gv_spawnMinionType[40] = "SkeletonKing";
    gv_spawnMinionType[41] = "Lich";
    gv_spawnMinionType[42] = "SarkontheFlame";
    gv_spawnMinionType[43] = "Hadescry";
    gv_spawnMinionType[45] = "MephistophelestheEndofWorlds";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameBegins_Init () {
    gt_GameBegins = TriggerCreate("gt_GameBegins_Func");
    TriggerAddEventTimer(gt_GameBegins, gv_gameBeginsTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Timer
//--------------------------------------------------------------------------------------------------
bool gt_SpawnTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_spawnTimer, gv_spawnTimerTotal, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/8C218EB0"), true, false);
    gv_spawnTimerWindow = TimerWindowLastCreated();
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    TimerWindowSetAnchor(gv_spawnTimerWindow, c_anchorTopLeft, 0, -25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnTimer_Init () {
    gt_SpawnTimer = TriggerCreate("gt_SpawnTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Expire
//--------------------------------------------------------------------------------------------------
bool gt_SpawnExpire_Func (bool testConds, bool runActions) {
    int autoFAEB6C41_ae;
    int autoFAEB6C41_ai;
    int autoA3680290_ae;
    int autoA3680290_ai;
    int autoCBC7942F_ae;
    int autoCBC7942F_ai;
    int auto18BA1FD7_ae;
    int auto18BA1FD7_ai;
    int autoFEDA94E9_ae;
    int autoFEDA94E9_ai;
    int auto28F9D52A_ae;
    int auto28F9D52A_ai;
    int autoEB49B396_ae;
    int autoEB49B396_ai;
    int autoF799EA14_ae;
    int autoF799EA14_ai;
    int autoB8946989_ae;
    int autoB8946989_ai;
    int auto574B5143_ae;
    int auto574B5143_ai;
    int autoFE012354_ae;
    int autoFE012354_ai;
    int autoC65C74C1_ae;
    int autoC65C74C1_ai;
    int auto40B7338D_ae;
    int auto40B7338D_ai;
    int auto3EF9EF9B_ae;
    int auto3EF9EF9B_ai;
    int autoB41217DE_ae;
    int autoB41217DE_ai;
    int auto4F66FA63_ae;
    int auto4F66FA63_ai;
    int autoD51BA473_ae;
    int autoD51BA473_ai;
    int auto22BED431_ae;
    int auto22BED431_ai;
    int autoA4A8EC99_ae;
    int autoA4A8EC99_ai;
    int autoF73CA19A_ae;
    int autoF73CA19A_ai;
    int auto88E8A2D1_ae;
    int auto88E8A2D1_ai;
    int auto4195F425_ae;
    int auto4195F425_ai;
    int autoA79AFAA1_ae;
    int autoA79AFAA1_ai;
    int autoB1437696_ae;
    int autoB1437696_ai;
    int autoB68DE87A_ae;
    int autoB68DE87A_ai;
    int auto85BEB97E_ae;
    int auto85BEB97E_ai;
    int auto86076725_ae;
    int auto86076725_ai;
    int auto6BC5C70C_ae;
    int auto6BC5C70C_ai;
    int auto73C994E3_ae;
    int auto73C994E3_ai;
    int autoA413717E_ae;
    int autoA413717E_ai;
    int autoFAC7072D_ae;
    int autoFAC7072D_ai;
    int autoB9E34957_ae;
    int autoB9E34957_ai;
    int auto9F01B72E_ae;
    int auto9F01B72E_ai;
    int auto26581F84_ae;
    int auto26581F84_ai;
    int autoEBE0288A_ae;
    int autoEBE0288A_ai;
    int autoCCB8B20D_ae;
    int autoCCB8B20D_ai;
    int autoF723E3FE_ae;
    int autoF723E3FE_ai;
    int auto970CCFD4_ae;
    int auto970CCFD4_ai;
    int autoA65D0001_ae;
    int autoA65D0001_ai;
    int auto29BD9352_ae;
    int auto29BD9352_ai;
    int autoE509A4FA_ae;
    int autoE509A4FA_ai;
    int autoCD0022A0_ae;
    int autoCD0022A0_ai;
    int autoDEF06555_ae;
    int autoDEF06555_ai;
    int autoD6DD075B_ae;
    int autoD6DD075B_ai;
    int auto803E6FC7_ae;
    int auto803E6FC7_ai;
    int auto58E104BD_ae;
    int auto58E104BD_ai;
    int autoF519FB7E_ae;
    int autoF519FB7E_ai;
    int auto52D86E4B_ae;
    int auto52D86E4B_ai;
    int auto764A7FB3_ae;
    int auto764A7FB3_ai;
    int autoFBC64A3D_ae;
    int autoFBC64A3D_ai;
    int autoFB8CFBEB_ae;
    int autoFB8CFBEB_ai;
    int autoBF4ED256_ae;
    int autoBF4ED256_ai;
    int autoA0FFB2E1_ae;
    int autoA0FFB2E1_ai;
    int auto5AD67795_ae;
    int auto5AD67795_ai;
    int auto0EEB30F9_ae;
    int auto0EEB30F9_ai;
    int auto1EF31CDD_ae;
    int auto1EF31CDD_ai;
    int auto1FB5E4CA_ae;
    int auto1FB5E4CA_ai;

    // Variable Declarations
    int lv_counter;
    int lv_alternateregion;
    int lv_player;
    int lv_regioncounter;
    int lv_t1minioncounter;
    int lv_t1minioncounterinnerloop;
    int lv_t1footmancounter;
    int lv_t2gruntcounter;
    int lv_t2minioncounter;
    int lv_t2minioncounterinnerloop;
    int lv_rng;

    // Variable Initialization
    lv_player = 9;
    lv_t1minioncounterinnerloop = 1;
    lv_t2minioncounterinnerloop = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, gv_playerincome[PlayerGroupLoopCurrent()]);
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, (StringExternal("Param/Value/4BA75B14") + (IntToText(gv_playerincome[PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/EEC6310B"))));
    }
    PlayerGroupLoopEnd();
    TimerWindowDestroy(gv_spawnTimerWindow);
    SoundPlayForPlayer(SoundLink("GameBegin", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gv_waveNumber += 1;
    autoFAEB6C41_ae = 45;
    autoFAEB6C41_ai = 1;
    lv_t1minioncounter = 0;
    for ( ; ( (autoFAEB6C41_ai >= 0 && lv_t1minioncounter <= autoFAEB6C41_ae) || (autoFAEB6C41_ai <= 0 && lv_t1minioncounter >= autoFAEB6C41_ae) ) ; lv_t1minioncounter += autoFAEB6C41_ai ) {
        if ((gv_t1MinionCounter[lv_t1minioncounter] != 0)) {
            autoA3680290_ae = gv_t1MinionCounter[lv_t1minioncounter];
            autoA3680290_ai = 1;
            lv_t1minioncounterinnerloop = 1;
            for ( ; ( (autoA3680290_ai >= 0 && lv_t1minioncounterinnerloop <= autoA3680290_ae) || (autoA3680290_ai <= 0 && lv_t1minioncounterinnerloop >= autoA3680290_ae) ) ; lv_t1minioncounterinnerloop += autoA3680290_ai ) {
                lv_rng = RandomInt(0, 3);
                if ((lv_t1minioncounter == 44)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ValactheSwordofDoom", 0, 10, RegionGetCenter(gv_team2FootmanSpawn[lv_rng]));
                    lv_rng = RandomInt(0, 3);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArdathraQueenofTemptation", 0, 10, RegionGetCenter(gv_team2FootmanSpawn[lv_rng]));
                    Wait(0.01, c_timeGame);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_spawnMinionType[lv_t1minioncounter], 0, 10, RegionGetCenter(gv_team2FootmanSpawn[lv_rng]));
                    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionVisual", null, null, null);
                    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionSound", null, null, null);
                    Wait(0.01, c_timeGame);
                }
            }
            gv_t1MinionCounter[lv_t1minioncounter] = 0;
        }

    }
    autoCBC7942F_ae = 45;
    autoCBC7942F_ai = 1;
    lv_t2minioncounter = 0;
    for ( ; ( (autoCBC7942F_ai >= 0 && lv_t2minioncounter <= autoCBC7942F_ae) || (autoCBC7942F_ai <= 0 && lv_t2minioncounter >= autoCBC7942F_ae) ) ; lv_t2minioncounter += autoCBC7942F_ai ) {
        if ((gv_t2MinionCounter[lv_t2minioncounter] != 0)) {
            auto18BA1FD7_ae = gv_t2MinionCounter[lv_t2minioncounter];
            auto18BA1FD7_ai = 1;
            lv_t2minioncounterinnerloop = 1;
            for ( ; ( (auto18BA1FD7_ai >= 0 && lv_t2minioncounterinnerloop <= auto18BA1FD7_ae) || (auto18BA1FD7_ai <= 0 && lv_t2minioncounterinnerloop >= auto18BA1FD7_ae) ) ; lv_t2minioncounterinnerloop += auto18BA1FD7_ai ) {
                lv_rng = RandomInt(0, 3);
                if ((lv_t2minioncounter == 44)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ValactheSwordofDoom", 0, 9, RegionGetCenter(gv_team1GruntSpawn[lv_rng]));
                    lv_rng = RandomInt(0, 3);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArdathraQueenofTemptation", 0, 9, RegionGetCenter(gv_team1GruntSpawn[lv_rng]));
                    Wait(0.01, c_timeGame);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_spawnMinionType[lv_t2minioncounter], 0, 9, RegionGetCenter(gv_team1GruntSpawn[lv_rng]));
                    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionVisual", null, null, null);
                    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionSound", null, null, null);
                    Wait(0.01, c_timeGame);
                }
            }
            gv_t2MinionCounter[lv_t2minioncounter] = 0;
        }

    }
    autoFEDA94E9_ae = gv_team1GruntCount;
    autoFEDA94E9_ai = 1;
    lv_t1footmancounter = 1;
    for ( ; ( (autoFEDA94E9_ai >= 0 && lv_t1footmancounter <= autoFEDA94E9_ae) || (autoFEDA94E9_ai <= 0 && lv_t1footmancounter >= autoFEDA94E9_ae) ) ; lv_t1footmancounter += autoFEDA94E9_ai ) {
        lv_rng = RandomInt(0, 3);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Grunt", 0, 9, RegionGetCenter(gv_team1GruntSpawn[lv_rng]));
        UnitBehaviorAdd(UnitLastCreated(), "ScaleBuff", UnitLastCreated(), gv_scaleGruntFootiesCount);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionVisual", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionSound", null, null, null);
        Wait(0.01, c_timeGame);
    }
    auto28F9D52A_ae = gv_team2FootmanCount;
    auto28F9D52A_ai = 1;
    lv_t2gruntcounter = 1;
    for ( ; ( (auto28F9D52A_ai >= 0 && lv_t2gruntcounter <= auto28F9D52A_ae) || (auto28F9D52A_ai <= 0 && lv_t2gruntcounter >= auto28F9D52A_ae) ) ; lv_t2gruntcounter += auto28F9D52A_ai ) {
        lv_rng = RandomInt(0, 3);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Footman", 0, 10, RegionGetCenter(gv_team2FootmanSpawn[lv_rng]));
        UnitBehaviorAdd(UnitLastCreated(), "ScaleBuff", UnitLastCreated(), gv_scaleGruntFootiesCount);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionVisual", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpawnMinionSound", null, null, null);
        Wait(0.01, c_timeGame);
    }
    if ((gv_waveNumber == 1)) {
        gv_spawnTimerTotal = 45.0;
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/FE08657D") + ((StringExternal("Param/Value/854DF817") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/22BDA9C9"))) + (StringExternal("Param/Value/53041361") + (StringExternal("Param/Value/5B160F60") + StringExternal("Param/Value/BF7D280F"))))), PlayerGroupAll());
        autoEB49B396_ae = 1;
        autoEB49B396_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoEB49B396_ai >= 0 && lv_counter <= autoEB49B396_ae) || (autoEB49B396_ai <= 0 && lv_counter >= autoEB49B396_ae) ) ; lv_counter += autoEB49B396_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][0]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][1]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][2]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][3]));
            lv_player += 1;
            lv_alternateregion += 1;
        }
    }

    if ((gv_waveNumber >= 51)) {
        autoF799EA14_ae = 1;
        autoF799EA14_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoF799EA14_ai >= 0 && lv_counter <= autoF799EA14_ae) || (autoF799EA14_ai <= 0 && lv_counter >= autoF799EA14_ae) ) ; lv_counter += autoF799EA14_ai ) {
            lv_regioncounter = RandomInt(0, 3);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Void", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            UnitBehaviorAdd(UnitLastCreated(), "CreepVoidBuff", UnitLastCreated(), (gv_waveNumber - 51));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FD5A2F6E"));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 2)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/5DF91B13") + ((StringExternal("Param/Value/7E4F1870") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/B3A1BE69"))) + (StringExternal("Param/Value/A150A2A2") + (StringExternal("Param/Value/D946CAD6") + StringExternal("Param/Value/FB575CD0"))))), PlayerGroupAll());
        autoB8946989_ae = 1;
        autoB8946989_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoB8946989_ai >= 0 && lv_counter <= autoB8946989_ae) || (autoB8946989_ai <= 0 && lv_counter >= autoB8946989_ae) ) ; lv_counter += autoB8946989_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][0]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][1]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][2]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][3]));
            lv_player += 1;
            lv_alternateregion += 1;
        }
    }

    if ((gv_waveNumber == 3)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/5EFFC4EE") + ((StringExternal("Param/Value/33C5B69F") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/13A47848"))) + (StringExternal("Param/Value/7DEA0172") + (StringExternal("Param/Value/6211330E") + StringExternal("Param/Value/D3AE5856"))))), PlayerGroupAll());
        auto574B5143_ae = 1;
        auto574B5143_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto574B5143_ai >= 0 && lv_counter <= auto574B5143_ae) || (auto574B5143_ai <= 0 && lv_counter >= auto574B5143_ae) ) ; lv_counter += auto574B5143_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 4)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/0606A617") + ((StringExternal("Param/Value/F67EC5C5") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/DA662736"))) + (StringExternal("Param/Value/DFE292BD") + (StringExternal("Param/Value/9498AD22") + StringExternal("Param/Value/5594A8B0"))))), PlayerGroupAll());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EF8F748B"));
        autoFE012354_ae = 1;
        autoFE012354_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoFE012354_ai >= 0 && lv_counter <= autoFE012354_ae) || (autoFE012354_ai <= 0 && lv_counter >= autoFE012354_ae) ) ; lv_counter += autoFE012354_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 5)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/A450B3BB") + ((StringExternal("Param/Value/F6280BB7") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/39AD8E18"))) + (StringExternal("Param/Value/E94CE5A2") + (StringExternal("Param/Value/0AEEFBC9") + StringExternal("Param/Value/7CB6C729"))))), PlayerGroupAll());
        autoC65C74C1_ae = 1;
        autoC65C74C1_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoC65C74C1_ai >= 0 && lv_counter <= autoC65C74C1_ae) || (autoC65C74C1_ai <= 0 && lv_counter >= autoC65C74C1_ae) ) ; lv_counter += autoC65C74C1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinRahk", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3B4AF94D"));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 6)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/4AD50D3C") + ((StringExternal("Param/Value/7E7E7A76") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/E4AC0534"))) + (StringExternal("Param/Value/E70FFD0F") + (StringExternal("Param/Value/AA046584") + StringExternal("Param/Value/54E8D730"))))), PlayerGroupAll());
        auto40B7338D_ae = 1;
        auto40B7338D_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto40B7338D_ai >= 0 && lv_counter <= auto40B7338D_ae) || (auto40B7338D_ai <= 0 && lv_counter >= auto40B7338D_ae) ) ; lv_counter += auto40B7338D_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "JungleWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JunglePriest", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleHeadhunter", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 7)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/CF184A70") + ((StringExternal("Param/Value/FBBD52E9") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/5ABDC73C"))) + (StringExternal("Param/Value/9623DE67") + (StringExternal("Param/Value/40799962") + StringExternal("Param/Value/685168ED"))))), PlayerGroupAll());
        auto3EF9EF9B_ae = 1;
        auto3EF9EF9B_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto3EF9EF9B_ai >= 0 && lv_counter <= auto3EF9EF9B_ae) || (auto3EF9EF9B_ai <= 0 && lv_counter >= auto3EF9EF9B_ae) ) ; lv_counter += auto3EF9EF9B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 8)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/30931AD1") + ((StringExternal("Param/Value/D180FDF0") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/331CBDF5"))) + (StringExternal("Param/Value/36D1F263") + (StringExternal("Param/Value/199E51CE") + StringExternal("Param/Value/C4196619"))))), PlayerGroupAll());
        autoB41217DE_ae = 1;
        autoB41217DE_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoB41217DE_ai >= 0 && lv_counter <= autoB41217DE_ae) || (autoB41217DE_ai <= 0 && lv_counter >= autoB41217DE_ae) ) ; lv_counter += autoB41217DE_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreTwoHeadedBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreArmoredBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 9)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/1D0D9B3E") + ((StringExternal("Param/Value/E91B2077") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/E83A18D7"))) + (StringExternal("Param/Value/7A9F34CC") + (StringExternal("Param/Value/D80EC416") + StringExternal("Param/Value/F87DFE57"))))), PlayerGroupAll());
        auto4F66FA63_ae = 1;
        auto4F66FA63_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto4F66FA63_ai >= 0 && lv_counter <= auto4F66FA63_ae) || (auto4F66FA63_ai <= 0 && lv_counter >= auto4F66FA63_ae) ) ; lv_counter += auto4F66FA63_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreTwoHeadedBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreArmoredBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreTwoHeadedBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreArmoredBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 10)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/33F34DE6") + ((StringExternal("Param/Value/A5A2658D") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/0BDB1FB7"))) + (StringExternal("Param/Value/E3019662") + (StringExternal("Param/Value/4EB953D5") + StringExternal("Param/Value/5F3CD7AC"))))), PlayerGroupAll());
        autoD51BA473_ae = 1;
        autoD51BA473_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoD51BA473_ai >= 0 && lv_counter <= autoD51BA473_ae) || (autoD51BA473_ai <= 0 && lv_counter >= autoD51BA473_ae) ) ; lv_counter += autoD51BA473_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreTwoHeadedBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreArmoredBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighLordOgRok", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0FCB814C"));
            lv_regioncounter += 2;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreTwoHeadedBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreArmoredBrute", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "OgreMagi", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 11)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/59B24EAF") + ((StringExternal("Param/Value/6B52437A") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/8E3B3C77"))) + (StringExternal("Param/Value/80A0373D") + (StringExternal("Param/Value/8E9C4DDD") + StringExternal("Param/Value/E929E27A"))))), PlayerGroupAll());
        auto22BED431_ae = 1;
        auto22BED431_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto22BED431_ai >= 0 && lv_counter <= auto22BED431_ae) || (auto22BED431_ai <= 0 && lv_counter >= auto22BED431_ae) ) ; lv_counter += auto22BED431_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 12)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/2560DA19") + ((StringExternal("Param/Value/4510D7F6") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/049B2EAC"))) + (StringExternal("Param/Value/3193FA20") + (StringExternal("Param/Value/5CE0D4F8") + StringExternal("Param/Value/09B7E1FA"))))), PlayerGroupAll());
        autoA4A8EC99_ae = 1;
        autoA4A8EC99_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoA4A8EC99_ai >= 0 && lv_counter <= autoA4A8EC99_ae) || (autoA4A8EC99_ai <= 0 && lv_counter >= autoA4A8EC99_ae) ) ; lv_counter += autoA4A8EC99_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 13)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/4B3CE4F1") + ((StringExternal("Param/Value/DF5390C4") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/F2D3C6E2"))) + (StringExternal("Param/Value/E5E9D2A8") + (StringExternal("Param/Value/B98D6712") + StringExternal("Param/Value/8EB1B53F"))))), PlayerGroupAll());
        autoF73CA19A_ae = 1;
        autoF73CA19A_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoF73CA19A_ai >= 0 && lv_counter <= autoF73CA19A_ae) || (autoF73CA19A_ai <= 0 && lv_counter >= autoF73CA19A_ae) ) ; lv_counter += autoF73CA19A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 14)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/67886BA4") + ((StringExternal("Param/Value/AE8A924B") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/0A264987"))) + (StringExternal("Param/Value/A09DDCB5") + (StringExternal("Param/Value/B8685467") + StringExternal("Param/Value/6DD15C7F"))))), PlayerGroupAll());
        auto88E8A2D1_ae = 1;
        auto88E8A2D1_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto88E8A2D1_ai >= 0 && lv_counter <= auto88E8A2D1_ae) || (auto88E8A2D1_ai <= 0 && lv_counter >= auto88E8A2D1_ae) ) ; lv_counter += auto88E8A2D1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 15)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/BC2A175F") + ((StringExternal("Param/Value/1490A581") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/0A49F132"))) + (StringExternal("Param/Value/F1FBB271") + (StringExternal("Param/Value/DBA03C18") + StringExternal("Param/Value/61818550"))))), PlayerGroupAll());
        auto4195F425_ae = 1;
        auto4195F425_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto4195F425_ai >= 0 && lv_counter <= auto4195F425_ae) || (auto4195F425_ai <= 0 && lv_counter >= auto4195F425_ae) ) ; lv_counter += auto4195F425_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Murkee", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/58F252AF"));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(25, "MurlocSpawn", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocProtector", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 16)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/6147E2AD") + ((StringExternal("Param/Value/F2488237") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/4AE2C1E5"))) + (StringExternal("Param/Value/F25F3548") + (StringExternal("Param/Value/ABEE07F3") + StringExternal("Param/Value/ABE9FAFF"))))), PlayerGroupAll());
        autoA79AFAA1_ae = 1;
        autoA79AFAA1_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoA79AFAA1_ai >= 0 && lv_counter <= autoA79AFAA1_ae) || (autoA79AFAA1_ai <= 0 && lv_counter >= autoA79AFAA1_ae) ) ; lv_counter += autoA79AFAA1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "MurlocTidewarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocCorruptor", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 17)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/6B0ED698") + ((StringExternal("Param/Value/E12B53C3") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/55428B2C"))) + (StringExternal("Param/Value/D994FAA5") + (StringExternal("Param/Value/065F6D8F") + StringExternal("Param/Value/DB1B737D"))))), PlayerGroupAll());
        autoB1437696_ae = 1;
        autoB1437696_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoB1437696_ai >= 0 && lv_counter <= autoB1437696_ae) || (autoB1437696_ai <= 0 && lv_counter >= autoB1437696_ae) ) ; lv_counter += autoB1437696_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 18)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/3349D128") + ((StringExternal("Param/Value/0275B1AA") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/106F6106"))) + (StringExternal("Param/Value/8FA0546E") + (StringExternal("Param/Value/34A17CC7") + StringExternal("Param/Value/52742CAC"))))), PlayerGroupAll());
        autoB68DE87A_ae = 1;
        autoB68DE87A_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoB68DE87A_ai >= 0 && lv_counter <= autoB68DE87A_ae) || (autoB68DE87A_ai <= 0 && lv_counter >= autoB68DE87A_ae) ) ; lv_counter += autoB68DE87A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydra", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydra", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 19)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/E5E53557") + ((StringExternal("Param/Value/7729F1EE") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/DF74DB19"))) + (StringExternal("Param/Value/B80BB5C9") + (StringExternal("Param/Value/CED69442") + StringExternal("Param/Value/6735301B"))))), PlayerGroupAll());
        auto85BEB97E_ae = 1;
        auto85BEB97E_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto85BEB97E_ai >= 0 && lv_counter <= auto85BEB97E_ae) || (auto85BEB97E_ai <= 0 && lv_counter >= auto85BEB97E_ae) ) ; lv_counter += auto85BEB97E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydra", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaHighGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaStormwitch", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydra", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaHighGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NagaStormwitch", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 20)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/CDCD910B") + ((StringExternal("Param/Value/DA2EF262") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/6B14610E"))) + (StringExternal("Param/Value/DC616D3F") + (StringExternal("Param/Value/B7CCB972") + StringExternal("Param/Value/3E98330B"))))), PlayerGroupAll());
        auto86076725_ae = 1;
        auto86076725_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto86076725_ai >= 0 && lv_counter <= auto86076725_ae) || (auto86076725_ai <= 0 && lv_counter >= auto86076725_ae) ) ; lv_counter += auto86076725_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaHighGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaStormwitch", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "QueenofTides", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2D0208E9"));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "NagaHighGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaSiren", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "NagaStormwitch", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "TidalSerpent", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Hydra", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 21)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/9F3F8EB5") + ((StringExternal("Param/Value/F8045AE1") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/61511206"))) + (StringExternal("Param/Value/6924B3D3") + (StringExternal("Param/Value/93A13EE6") + StringExternal("Param/Value/56F066E1"))))), PlayerGroupAll());
        auto6BC5C70C_ae = 1;
        auto6BC5C70C_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto6BC5C70C_ai >= 0 && lv_counter <= auto6BC5C70C_ae) || (auto6BC5C70C_ai <= 0 && lv_counter >= auto6BC5C70C_ae) ) ; lv_counter += auto6BC5C70C_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 22)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/0ED4CC40") + ((StringExternal("Param/Value/79C23065") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/877FB589"))) + (StringExternal("Param/Value/FE9C0850") + (StringExternal("Param/Value/560264B4") + StringExternal("Param/Value/5076AA2B"))))), PlayerGroupAll());
        auto73C994E3_ae = 1;
        auto73C994E3_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto73C994E3_ai >= 0 && lv_counter <= auto73C994E3_ae) || (auto73C994E3_ai <= 0 && lv_counter >= auto73C994E3_ae) ) ; lv_counter += auto73C994E3_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 23)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/75AF2FBD") + ((StringExternal("Param/Value/5DCDECCB") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/95D3CF50"))) + (StringExternal("Param/Value/2A2D7C3D") + (StringExternal("Param/Value/F5B413CF") + StringExternal("Param/Value/38B1519C"))))), PlayerGroupAll());
        autoA413717E_ae = 1;
        autoA413717E_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoA413717E_ai >= 0 && lv_counter <= autoA413717E_ae) || (autoA413717E_ai <= 0 && lv_counter >= autoA413717E_ae) ) ; lv_counter += autoA413717E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(14, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(14, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 24)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/12828413") + ((StringExternal("Param/Value/77A3EFA0") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/3C0DA576"))) + (StringExternal("Param/Value/3BD1BD6C") + (StringExternal("Param/Value/633DA0DF") + StringExternal("Param/Value/0D06B70D"))))), PlayerGroupAll());
        autoFAC7072D_ae = 1;
        autoFAC7072D_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoFAC7072D_ai >= 0 && lv_counter <= autoFAC7072D_ae) || (autoFAC7072D_ai <= 0 && lv_counter >= autoFAC7072D_ae) ) ; lv_counter += autoFAC7072D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(16, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(16, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 25)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/50568FAD") + ((StringExternal("Param/Value/9530671E") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/E3D1B9F4"))) + (StringExternal("Param/Value/EE5B8A83") + (StringExternal("Param/Value/864B0DC3") + StringExternal("Param/Value/8B14599D"))))), PlayerGroupAll());
        autoB9E34957_ae = 1;
        autoB9E34957_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoB9E34957_ai >= 0 && lv_counter <= autoB9E34957_ae) || (autoB9E34957_ai <= 0 && lv_counter >= autoB9E34957_ae) ) ; lv_counter += autoB9E34957_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(16, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(20, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SkeletonKing", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CE974319"));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 26)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/AC7047FA") + ((StringExternal("Param/Value/0EB00ED0") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/2953A398"))) + (StringExternal("Param/Value/917CB1CE") + (StringExternal("Param/Value/A0F9672E") + StringExternal("Param/Value/2EEB86FA"))))), PlayerGroupAll());
        auto9F01B72E_ae = 1;
        auto9F01B72E_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto9F01B72E_ai >= 0 && lv_counter <= auto9F01B72E_ae) || (auto9F01B72E_ai <= 0 && lv_counter >= auto9F01B72E_ae) ) ; lv_counter += auto9F01B72E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 27)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/BF2877FA") + ((StringExternal("Param/Value/2C030098") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/13B2A7C9"))) + (StringExternal("Param/Value/202E68E1") + (StringExternal("Param/Value/B3C35ACA") + StringExternal("Param/Value/04BE7B15"))))), PlayerGroupAll());
        auto26581F84_ae = 1;
        auto26581F84_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto26581F84_ai >= 0 && lv_counter <= auto26581F84_ae) || (auto26581F84_ai <= 0 && lv_counter >= auto26581F84_ae) ) ; lv_counter += auto26581F84_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 28)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/79F5369B") + ((StringExternal("Param/Value/502B66CB") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/A32B23C7"))) + (StringExternal("Param/Value/14DA5F78") + (StringExternal("Param/Value/D7FE1769") + StringExternal("Param/Value/B3732091"))))), PlayerGroupAll());
        autoEBE0288A_ae = 1;
        autoEBE0288A_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoEBE0288A_ai >= 0 && lv_counter <= autoEBE0288A_ae) || (autoEBE0288A_ai <= 0 && lv_counter >= autoEBE0288A_ae) ) ; lv_counter += autoEBE0288A_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 29)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/8603EC3B") + ((StringExternal("Param/Value/C4CABD1C") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/6C040472"))) + (StringExternal("Param/Value/8A143193") + (StringExternal("Param/Value/A08643C2") + StringExternal("Param/Value/C9BB6D2A"))))), PlayerGroupAll());
        autoCCB8B20D_ae = 1;
        autoCCB8B20D_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoCCB8B20D_ai >= 0 && lv_counter <= autoCCB8B20D_ae) || (autoCCB8B20D_ai <= 0 && lv_counter >= autoCCB8B20D_ae) ) ; lv_counter += autoCCB8B20D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "CryptFiend", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 30)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/8715ABF1") + ((StringExternal("Param/Value/FC99FC74") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/398283BB"))) + (StringExternal("Param/Value/320D2783") + (StringExternal("Param/Value/2ED9B4B2") + StringExternal("Param/Value/2A79102E"))))), PlayerGroupAll());
        autoF723E3FE_ae = 1;
        autoF723E3FE_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoF723E3FE_ai >= 0 && lv_counter <= autoF723E3FE_ae) || (autoF723E3FE_ai <= 0 && lv_counter >= autoF723E3FE_ae) ) ; lv_counter += autoF723E3FE_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lich", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonWarrior", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "SkeletonArcher", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Necromancer", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Gargoyle", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "Ghoul", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "AbominationHostile", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/62B5B88F"));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 31)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/36D6D0C9") + ((StringExternal("Param/Value/C250E7A5") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/23FF5297"))) + (StringExternal("Param/Value/FD705992") + (StringExternal("Param/Value/B3C33C6B") + StringExternal("Param/Value/32DE9D5B"))))), PlayerGroupAll());
        auto970CCFD4_ae = 1;
        auto970CCFD4_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto970CCFD4_ai >= 0 && lv_counter <= auto970CCFD4_ae) || (auto970CCFD4_ai <= 0 && lv_counter >= auto970CCFD4_ae) ) ; lv_counter += auto970CCFD4_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 32)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/7422118B") + ((StringExternal("Param/Value/AF7541F1") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/479A0FBC"))) + (StringExternal("Param/Value/3035A3F9") + (StringExternal("Param/Value/4375BC1F") + StringExternal("Param/Value/08DA57F7"))))), PlayerGroupAll());
        autoA65D0001_ae = 1;
        autoA65D0001_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoA65D0001_ai >= 0 && lv_counter <= autoA65D0001_ae) || (autoA65D0001_ai <= 0 && lv_counter >= autoA65D0001_ae) ) ; lv_counter += autoA65D0001_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 33)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/A7AD9356") + ((StringExternal("Param/Value/482FCE04") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/5594BB00"))) + (StringExternal("Param/Value/0592C4BF") + (StringExternal("Param/Value/3D1CF199") + StringExternal("Param/Value/E2D736C5"))))), PlayerGroupAll());
        auto29BD9352_ae = 1;
        auto29BD9352_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto29BD9352_ai >= 0 && lv_counter <= auto29BD9352_ae) || (auto29BD9352_ai <= 0 && lv_counter >= auto29BD9352_ae) ) ; lv_counter += auto29BD9352_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 34)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/7AB816CA") + ((StringExternal("Param/Value/20714D7E") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/CE8B7340"))) + (StringExternal("Param/Value/228443B8") + (StringExternal("Param/Value/C9BA7001") + StringExternal("Param/Value/296C08D8"))))), PlayerGroupAll());
        autoE509A4FA_ae = 1;
        autoE509A4FA_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoE509A4FA_ai >= 0 && lv_counter <= autoE509A4FA_ae) || (autoE509A4FA_ai <= 0 && lv_counter >= autoE509A4FA_ae) ) ; lv_counter += autoE509A4FA_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 35)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/5D01B3D3") + ((StringExternal("Param/Value/E4362065") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/D3F3A0D5"))) + (StringExternal("Param/Value/4BF17D2C") + (StringExternal("Param/Value/02B47B77") + StringExternal("Param/Value/B75FEA7A"))))), PlayerGroupAll());
        autoCD0022A0_ae = 1;
        autoCD0022A0_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoCD0022A0_ai >= 0 && lv_counter <= autoCD0022A0_ae) || (autoCD0022A0_ai <= 0 && lv_counter >= autoCD0022A0_ae) ) ; lv_counter += autoCD0022A0_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(12, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SarkontheFlame", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5F6C3F51"));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 36)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/82DC6392") + ((StringExternal("Param/Value/6254FB0D") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/AE771D7D"))) + (StringExternal("Param/Value/DC94851B") + (StringExternal("Param/Value/5A567AC4") + StringExternal("Param/Value/18638A73"))))), PlayerGroupAll());
        autoDEF06555_ae = 1;
        autoDEF06555_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoDEF06555_ai >= 0 && lv_counter <= autoDEF06555_ae) || (autoDEF06555_ai <= 0 && lv_counter >= autoDEF06555_ae) ) ; lv_counter += autoDEF06555_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 37)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/5D2ADFA6") + ((StringExternal("Param/Value/A40BE6FB") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/19D6D0E6"))) + (StringExternal("Param/Value/14DF13AF") + (StringExternal("Param/Value/5F2D5B22") + StringExternal("Param/Value/A793DFA2"))))), PlayerGroupAll());
        autoD6DD075B_ae = 1;
        autoD6DD075B_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoD6DD075B_ai >= 0 && lv_counter <= autoD6DD075B_ae) || (autoD6DD075B_ai <= 0 && lv_counter >= autoD6DD075B_ae) ) ; lv_counter += autoD6DD075B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 38)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/BE7AE54A") + ((StringExternal("Param/Value/B8665506") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/64EBF871"))) + (StringExternal("Param/Value/3BAB00AF") + (StringExternal("Param/Value/7A48EE04") + StringExternal("Param/Value/70339028"))))), PlayerGroupAll());
        auto803E6FC7_ae = 1;
        auto803E6FC7_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto803E6FC7_ai >= 0 && lv_counter <= auto803E6FC7_ae) || (auto803E6FC7_ai <= 0 && lv_counter >= auto803E6FC7_ae) ) ; lv_counter += auto803E6FC7_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 39)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/E84139DF") + ((StringExternal("Param/Value/FBBA82FA") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/0E67B0F8"))) + (StringExternal("Param/Value/3449BEEF") + (StringExternal("Param/Value/2BC2D629") + StringExternal("Param/Value/FD69B669"))))), PlayerGroupAll());
        auto58E104BD_ae = 1;
        auto58E104BD_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto58E104BD_ai >= 0 && lv_counter <= auto58E104BD_ae) || (auto58E104BD_ai <= 0 && lv_counter >= auto58E104BD_ae) ) ; lv_counter += auto58E104BD_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 40)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/C9681BC9") + ((StringExternal("Param/Value/3CFB40EE") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/17EF3443"))) + (StringExternal("Param/Value/289DA87E") + (StringExternal("Param/Value/8160EC64") + StringExternal("Param/Value/EBA9CD73"))))), PlayerGroupAll());
        autoF519FB7E_ae = 1;
        autoF519FB7E_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoF519FB7E_ai >= 0 && lv_counter <= autoF519FB7E_ae) || (autoF519FB7E_ai <= 0 && lv_counter >= autoF519FB7E_ae) ) ; lv_counter += autoF519FB7E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hadescry", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(20, "ChaosGrunt", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosShaman", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(5, "ChaosWolfrider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "RedDragonWhelp", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "ChaosKodorider", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D755F2BE"));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 41)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/1D20EDE4") + ((StringExternal("Param/Value/7FFE2151") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/4CECAB9D"))) + (StringExternal("Param/Value/6B32ECB9") + (StringExternal("Param/Value/CF434FE9") + StringExternal("Param/Value/CB1C446D"))))), PlayerGroupAll());
        auto52D86E4B_ae = 1;
        auto52D86E4B_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto52D86E4B_ai >= 0 && lv_counter <= auto52D86E4B_ae) || (auto52D86E4B_ai <= 0 && lv_counter >= auto52D86E4B_ae) ) ; lv_counter += auto52D86E4B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 42)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/4175C326") + ((StringExternal("Param/Value/460BE608") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/67C17171"))) + (StringExternal("Param/Value/50F5BC96") + (StringExternal("Param/Value/34C643EB") + StringExternal("Param/Value/8853C63B"))))), PlayerGroupAll());
        auto764A7FB3_ae = 1;
        auto764A7FB3_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto764A7FB3_ai >= 0 && lv_counter <= auto764A7FB3_ae) || (auto764A7FB3_ai <= 0 && lv_counter >= auto764A7FB3_ae) ) ; lv_counter += auto764A7FB3_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(6, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 43)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/7B3A1E46") + ((StringExternal("Param/Value/95477767") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/7BE8E2D1"))) + (StringExternal("Param/Value/1B0217D1") + (StringExternal("Param/Value/D663141E") + StringExternal("Param/Value/DFB73283"))))), PlayerGroupAll());
        autoFBC64A3D_ae = 1;
        autoFBC64A3D_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoFBC64A3D_ai >= 0 && lv_counter <= autoFBC64A3D_ae) || (autoFBC64A3D_ai <= 0 && lv_counter >= autoFBC64A3D_ae) ) ; lv_counter += autoFBC64A3D_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(7, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 44)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/A2A5DCF4") + ((StringExternal("Param/Value/68022883") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/55347012"))) + (StringExternal("Param/Value/97C57A85") + (StringExternal("Param/Value/D48FA247") + StringExternal("Param/Value/52087E3D"))))), PlayerGroupAll());
        autoFB8CFBEB_ae = 1;
        autoFB8CFBEB_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoFB8CFBEB_ai >= 0 && lv_counter <= autoFB8CFBEB_ae) || (autoFB8CFBEB_ai <= 0 && lv_counter >= autoFB8CFBEB_ae) ) ; lv_counter += autoFB8CFBEB_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(4, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 45)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/9A2AA669") + ((StringExternal("Param/Value/8FD830CD") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/34EB89AC"))) + (StringExternal("Param/Value/CE2F1099") + (StringExternal("Param/Value/4F5B43DF") + StringExternal("Param/Value/2273C88F"))))), PlayerGroupAll());
        autoBF4ED256_ae = 1;
        autoBF4ED256_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoBF4ED256_ai >= 0 && lv_counter <= autoBF4ED256_ae) || (autoBF4ED256_ai <= 0 && lv_counter >= autoBF4ED256_ae) ) ; lv_counter += autoBF4ED256_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(16, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ValactheSwordofDoom", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/15EF1D95"));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(8, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArdathraQueenofTemptation", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FAD84B27"));
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 46)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/89B76AEB") + ((StringExternal("Param/Value/2FC46872") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/848687DD"))) + (StringExternal("Param/Value/131241D9") + (StringExternal("Param/Value/FF38ECD2") + StringExternal("Param/Value/137BBDA1"))))), PlayerGroupAll());
        autoA0FFB2E1_ae = 1;
        autoA0FFB2E1_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoA0FFB2E1_ai >= 0 && lv_counter <= autoA0FFB2E1_ae) || (autoA0FFB2E1_ai <= 0 && lv_counter >= autoA0FFB2E1_ae) ) ; lv_counter += autoA0FFB2E1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(9, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 47)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/B4A540EA") + ((StringExternal("Param/Value/670D222B") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/020AAD67"))) + (StringExternal("Param/Value/6C48E643") + (StringExternal("Param/Value/3FC23496") + StringExternal("Param/Value/1C83E234"))))), PlayerGroupAll());
        auto5AD67795_ae = 1;
        auto5AD67795_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto5AD67795_ai >= 0 && lv_counter <= auto5AD67795_ae) || (auto5AD67795_ai <= 0 && lv_counter >= auto5AD67795_ae) ) ; lv_counter += auto5AD67795_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 48)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/7DFF1F6E") + ((StringExternal("Param/Value/EE9D4F69") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/BAA834A4"))) + (StringExternal("Param/Value/2F532776") + (StringExternal("Param/Value/98F3D232") + StringExternal("Param/Value/00898863"))))), PlayerGroupAll());
        auto0EEB30F9_ae = 1;
        auto0EEB30F9_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto0EEB30F9_ai >= 0 && lv_counter <= auto0EEB30F9_ae) || (auto0EEB30F9_ai <= 0 && lv_counter >= auto0EEB30F9_ae) ) ; lv_counter += auto0EEB30F9_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 49)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/0D7F68D8") + ((StringExternal("Param/Value/46DACFF3") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/93695C7D"))) + (StringExternal("Param/Value/B1603985") + (StringExternal("Param/Value/0C7E8150") + StringExternal("Param/Value/3C810509"))))), PlayerGroupAll());
        auto1EF31CDD_ae = 1;
        auto1EF31CDD_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto1EF31CDD_ai >= 0 && lv_counter <= auto1EF31CDD_ae) || (auto1EF31CDD_ai <= 0 && lv_counter >= auto1EF31CDD_ae) ) ; lv_counter += auto1EF31CDD_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(10, "FelHound", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(3, "Satyr", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "FelGuard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Succubus", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidWalker", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Doomguard", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EredarWarlock", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    if ((gv_waveNumber == 50)) {
        libNtve_gf_SetDialogItemTooltip(gv_waveinfoitem, (StringExternal("Param/Value/D7BA0499") + ((StringExternal("Param/Value/5998CAEF") + (IntToText((gv_waveNumber + 1)) + StringExternal("Param/Value/3B4904AA"))) + (StringExternal("Param/Value/B867E60D") + (StringExternal("Param/Value/C3720568") + StringExternal("Param/Value/D6CB4DA9"))))), PlayerGroupAll());
        auto1FB5E4CA_ae = 1;
        auto1FB5E4CA_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto1FB5E4CA_ai >= 0 && lv_counter <= auto1FB5E4CA_ae) || (auto1FB5E4CA_ai <= 0 && lv_counter >= auto1FB5E4CA_ae) ) ; lv_counter += auto1FB5E4CA_ai ) {
            lv_regioncounter += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MephistophelestheEndofWorlds", 0, lv_player, RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]));
            PingCreate(PlayerGroupAlliance(c_playerGroupEnemy, lv_player), "PingBoss", RegionGetCenter(gv_regionspawn[lv_alternateregion][lv_regioncounter]), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 5.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4FE59D39"));
            lv_regioncounter += 1;
            lv_regioncounter += 1;
            lv_player += 1;
            lv_alternateregion += 1;
            lv_regioncounter = 0;
        }
    }

    TriggerExecute(gt_SpawnTimer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnExpire_Init () {
    gt_SpawnExpire = TriggerCreate("gt_SpawnExpire_Func");
    TriggerAddEventTimer(gt_SpawnExpire, gv_spawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Mercenary Grunt
//--------------------------------------------------------------------------------------------------
bool gt_HireMercenaryGrunt_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[51]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50)) {
        SoundPlayForPlayer(SoundLink("Hire_Grunt", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_team1GruntCount += 1;
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, 1);
        }
        PlayerGroupLoopEnd();
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 50);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeon", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/28DEE7D3"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMercenaryGrunt_Init () {
    gt_HireMercenaryGrunt = TriggerCreate("gt_HireMercenaryGrunt_Func");
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryGrunt, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hire Mercenary Footman
//--------------------------------------------------------------------------------------------------
bool gt_HireMercenaryFootman_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minionbuttons[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 50)) {
        SoundPlayForPlayer(SoundLink("Hire_Footman", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gv_team2FootmanCount += 1;
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, 1);
        }
        PlayerGroupLoopEnd();
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, 50);
    }
    else {
        SoundPlayForPlayer(SoundLink("Shop_InsufficientFundsPeasant", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/386513FB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HireMercenaryFootman_Init () {
    gt_HireMercenaryFootman = TriggerCreate("gt_HireMercenaryFootman_Func");
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_HireMercenaryFootman, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scale Grunts/Footies
//--------------------------------------------------------------------------------------------------
bool gt_ScaleGruntsFooties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_scaleGruntFootiesCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScaleGruntsFooties_Init () {
    gt_ScaleGruntsFooties = TriggerCreate("gt_ScaleGruntsFooties_Func");
    TriggerEnable(gt_ScaleGruntsFooties, false);
    TriggerAddEventTimePeriodic(gt_ScaleGruntsFooties, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Globe Spawn
//--------------------------------------------------------------------------------------------------
bool gt_GlobeSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_healthglobeodds;
    fixed lv_managlobeodds;

    // Variable Initialization
    lv_healthglobeodds = 10.0;
    lv_managlobeodds = 8.0;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 9) || (UnitGetOwner(EventUnit()) == 10) || (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "OceanofBlood") == true)) {
        lv_healthglobeodds += 15.0;
    }

    if ((UnitHasBehavior2(EventUnit(), "ShamanisticAura") == true)) {
        lv_managlobeodds += 9.0;
    }

    if ((UnitHasBehavior2(EventUnit(), "ConvertEssenceEnemyDebuff") == true)) {
        lv_managlobeodds += 4.0;
        lv_healthglobeodds += 4.0;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) > 1)) {
        if ((RandomFixed(0.0, 100.0) <= lv_managlobeodds)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupEnergyFull", 0, 0, UnitGetPosition(EventUnit()));
        }
        else {
            if ((RandomFixed(0.0, 100.0) <= lv_healthglobeodds)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupHealthFull", 0, 0, UnitGetPosition(EventUnit()));
            }

        }
    }
    else {
        if ((RandomFixed(0.0, 100.0) <= lv_healthglobeodds)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupHealthFull", 0, 0, UnitGetPosition(EventUnit()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlobeSpawn_Init () {
    gt_GlobeSpawn = TriggerCreate("gt_GlobeSpawn_Func");
    TriggerAddEventUnitDamaged(gt_GlobeSpawn, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post Stun Attack Move 9
//--------------------------------------------------------------------------------------------------
bool gt_PostStunAttackMove9_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostStunAttackMove9_Init () {
    gt_PostStunAttackMove9 = TriggerCreate("gt_PostStunAttackMove9_Func");
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned025", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned3", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Terrorize", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Terrorize", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "EntanglingRoots", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "EntanglingRoots", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "EntanglingRoots2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "EntanglingRoots2", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "FungalGrowth", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "FungalGrowthMovement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Hex", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Hex", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned1Second", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Stunned1Second", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Sheeped", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "Sheeped", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "GlacialTotemPulseSnare", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove9, null, "GlacialTotemPulseSnare", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post Stun Attack Move 10
//--------------------------------------------------------------------------------------------------
bool gt_PostStunAttackMove10_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostStunAttackMove10_Init () {
    gt_PostStunAttackMove10 = TriggerCreate("gt_PostStunAttackMove10_Func");
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned025", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned3", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Terrorize", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Terrorize", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "EntanglingRoots", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "EntanglingRoots", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "EntanglingRoots2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "EntanglingRoots2", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "FungalGrowth", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "FungalGrowthMovement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Hex", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Hex", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned1Second", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Stunned1Second", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Sheeped", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "Sheeped", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "GlacialTotemPulseSnare", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunAttackMove10, null, "GlacialTotemPulseSnare", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Move Player 9
//--------------------------------------------------------------------------------------------------
bool gt_AttackMovePlayer9_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(10))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackMovePlayer9_Init () {
    gt_AttackMovePlayer9 = TriggerCreate("gt_AttackMovePlayer9_Func");
    TriggerAddEventUnitRegion(gt_AttackMovePlayer9, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Move Player 10
//--------------------------------------------------------------------------------------------------
bool gt_AttackMovePlayer10_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(18))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackMovePlayer10_Init () {
    gt_AttackMovePlayer10 = TriggerCreate("gt_AttackMovePlayer10_Func");
    TriggerAddEventUnitRegion(gt_AttackMovePlayer10, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 9 Bounty
//--------------------------------------------------------------------------------------------------
bool gt_Player9Bounty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    int lv_bounty;

    // Variable Initialization
    lv_bounty = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_waveNumber > 10)) {
        lv_bounty = 2;
    }

    if ((gv_waveNumber > 20)) {
        lv_bounty = 3;
    }

    if ((gv_waveNumber > 30)) {
        lv_bounty = 4;
    }

    if ((gv_waveNumber > 40)) {
        lv_bounty = 5;
    }

    if ((gv_waveNumber > 50)) {
        lv_bounty = 6;
    }

    if ((UnitGetType(EventUnit()) == "JinRahk")) {
        lv_bounty = 10;
    }

    if ((UnitGetType(EventUnit()) == "HighLordOgRok")) {
        lv_bounty = 20;
    }

    if ((UnitGetType(EventUnit()) == "Murkee")) {
        lv_bounty = 25;
    }

    if ((UnitGetType(EventUnit()) == "QueenofTides")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "SkeletonKing")) {
        lv_bounty = 40;
    }

    if ((UnitGetType(EventUnit()) == "Lich")) {
        lv_bounty = 50;
    }

    if ((UnitGetType(EventUnit()) == "SarkontheFlame")) {
        lv_bounty = 55;
    }

    if ((UnitGetType(EventUnit()) == "Hadescry")) {
        lv_bounty = 65;
    }

    if ((UnitGetType(EventUnit()) == "ArdathraQueenofTemptation")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "ValactheSwordofDoom")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "MephistophelestheEndofWorlds")) {
        lv_bounty = 80;
    }

    if ((UnitGetType(EventUnit()) == "Void")) {
        lv_bounty = 150;
    }

    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(3, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(4, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    TextTagCreate((StringExternal("Param/Value/1543DEC0") + IntToText(lv_bounty)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Player9Bounty_Init () {
    gt_Player9Bounty = TriggerCreate("gt_Player9Bounty_Func");
    TriggerAddEventUnitDied(gt_Player9Bounty, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 10 Bounty
//--------------------------------------------------------------------------------------------------
bool gt_Player10Bounty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    int lv_bounty;

    // Variable Initialization
    lv_bounty = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 10))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_waveNumber > 10)) {
        lv_bounty = 2;
    }

    if ((gv_waveNumber > 20)) {
        lv_bounty = 3;
    }

    if ((gv_waveNumber > 30)) {
        lv_bounty = 4;
    }

    if ((gv_waveNumber > 40)) {
        lv_bounty = 5;
    }

    if ((gv_waveNumber > 50)) {
        lv_bounty = 6;
    }

    if ((UnitGetType(EventUnit()) == "JinRahk")) {
        lv_bounty = 10;
    }

    if ((UnitGetType(EventUnit()) == "HighLordOgRok")) {
        lv_bounty = 20;
    }

    if ((UnitGetType(EventUnit()) == "Murkee")) {
        lv_bounty = 25;
    }

    if ((UnitGetType(EventUnit()) == "QueenofTides")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "SkeletonKing")) {
        lv_bounty = 40;
    }

    if ((UnitGetType(EventUnit()) == "Lich")) {
        lv_bounty = 50;
    }

    if ((UnitGetType(EventUnit()) == "SarkontheFlame")) {
        lv_bounty = 55;
    }

    if ((UnitGetType(EventUnit()) == "Hadescry")) {
        lv_bounty = 65;
    }

    if ((UnitGetType(EventUnit()) == "ArdathraQueenofTemptation")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "ValactheSwordofDoom")) {
        lv_bounty = 35;
    }

    if ((UnitGetType(EventUnit()) == "MephistophelestheEndofWorlds")) {
        lv_bounty = 80;
    }

    if ((UnitGetType(EventUnit()) == "Void")) {
        lv_bounty = 150;
    }

    PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(6, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(7, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    PlayerModifyPropertyInt(8, c_playerPropMinerals, c_playerPropOperAdd, lv_bounty);
    TextTagCreate((StringExternal("Param/Value/1C175094") + IntToText(lv_bounty)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Player10Bounty_Init () {
    gt_Player10Bounty = TriggerCreate("gt_Player10Bounty_Func");
    TriggerAddEventUnitDied(gt_Player10Bounty, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Absorber Health
//--------------------------------------------------------------------------------------------------
bool gt_EssenceAbsorberHealth_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "EssenceAbsorberStats") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "EssenceAbsorberHealthStacks", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssenceAbsorberHealth_Init () {
    gt_EssenceAbsorberHealth = TriggerCreate("gt_EssenceAbsorberHealth_Func");
    TriggerAddEventUnitBehaviorChange(gt_EssenceAbsorberHealth, null, "HealthGlobeTriggered", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Essence Absorber Mana
//--------------------------------------------------------------------------------------------------
bool gt_EssenceAbsorberMana_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "EssenceAbsorberStats") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "EssenceAbsorberManaStacks", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EssenceAbsorberMana_Init () {
    gt_EssenceAbsorberMana = TriggerCreate("gt_EssenceAbsorberMana_Func");
    TriggerAddEventUnitBehaviorChange(gt_EssenceAbsorberMana, null, "ManaGlobeTriggered", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lucky Coin
//--------------------------------------------------------------------------------------------------
bool gt_LuckyCoin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 10);
    if ((lv_rng == 7)) {
        TextTagCreate(StringExternal("Param/Value/0C75A218"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        SoundPlayOnUnitForPlayer(SoundLink("PaglesCoinUse", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, 15.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LuckyCoin_Init () {
    gt_LuckyCoin = TriggerCreate("gt_LuckyCoin_Func");
    TriggerAddEventUnitBehaviorChange(gt_LuckyCoin, null, "PaglesCoinUse", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infernal Core Damage
//--------------------------------------------------------------------------------------------------
bool gt_InfernalCoreDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxhealthmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxhealthmod = (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.01);
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNonBenefit", EventUnit(), lv_maxhealthmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfernalCoreDamage_Init () {
    gt_InfernalCoreDamage = TriggerCreate("gt_InfernalCoreDamage_Func");
    TriggerAddEventUnitDamaged(gt_InfernalCoreDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalCoreBurnDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strange Artifact Damage
//--------------------------------------------------------------------------------------------------
bool gt_StrangeArtifactDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energymod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_energymod = (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergyMax, c_unitPropCurrent) * 0.1);
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNonBenefit", EventUnit(), lv_energymod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrangeArtifactDamage_Init () {
    gt_StrangeArtifactDamage = TriggerCreate("gt_StrangeArtifactDamage_Func");
    TriggerAddEventUnitDamaged(gt_StrangeArtifactDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "StrangeArtifactDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evasion
//--------------------------------------------------------------------------------------------------
bool gt_Evasion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/46BBB5BA"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evasion_Init () {
    gt_Evasion = TriggerCreate("gt_Evasion_Func");
    TriggerAddEventUnitBehaviorChange(gt_Evasion, null, "EvadeDummy", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleave
//--------------------------------------------------------------------------------------------------
bool gt_Cleave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cleavedamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeI") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeII") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeIII") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeI") == true)) {
        lv_cleavedamage = (EventUnitDamageAmount() * 0.15);
    }
    else {
        if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeII") == true)) {
            lv_cleavedamage = (EventUnitDamageAmount() * 0.25);
        }
        else {
            if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "BattleAxeIII") == true)) {
                lv_cleavedamage = (EventUnitDamageAmount() * 0.35);
            }

        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitDamageSourceUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitGroupLoopCurrent() != EventUnit())) {
            UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageMeleeNonBenefit", UnitGroupLoopCurrent(), lv_cleavedamage);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cleave_Init () {
    gt_Cleave = TriggerCreate("gt_Cleave_Func");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "AncestralAxe");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "PsiBlades");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "WarpBlades");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "Zeratul");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "SmashernSlasherAvatar");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "SmashernSlasher");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "TaintedBladeDamage");
    TriggerAddEventUnitDamaged(gt_Cleave, null, c_unitDamageTypeAny, c_unitDamageEither, "ThrashingBlades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smash
//--------------------------------------------------------------------------------------------------
bool gt_Smash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_smashchance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "HammerSmashCooldown") == false))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerI") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerII") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerIII") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerI") == true)) {
        lv_smashchance = 12.0;
    }
    else {
        if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerII") == true)) {
            lv_smashchance = 16.0;
        }
        else {
            if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarHammerIII") == true)) {
                lv_smashchance = 20.0;
            }

        }
    }
    if ((RandomFixed(0.0, 100.0) <= lv_smashchance)) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "HammerSmashCooldown", EventUnitDamageSourceUnit(), 1);
        ActorCreate(ActorScopeFromUnit(EventUnitDamageSourceUnit()), "HammerSmashVisual", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnitDamageSourceUnit()), "HammerSmashSound", null, null, null);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitDamageSourceUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Stunned2", EventUnitDamageSourceUnit(), 1);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Smash_Init () {
    gt_Smash = TriggerCreate("gt_Smash_Func");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "AncestralAxe");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "PsiBlades");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "WarpBlades");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "Zeratul");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "SmashernSlasherAvatar");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "SmashernSlasher");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "TaintedBladeDamage");
    TriggerAddEventUnitDamaged(gt_Smash, null, c_unitDamageTypeAny, c_unitDamageEither, "ThrashingBlades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taunt
//--------------------------------------------------------------------------------------------------
bool gt_Taunt_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 2.25), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitDamageSourceUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Taunt_Init () {
    gt_Taunt = TriggerCreate("gt_Taunt_Func");
    TriggerAddEventUnitDamaged(gt_Taunt, null, c_unitDamageTypeAny, c_unitDamageEither, "TauntGhoul");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Divine Strike
//--------------------------------------------------------------------------------------------------
bool gt_DivineStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_paladinintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_paladinintelmod = (UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard") * 0.03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 4.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitDamageSourceUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_paladinintelmod));
            ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "DivineStrikeVisualImpact", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "DivineStrikeSound", null, null, null);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DivineStrike_Init () {
    gt_DivineStrike = TriggerCreate("gt_DivineStrike_Func");
    TriggerAddEventUnitDamaged(gt_DivineStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "DivineStrike");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lesser Taunt
//--------------------------------------------------------------------------------------------------
bool gt_LesserTaunt_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.25), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 3));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitDamageSourceUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LesserTaunt_Init () {
    gt_LesserTaunt = TriggerCreate("gt_LesserTaunt_Func");
    TriggerAddEventUnitDamaged(gt_LesserTaunt, null, c_unitDamageTypeAny, c_unitDamageEither, "TauntAbomination");
    TriggerAddEventUnitDamaged(gt_LesserTaunt, null, c_unitDamageTypeAny, c_unitDamageEither, "TauntEarthElemental");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Beastmaster
//--------------------------------------------------------------------------------------------------
bool gt_AssignBeastmaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridReaver"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_beastmaster = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignBeastmaster_Init () {
    gt_AssignBeastmaster = TriggerCreate("gt_AssignBeastmaster_Func");
    TriggerAddEventUnitRegion(gt_AssignBeastmaster, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brutal Cleave
//--------------------------------------------------------------------------------------------------
bool gt_BrutalCleave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_movepoint;
    fixed lv_hp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_movepoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()));
    lv_hp = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.02);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.2);
    libNtve_gf_CreateActorAtPoint("BrutalCleaveModel", UnitGetPosition(EventUnit()));
    libNtve_gf_CreateActorAtPoint("BrutalCleaveSound", UnitGetPosition(EventUnit()));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - lv_hp));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitDamage(EventUnit(), "PsiBlades", UnitGroupLoopCurrent(), lv_hp);
        }

    }
    UnitGroupLoopEnd();
    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), lv_movepoint, true);
        lv_movepoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack 04", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.2);
        libNtve_gf_CreateActorAtPoint("BrutalCleaveModel", UnitGetPosition(EventUnit()));
        libNtve_gf_CreateActorAtPoint("BrutalCleaveSound", UnitGetPosition(EventUnit()));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - lv_hp));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnit(), "PsiBlades", UnitGroupLoopCurrent(), lv_hp);
            }

        }
        UnitGroupLoopEnd();
    }

    Wait(0.18, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), lv_movepoint, true);
        lv_movepoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.2);
        libNtve_gf_CreateActorAtPoint("BrutalCleaveModel", UnitGetPosition(EventUnit()));
        libNtve_gf_CreateActorAtPoint("BrutalCleaveSound", UnitGetPosition(EventUnit()));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - lv_hp));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnit(), "PsiBlades", UnitGroupLoopCurrent(), lv_hp);
            }

        }
        UnitGroupLoopEnd();
    }

    Wait(0.15, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), lv_movepoint, true);
        lv_movepoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack 04", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.25);
        libNtve_gf_CreateActorAtPoint("BrutalCleaveModel", UnitGetPosition(EventUnit()));
        libNtve_gf_CreateActorAtPoint("BrutalCleaveSound", UnitGetPosition(EventUnit()));
    }

    Wait(0.1, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), lv_movepoint, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - lv_hp));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.75), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnit(), "PsiBlades", UnitGroupLoopCurrent(), lv_hp);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrutalCleave_Init () {
    gt_BrutalCleave = TriggerCreate("gt_BrutalCleave_Func");
    TriggerAddEventUnitAbility(gt_BrutalCleave, null, AbilityCommand("Rank1BrutalCleave", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inner Beast
//--------------------------------------------------------------------------------------------------
bool gt_InnerBeast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroStrength;
    int lv_heroAgility;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroStrength = UnitBehaviorCount(EventUnit(), "StrengthStandard");
    lv_heroAgility = UnitBehaviorCount(EventUnit(), "AgiHeroAgility");
    UnitCreate(1, "SpiritWolf", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, UnitGetFacing(EventUnit())), UnitGetFacing(EventUnit()));
    UnitBehaviorAdd(UnitLastCreated(), "InnerBeastSTRModification", EventUnit(), lv_heroStrength);
    UnitBehaviorAdd(UnitLastCreated(), "InnerBeastAGIModification", EventUnit(), lv_heroAgility);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpiritWolfSpawn", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpiritWolfSpawnSound", null, null, null);
    UnitBehaviorAdd(UnitLastCreated(), "SpiritWolfTimedLife", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InnerBeast_Init () {
    gt_InnerBeast = TriggerCreate("gt_InnerBeast_Func");
    TriggerAddEventUnitAbility(gt_InnerBeast, null, AbilityCommand("Rank1InnerBeast", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beastmaster 0.5 Second Cast
//--------------------------------------------------------------------------------------------------
bool gt_Beastmaster05SecondCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Cast0p5", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beastmaster05SecondCast_Init () {
    gt_Beastmaster05SecondCast = TriggerCreate("gt_Beastmaster05SecondCast_Func");
    TriggerAddEventUnitAbility(gt_Beastmaster05SecondCast, null, AbilityCommand("Rank1InnerBeast", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Beastmaster05SecondCast, null, AbilityCommand("Rank1Warcry", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beastmaster 1 Second Cast
//--------------------------------------------------------------------------------------------------
bool gt_Beastmaster1SecondCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Cast1", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Beastmaster1SecondCast_Init () {
    gt_Beastmaster1SecondCast = TriggerCreate("gt_Beastmaster1SecondCast_Func");
    TriggerAddEventUnitAbility(gt_Beastmaster1SecondCast, null, AbilityCommand("Rank1Hysteria", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warcry
//--------------------------------------------------------------------------------------------------
bool gt_Warcry_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_strengthMod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_strengthMod = UnitBehaviorCount(EventUnit(), "StrengthStandard");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "WarcryLifeStacks", EventUnit(), lv_strengthMod);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Warcry_Init () {
    gt_Warcry = TriggerCreate("gt_Warcry_Func");
    TriggerAddEventUnitAbility(gt_Warcry, null, AbilityCommand("Rank1Warcry", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hatred
//--------------------------------------------------------------------------------------------------
bool gt_Hatred_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HybridReaver"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Hatred", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hatred_Init () {
    gt_Hatred = TriggerCreate("gt_Hatred_Func");
    TriggerAddEventUnitBehaviorChange(gt_Hatred, null, "HealthGlobeTriggered", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Blademaster
//--------------------------------------------------------------------------------------------------
bool gt_AssignBlademaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_blademaster = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignBlademaster_Init () {
    gt_AssignBlademaster = TriggerCreate("gt_AssignBlademaster_Func");
    TriggerAddEventUnitRegion(gt_AssignBlademaster, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ka'ze Leap Animation
//--------------------------------------------------------------------------------------------------
bool gt_KazeLeapAnimation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack Slam", 0, c_animTimeDefault);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 1.25);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    UnitBehaviorAdd(EventUnit(), "KazeLeapBuff", EventUnit(), 1);
    UnitSetHeight(EventUnit(), 1.0, 0.5);
    Wait(0.5, c_timeGame);
    UnitSetHeight(EventUnit(), 0.0, 0.1875);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KazeLeapAnimation_Init () {
    gt_KazeLeapAnimation = TriggerCreate("gt_KazeLeapAnimation_Func");
    TriggerAddEventUnitAbility(gt_KazeLeapAnimation, null, AbilityCommand("Rank1KazeLeap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ka'ze Leap Damage
//--------------------------------------------------------------------------------------------------
bool gt_KazeLeapDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_blademasteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_blademasteragimod = (UnitBehaviorCount(gv_blademaster, "AgiHeroAgility") * 0.85);
    UnitDamage(gv_blademaster, "TriggerDamageSpellNonBenefit", EventUnit(), lv_blademasteragimod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KazeLeapDamage_Init () {
    gt_KazeLeapDamage = TriggerCreate("gt_KazeLeapDamage_Func");
    TriggerAddEventUnitDamaged(gt_KazeLeapDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "KazeLeapDamageRefined");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aj'airu Strike
//--------------------------------------------------------------------------------------------------
bool gt_AjairuStrike_Func (bool testConds, bool runActions) {
    int autoE3FA8061_ae;
    int autoE3FA8061_ai;

    // Variable Declarations
    fixed lv_facingangle;
    point lv_movepoint;
    int lv_animaterng;
    fixed lv_ajairustrikerank;
    unit[13] lv_pickedblademaster;
    int lv_totalillusions;
    int lv_illusionpick;

    // Variable Initialization
    lv_ajairustrikerank = 0.25;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ajairuStrikeCounter += 1;
    lv_facingangle = UnitGetFacing(EventUnit());
    lv_animaterng = RandomInt(0, 2);
    if ((lv_animaterng == 0)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack Slam", 0, c_animTimeDefault);
    }
    else {
        if ((lv_animaterng == 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack", 0, c_animTimeDefault);
        }
        else {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack 02", 0, c_animTimeDefault);
        }
    }
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.5);
    lv_movepoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.25, UnitGetFacing(EventUnit()));
    UnitSetPosition(EventUnit(), lv_movepoint, true);
    if ((((lv_facingangle <= 112.5) && (lv_facingangle >= 67.5)) || ((lv_facingangle <= -67.5) && (lv_facingangle >= -112.5)))) {
        RegionSetCenter(RegionFromId(24), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, lv_facingangle));
        gv_ajairuStrike = RegionFromId(24);
        libNtve_gf_CreateActorAtPoint("AjairuStrikeModel", PointWithOffsetPolar(RegionGetCenter(gv_ajairuStrike), RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle()));
        libNtve_gf_CreateActorAtPoint("AjairuStrikeSound", RegionGetCenter(gv_ajairuStrike));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ajairuStrike, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), (UnitBehaviorCount(EventUnit(), "AgiHeroAgility") * lv_ajairustrikerank));
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Stunned025", EventUnit(), 1);
                lv_movepoint = PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 0.25, UnitGetFacing(EventUnit()));
                UnitSetPosition(UnitGroupLoopCurrent(), lv_movepoint, true);
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        if ((((lv_facingangle <= 22.5) && (lv_facingangle >= -22.5)) || ((lv_facingangle <= 180.0) && (lv_facingangle >= 157.5)) || ((lv_facingangle <= -157.5) && (lv_facingangle >= -180.0)))) {
            RegionSetCenter(RegionFromId(24), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, lv_facingangle));
            gv_ajairuStrike = RegionFromId(24);
            libNtve_gf_CreateActorAtPoint("AjairuStrikeModel", PointWithOffsetPolar(RegionGetCenter(gv_ajairuStrike), RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle()));
            libNtve_gf_CreateActorAtPoint("AjairuStrikeSound", RegionGetCenter(gv_ajairuStrike));
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ajairuStrike, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), (UnitBehaviorCount(EventUnit(), "AgiHeroAgility") * lv_ajairustrikerank));
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Stunned025", EventUnit(), 1);
                    lv_movepoint = PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 0.25, UnitGetFacing(EventUnit()));
                    UnitSetPosition(UnitGroupLoopCurrent(), lv_movepoint, true);
                }

            }
            UnitGroupLoopEnd();
        }
        else {
            if ((((lv_facingangle <= 180.0) && (lv_facingangle >= 90.0)) || ((lv_facingangle <= 0.0) && (lv_facingangle >= -90.0)))) {
                RegionSetCenter(RegionFromId(25), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, lv_facingangle));
                gv_ajairuStrike = RegionFromId(25);
                libNtve_gf_CreateActorAtPoint("AjairuStrikeModel", PointWithOffsetPolar(RegionGetCenter(gv_ajairuStrike), RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle()));
                libNtve_gf_CreateActorAtPoint("AjairuStrikeSound", RegionGetCenter(gv_ajairuStrike));
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ajairuStrike, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                        UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), (UnitBehaviorCount(EventUnit(), "AgiHeroAgility") * lv_ajairustrikerank));
                        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Stunned025", EventUnit(), 1);
                        lv_movepoint = PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 0.25, UnitGetFacing(EventUnit()));
                        UnitSetPosition(UnitGroupLoopCurrent(), lv_movepoint, true);
                    }

                }
                UnitGroupLoopEnd();
            }
            else {
                if ((((lv_facingangle <= -90.0) && (lv_facingangle >= -180.0)) || ((lv_facingangle <= 90.0) && (lv_facingangle >= 0.0)))) {
                    RegionSetCenter(RegionFromId(25), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, lv_facingangle));
                    gv_ajairuStrike = RegionFromId(25);
                    libNtve_gf_CreateActorAtPoint("AjairuStrikeModel", PointWithOffsetPolar(RegionGetCenter(gv_ajairuStrike), RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle()));
                    libNtve_gf_CreateActorAtPoint("AjairuStrikeSound", RegionGetCenter(gv_ajairuStrike));
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_ajairuStrike, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                            UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), (UnitBehaviorCount(EventUnit(), "AgiHeroAgility") * lv_ajairustrikerank));
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Stunned025", EventUnit(), 1);
                            lv_movepoint = PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 0.25, UnitGetFacing(EventUnit()));
                            UnitSetPosition(UnitGroupLoopCurrent(), lv_movepoint, true);
                        }

                    }
                    UnitGroupLoopEnd();
                }

            }
        }
    }
    Wait(0.1, c_timeGame);
    if ((gv_ajairuStrikeCounter == 3)) {
        if ((UnitHasBehavior(EventUnit(), "TatsumakiCooldown") == false)) {
            UnitBehaviorAdd(EventUnit(), "TatsumakiCooldown", EventUnit(), 1);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
            libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.5);
            libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(EventUnit()));
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), 0.0);
                    libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(UnitGroupLoopCurrent()));
                }

            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Zeratul", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HallucinationTimedLife") == true)) {
                    lv_pickedblademaster[lv_totalillusions] = UnitGroupLoopCurrent();
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "HideShadow", UnitGroupLoopCurrent(), 1);
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
                    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, 0.5);
                    libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(UnitGroupLoopCurrent()));
                    lv_totalillusions += 1;
                }

            }
            UnitGroupLoopEnd();
            if ((lv_totalillusions > 0)) {
                autoE3FA8061_ae = lv_totalillusions;
                autoE3FA8061_ai = 1;
                lv_illusionpick = 0;
                for ( ; ( (autoE3FA8061_ai >= 0 && lv_illusionpick <= autoE3FA8061_ae) || (autoE3FA8061_ai <= 0 && lv_illusionpick >= autoE3FA8061_ae) ) ; lv_illusionpick += autoE3FA8061_ai ) {
                    if ((lv_pickedblademaster[lv_illusionpick] != null)) {
                        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_pickedblademaster[lv_illusionpick]), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(lv_pickedblademaster[lv_illusionpick]), libNtve_ge_PlayerRelation_Enemy) == true)) {
                                UnitDamage(lv_pickedblademaster[lv_illusionpick], "Zeratul", UnitGroupLoopCurrent(), 0.0);
                                libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(lv_pickedblademaster[lv_illusionpick]));
                            }

                        }
                        UnitGroupLoopEnd();
                    }

                }
            }

            gv_ajairuStrikeCounter = 0;
        }
        else {
            gv_ajairuStrikeCounter = 0;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AjairuStrike_Init () {
    gt_AjairuStrike = TriggerCreate("gt_AjairuStrike_Func");
    TriggerAddEventUnitAbility(gt_AjairuStrike, null, AbilityCommand("AjairuStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gen'so Trick
//--------------------------------------------------------------------------------------------------
bool gt_GensoTrick_Func (bool testConds, bool runActions) {
    int auto5A4E86FB_ae;
    int auto5A4E86FB_ai;

    // Variable Declarations
    int lv_count;
    int lv_behaviorcount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_behaviorcount = UnitBehaviorCountAll(gv_hero[UnitGetOwner(EventUnit())]);
    auto5A4E86FB_ae = lv_behaviorcount;
    auto5A4E86FB_ai = 1;
    lv_count = 0;
    for ( ; ( (auto5A4E86FB_ai >= 0 && lv_count <= auto5A4E86FB_ae) || (auto5A4E86FB_ai <= 0 && lv_count >= auto5A4E86FB_ae) ) ; lv_count += auto5A4E86FB_ai ) {
        if (((UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "TomeofAgility") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "TomeofIntellect") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "TomeofStrength") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AdventurerBootsI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AdventurerBootsII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AdventurerBootsIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BattleAxeI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BattleAxeII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BattleAxeIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BerserkersMask") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EnchantedStaffI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EnchantedStaffII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EnchantedStaffIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "FootmanGauntletsI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "FootmanGauntletsII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "FootmanGauntletsIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GruntsBulwarkI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GruntsBulwarkII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GruntsBulwarkIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "InfernalCore") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "LostSheppardsStaff") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "LuckyPocketWatch") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "PaglesCoin") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "QuickswordI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "QuickswordII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "QuickswordIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ScoundrelsDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "Shield") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShieldII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShieldIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SkullTrinket") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SobiMask") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SpiritualNecklace") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "StrangeArtifact") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "WarHammerI") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "WarHammerII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "WarHammerIII") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "WirtsUnclesLegStatic"))) {
            UnitBehaviorAdd(EventUnitCreatedUnit(), UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count), EventUnitCreatedUnit(), UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count)));
        }

    }
    UnitGroupLoopBegin(UnitGroup("Zeratul", UnitGetOwner(EventUnit()), RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 2.5), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLevel, UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent));
        if ((UnitGroupLoopCurrent() != EventUnit())) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.15)), false);
            UnitXPGainEnable(UnitGroupLoopCurrent(), null, false);
        }
        else {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.15)), false);
        }
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent));
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive)), c_orderQueueReplace);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GensoTrick_Init () {
    gt_GensoTrick = TriggerCreate("gt_GensoTrick_Func");
    TriggerAddEventUnitCreated(gt_GensoTrick, null, "Rank1GensoTrick", null);
    TriggerAddEventUnitCreated(gt_GensoTrick, null, "TrickeryLevel2", null);
    TriggerAddEventUnitCreated(gt_GensoTrick, null, "TrickeryLevel3", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gen'so Death
//--------------------------------------------------------------------------------------------------
bool gt_GensoDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Hallucination") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateActorAtPoint("MirrorImageDeathModel", UnitGetPosition(EventUnit()));
    libNtve_gf_CreateActorAtPoint("MirrorImageDeathSound", UnitGetPosition(EventUnit()));
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GensoDeath_Init () {
    gt_GensoDeath = TriggerCreate("gt_GensoDeath_Func");
    TriggerAddEventUnitDied(gt_GensoDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tatsu'maki Stance Defend
//--------------------------------------------------------------------------------------------------
bool gt_TatsumakiStanceDefend_Func (bool testConds, bool runActions) {
    int auto6D40AE5F_ae;
    int auto6D40AE5F_ai;

    // Variable Declarations
    fixed lv_rng;
    unit[13] lv_pickedblademaster;
    int lv_totalillusions;
    int lv_illusionpick;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Hallucination") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomFixed(0.0, 100.0);
    if ((lv_rng <= 10.0) && (UnitHasBehavior(EventUnit(), "TatsumakiCooldown") == false)) {
        UnitBehaviorAdd(EventUnit(), "TatsumakiCooldown", EventUnit(), 1);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.5);
        libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(EventUnit()));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnit(), "Zeratul", UnitGroupLoopCurrent(), 0.0);
                libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(UnitGroupLoopCurrent()));
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Zeratul", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HallucinationTimedLife") == true)) {
                lv_pickedblademaster[lv_totalillusions] = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "HideShadow", UnitGroupLoopCurrent(), 1);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, 0.5);
                libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(UnitGroupLoopCurrent()));
                lv_totalillusions += 1;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_totalillusions > 0)) {
            auto6D40AE5F_ae = lv_totalillusions;
            auto6D40AE5F_ai = 1;
            lv_illusionpick = 0;
            for ( ; ( (auto6D40AE5F_ai >= 0 && lv_illusionpick <= auto6D40AE5F_ae) || (auto6D40AE5F_ai <= 0 && lv_illusionpick >= auto6D40AE5F_ae) ) ; lv_illusionpick += auto6D40AE5F_ai ) {
                if ((lv_pickedblademaster[lv_illusionpick] != null)) {
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_pickedblademaster[lv_illusionpick]), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(lv_pickedblademaster[lv_illusionpick]), libNtve_ge_PlayerRelation_Enemy) == true)) {
                            UnitDamage(lv_pickedblademaster[lv_illusionpick], "Zeratul", UnitGroupLoopCurrent(), 0.0);
                            libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(lv_pickedblademaster[lv_illusionpick]));
                        }

                    }
                    UnitGroupLoopEnd();
                }

            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TatsumakiStanceDefend_Init () {
    gt_TatsumakiStanceDefend = TriggerCreate("gt_TatsumakiStanceDefend_Func");
    TriggerAddEventUnitAttacked2(gt_TatsumakiStanceDefend, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tatsu'maki Stance Attack
//--------------------------------------------------------------------------------------------------
bool gt_TatsumakiStanceAttack_Func (bool testConds, bool runActions) {
    int auto0CCD6698_ae;
    int auto0CCD6698_ai;

    // Variable Declarations
    fixed lv_rng;
    unit[13] lv_pickedblademaster;
    int lv_totalillusions;
    int lv_illusionpick;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "Zeratul"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnitTarget(), "Hallucination") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomFixed(0.0, 100.0);
    if ((lv_rng <= 10.0) && (UnitHasBehavior(EventUnitTarget(), "TatsumakiCooldown") == false)) {
        UnitBehaviorAdd(EventUnitTarget(), "TatsumakiCooldown", EventUnitTarget(), 1);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnitTarget()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnitTarget()), c_animNameDefault, 0.5);
        libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(EventUnitTarget()));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnitTarget(), "Zeratul", UnitGroupLoopCurrent(), 0.0);
                libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(UnitGroupLoopCurrent()));
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Zeratul", UnitGetOwner(EventUnitTarget()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HallucinationTimedLife") == true)) {
                lv_pickedblademaster[lv_totalillusions] = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "HideShadow", UnitGroupLoopCurrent(), 1);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, "Attack Walk Stand Spin", 0, c_animTimeDefault);
                libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), c_animNameDefault, 0.5);
                libNtve_gf_CreateActorAtPoint("TatsuMakiStanceSound", UnitGetPosition(UnitGroupLoopCurrent()));
                lv_totalillusions += 1;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_totalillusions > 0)) {
            auto0CCD6698_ae = lv_totalillusions;
            auto0CCD6698_ai = 1;
            lv_illusionpick = 0;
            for ( ; ( (auto0CCD6698_ai >= 0 && lv_illusionpick <= auto0CCD6698_ae) || (auto0CCD6698_ai <= 0 && lv_illusionpick >= auto0CCD6698_ae) ) ; lv_illusionpick += auto0CCD6698_ai ) {
                if ((lv_pickedblademaster[lv_illusionpick] != null)) {
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_pickedblademaster[lv_illusionpick]), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(lv_pickedblademaster[lv_illusionpick]), libNtve_ge_PlayerRelation_Enemy) == true)) {
                            UnitDamage(lv_pickedblademaster[lv_illusionpick], "Zeratul", UnitGroupLoopCurrent(), 0.0);
                            libNtve_gf_CreateActorAtPoint("TatsuMakiStanceImpactSound", UnitGetPosition(lv_pickedblademaster[lv_illusionpick]));
                        }

                    }
                    UnitGroupLoopEnd();
                }

            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TatsumakiStanceAttack_Init () {
    gt_TatsumakiStanceAttack = TriggerCreate("gt_TatsumakiStanceAttack_Func");
    TriggerAddEventUnitAttacked2(gt_TatsumakiStanceAttack, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Bloodmage
//--------------------------------------------------------------------------------------------------
bool gt_AssignBloodmage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidHerald"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bloodmage = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignBloodmage_Init () {
    gt_AssignBloodmage = TriggerCreate("gt_AssignBloodmage_Func");
    TriggerAddEventUnitRegion(gt_AssignBloodmage, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hemorrhage Damage
//--------------------------------------------------------------------------------------------------
bool gt_HemorrhageDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bmintelmod;
    fixed lv_hp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bmintelmod = (UnitBehaviorCount(gv_bloodmage, "IntHeroIntellectBloodmage") * 0.15);
    lv_hp = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.05);
    lv_bmintelmod += lv_hp;
    UnitDamage(gv_bloodmage, "TriggerDamageSpellNonBenefit", EventUnit(), lv_bmintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HemorrhageDamage_Init () {
    gt_HemorrhageDamage = TriggerCreate("gt_HemorrhageDamage_Func");
    TriggerAddEventUnitDamaged(gt_HemorrhageDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "HemorrhageDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hemorrhage DoT Damage
//--------------------------------------------------------------------------------------------------
bool gt_HemorrhageDoTDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bmintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bmintelmod = (UnitBehaviorCount(gv_bloodmage, "IntHeroIntellectBloodmage") * 0.01);
    UnitDamage(gv_bloodmage, "TriggerDamageSpellNonBenefit", EventUnit(), lv_bmintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HemorrhageDoTDamage_Init () {
    gt_HemorrhageDoTDamage = TriggerCreate("gt_HemorrhageDoTDamage_Func");
    TriggerAddEventUnitDamaged(gt_HemorrhageDoTDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "HemorrhageDoT");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hemorrhage Cast
//--------------------------------------------------------------------------------------------------
bool gt_HemorrhageCast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hemorrhagedamage = UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifeMax, c_unitPropCurrent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HemorrhageCast_Init () {
    gt_HemorrhageCast = TriggerCreate("gt_HemorrhageCast_Func");
    TriggerAddEventUnitAbility(gt_HemorrhageCast, null, AbilityCommand("Rank1Hemorrhage", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hemorrhage
//--------------------------------------------------------------------------------------------------
bool gt_Hemorrhage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnitTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hemorrhage_Init () {
    gt_Hemorrhage = TriggerCreate("gt_Hemorrhage_Func");
    TriggerAddEventUnitAbility(gt_Hemorrhage, null, AbilityCommand("Rank1Hemorrhage", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Elemental Hemorrhage
//--------------------------------------------------------------------------------------------------
bool gt_BloodElementalHemorrhage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bloodelementallifemod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bloodelementallifemod = (gv_hemorrhagedamage * 0.35);
    UnitDamage(gv_bloodmage, "TriggerDamageSpellNonBenefit", EventUnit(), lv_bloodelementallifemod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodElementalHemorrhage_Init () {
    gt_BloodElementalHemorrhage = TriggerCreate("gt_BloodElementalHemorrhage_Func");
    TriggerAddEventUnitDamaged(gt_BloodElementalHemorrhage, null, c_unitDamageTypeAny, c_unitDamageEither, "HemorrhageAoEDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Elemental Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BloodElementalSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_hp;
    int lv_inthp;
    int lv_intelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hp = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.15);
    lv_inthp = FixedToInt(lv_hp);
    lv_intelmod = UnitBehaviorCount(gv_bloodmage, "IntHeroIntellectBloodmage");
    UnitBehaviorAdd(EventUnitCreatedUnit(), "BloodElementalModification", gv_bloodmage, lv_intelmod);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "BloodElementalTimedLife", gv_bloodmage, 1);
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, c_unitPropCurrent) + lv_inthp));
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, c_unitPropCurrent) + lv_inthp));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodElementalSpawn_Init () {
    gt_BloodElementalSpawn = TriggerCreate("gt_BloodElementalSpawn_Func");
    TriggerAddEventUnitCreated(gt_BloodElementalSpawn, null, "Rank1SummonBloodElemental", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Elemental Damage
//--------------------------------------------------------------------------------------------------
bool gt_BloodElementalDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_hp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hp = (UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLifeMax, c_unitPropCurrent) * 0.05);
    UnitSetPropertyFixed(EventUnitTarget(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLife, c_unitPropCurrent) - lv_hp));
    UnitDamage(EventUnitTarget(), "AttributeModifiedDamage0", EventUnit(), (lv_hp + 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodElementalDamage_Init () {
    gt_BloodElementalDamage = TriggerCreate("gt_BloodElementalDamage_Func");
    TriggerAddEventUnitAttacked2(gt_BloodElementalDamage, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Elemental Size
//--------------------------------------------------------------------------------------------------
bool gt_BloodElementalSize_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 45.0)) {
        UnitSetScale(EventUnit(), UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent), UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent), UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodElementalSize_Init () {
    gt_BloodElementalSize = TriggerCreate("gt_BloodElementalSize_Func");
    TriggerAddEventUnitProperty(gt_BloodElementalSize, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Elemental Globe Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BloodElementalGlobeSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_healthglobeodds;

    // Variable Initialization
    lv_healthglobeodds = 20.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomFixed(0.0, 100.0) <= lv_healthglobeodds)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupHealthFull", 0, 0, UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodElementalGlobeSpawn_Init () {
    gt_BloodElementalGlobeSpawn = TriggerCreate("gt_BloodElementalGlobeSpawn_Func");
    TriggerAddEventUnitDamaged(gt_BloodElementalGlobeSpawn, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ocean of Blood Start
//--------------------------------------------------------------------------------------------------
bool gt_OceanofBloodStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facingangle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_facingangle = UnitGetFacing(EventUnit());
    gv_oceanofbloodcaster = EventUnit();
    if ((((lv_facingangle <= 112.5) && (lv_facingangle >= 67.5)) || ((lv_facingangle <= -67.5) && (lv_facingangle >= -112.5)))) {
        RegionSetCenter(RegionFromId(2), UnitGetPosition(EventUnit()));
        gv_oceanofblood = RegionFromId(2);
    }
    else {
        if ((((lv_facingangle <= 22.5) && (lv_facingangle >= -22.5)) || ((lv_facingangle <= 180.0) && (lv_facingangle >= 157.5)) || ((lv_facingangle <= -157.5) && (lv_facingangle >= -180.0)))) {
            RegionSetCenter(RegionFromId(12), UnitGetPosition(EventUnit()));
            gv_oceanofblood = RegionFromId(12);
        }
        else {
            if ((((lv_facingangle <= 180.0) && (lv_facingangle >= 90.0)) || ((lv_facingangle <= 0.0) && (lv_facingangle >= -90.0)))) {
                RegionSetCenter(RegionFromId(14), UnitGetPosition(EventUnit()));
                gv_oceanofblood = RegionFromId(14);
            }
            else {
                if ((((lv_facingangle <= -90.0) && (lv_facingangle >= -180.0)) || ((lv_facingangle <= 90.0) && (lv_facingangle >= 0.0)))) {
                    RegionSetCenter(RegionFromId(13), UnitGetPosition(EventUnit()));
                    gv_oceanofblood = RegionFromId(13);
                }

            }
        }
    }
    TriggerEnable(gt_OceanofBloodChanneling, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OceanofBloodStart_Init () {
    gt_OceanofBloodStart = TriggerCreate("gt_OceanofBloodStart_Func");
    TriggerAddEventUnitAbility(gt_OceanofBloodStart, null, AbilityCommand("Rank1OceanofBlood", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ocean of Blood Channeling
//--------------------------------------------------------------------------------------------------
bool gt_OceanofBloodChanneling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_hp;
    fixed lv_bmintmod;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidHerald"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_oceanofbloodcaster, "CastingOceanofBlood") == true)) {
        lv_bmintmod = (UnitBehaviorCount(gv_bloodmage, "IntHeroIntellectBloodmage") * 0.5);
        lv_hp = (UnitGetPropertyFixed(gv_oceanofbloodcaster, c_unitPropLifeMax, c_unitPropCurrent) * 0.04);
        lv_bmintmod += lv_hp;
        UnitSetPropertyFixed(gv_oceanofbloodcaster, c_unitPropLife, (UnitGetPropertyFixed(gv_oceanofbloodcaster, c_unitPropLife, c_unitPropCurrent) - lv_hp));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitCreateEffectPoint(gv_oceanofbloodcaster, "OceanofBloodSearchArea", RegionRandomPoint(gv_oceanofblood));
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, gv_oceanofblood, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(gv_oceanofbloodcaster), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(gv_oceanofbloodcaster, "OceanofBloodDamage2", UnitGroupLoopCurrent(), lv_bmintmod);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "OceanofBlood", gv_oceanofbloodcaster, 1);
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        TriggerEnable(gt_OceanofBloodChanneling, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OceanofBloodChanneling_Init () {
    gt_OceanofBloodChanneling = TriggerCreate("gt_OceanofBloodChanneling_Func");
    TriggerEnable(gt_OceanofBloodChanneling, false);
    TriggerAddEventUnitBehaviorChange(gt_OceanofBloodChanneling, null, "CastingOceanofBlood", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bloodsurge Caster
//--------------------------------------------------------------------------------------------------
bool gt_BloodsurgeCaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bmhealthmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bmhealthmod = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.35);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_bmhealthmod));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodsurgeCaster_Init () {
    gt_BloodsurgeCaster = TriggerCreate("gt_BloodsurgeCaster_Func");
    TriggerAddEventUnitAbility(gt_BloodsurgeCaster, null, AbilityCommand("Rank1Bloodsurge", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bloodsurge Allies
//--------------------------------------------------------------------------------------------------
bool gt_BloodsurgeAllies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_bmhealthmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bmhealthmod = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.35);
    lv_bmhealthmod *= 0.25;
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_bmhealthmod));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BloodsurgeAllies_Init () {
    gt_BloodsurgeAllies = TriggerCreate("gt_BloodsurgeAllies_Func");
    TriggerAddEventUnitDamaged(gt_BloodsurgeAllies, null, c_unitDamageTypeAny, c_unitDamageEither, "BloodsurgeImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Death Knight
//--------------------------------------------------------------------------------------------------
bool gt_AssignDeathKnight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DeathKnight"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathKnight = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignDeathKnight_Init () {
    gt_AssignDeathKnight = TriggerCreate("gt_AssignDeathKnight_Func");
    TriggerAddEventUnitRegion(gt_AssignDeathKnight, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death's Calling
//--------------------------------------------------------------------------------------------------
bool gt_DeathsCalling_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DeathKnight"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + ((UnitBehaviorCount(EventUnit(), "IntellectDeathKnight") * 0.02) + 5.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathsCalling_Init () {
    gt_DeathsCalling = TriggerCreate("gt_DeathsCalling_Func");
    TriggerAddEventUnitBehaviorChange(gt_DeathsCalling, null, "DeathsFavor", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_DeathsCalling, null, "DeathsFavor", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death's Calling Damage
//--------------------------------------------------------------------------------------------------
bool gt_DeathsCallingDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_deathknightintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deathknightintelmod = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "IntellectDeathKnight") * 0.09);
    UnitDamage(EventUnitDamageSourceUnit(), "DeathsCallingAuraAdjustedDamageDamage", EventUnit(), lv_deathknightintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathsCallingDamage_Init () {
    gt_DeathsCallingDamage = TriggerCreate("gt_DeathsCallingDamage_Func");
    TriggerAddEventUnitDamaged(gt_DeathsCallingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "DeathsCallingAuraDamageDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghoul Army
//--------------------------------------------------------------------------------------------------
bool gt_GhoulArmy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_darkManaSpent;
    int lv_darkManaSpentToInt;
    int lv_heroStrength;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        lv_heroStrength = UnitBehaviorCount(EventUnit(), "StrHeroStrengthStandard");
        lv_darkManaSpent = UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 50.0));
        lv_darkManaSpent = (lv_darkManaSpent - UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent));
        lv_darkManaSpentToInt = FixedToInt(lv_darkManaSpent);
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(85.0, 95.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(150.0, 160.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(20.0, 30.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(-30.0, -20.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(-95.0, -85.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    Wait(0.2, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnBreakGround", null, null, null);
        UnitCreate(1, "Ghoul", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(2.0, 2.5), RandomFixed(-160.0, -150.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_darkManaSpentToInt);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSound", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "GhoulSpawnSoundFinish", null, null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhoulArmy_Init () {
    gt_GhoulArmy = TriggerCreate("gt_GhoulArmy_Func");
    TriggerAddEventUnitAbility(gt_GhoulArmy, null, AbilityCommand("RisenGhouls", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blade of Zeal Charge
//--------------------------------------------------------------------------------------------------
bool gt_BladeofZealCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_darkManaSpent;
    int lv_darkManaSpentToInt;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_darkManaSpent = UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent);
    ActorCreate(ActorScopeFromUnit(EventUnit()), "BladeofZealApply", null, null, null);
    if ((lv_darkManaSpent < 1)) {
        lv_darkManaSpent = 0.0;
        lv_darkManaSpentToInt = FixedToInt(lv_darkManaSpent);
        gv_bladeofZealCost = lv_darkManaSpentToInt;
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 20.0));
        lv_darkManaSpent = (lv_darkManaSpent - UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent));
        lv_darkManaSpentToInt = FixedToInt(lv_darkManaSpent);
        gv_bladeofZealCost = lv_darkManaSpentToInt;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BladeofZealCharge_Init () {
    gt_BladeofZealCharge = TriggerCreate("gt_BladeofZealCharge_Func");
    TriggerAddEventUnitAbility(gt_BladeofZealCharge, null, AbilityCommand("Rank1BladeofZeal", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blade of Zeal
//--------------------------------------------------------------------------------------------------
bool gt_BladeofZeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_heroIntel;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "DeathKnight"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnitTarget(), "Rank1BladeofSouls") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIntel = UnitBehaviorCount(EventUnitTarget(), "IntellectDeathKnight");
    if ((gv_bladeofZealCost < 1)) {
        UnitSetPropertyFixed(EventUnitTarget(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTarget(), c_unitPropEnergy, c_unitPropCurrent) + (lv_heroIntel * 0.5)));
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "BladeofZealRecoverVisual", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "BladeofZealRecoverSound", null, null, null);
        UnitBehaviorRemove(EventUnitTarget(), "Rank1BladeofSouls", 1);
    }
    else {
        UnitCreateEffectUnit(EventUnitTarget(), "BladeofZealSearch", EventUnit());
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                lv_heroIntel = (lv_heroIntel * 0.25);
                lv_heroIntel += (gv_bladeofZealCost * 4.0);
                UnitDamage(EventUnitTarget(), "TriggerDamageSpellNonBenefit", UnitGroupLoopCurrent(), lv_heroIntel);
            }

        }
        UnitGroupLoopEnd();
        ActorCreate(ActorScopeFromUnit(EventUnit()), "BladeofZealDamageSound", null, null, null);
        UnitBehaviorRemove(EventUnitTarget(), "Rank1BladeofSouls", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BladeofZeal_Init () {
    gt_BladeofZeal = TriggerCreate("gt_BladeofZeal_Func");
    TriggerAddEventUnitAttacked2(gt_BladeofZeal, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unholy Pact Transform
//--------------------------------------------------------------------------------------------------
bool gt_UnholyPactTransform_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stacksofGhoulSTR;
    int lv_stacksofGhoulMana;
    fixed lv_ghoulFacingAngle;
    point lv_ghoulPosition;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stacksofGhoulMana = UnitBehaviorCount(EventUnit(), "Rank1GhoulModificationsMana");
    lv_stacksofGhoulSTR = UnitBehaviorCount(EventUnit(), "Rank1GhoulModificationsSTR");
    lv_stacksofGhoulMana = FixedToInt((lv_stacksofGhoulMana * 2.0));
    lv_stacksofGhoulSTR = FixedToInt((lv_stacksofGhoulSTR * 2.0));
    libNtve_gf_ReplaceUnit(EventUnit(), "PrimalRoach", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UnholyInfusionVisualFinish", null, null, null);
    UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsSTR", EventUnit(), lv_stacksofGhoulSTR);
    UnitBehaviorAdd(UnitLastCreated(), "Rank1GhoulModificationsMana", EventUnit(), lv_stacksofGhoulMana);
    UnitBehaviorAdd(UnitLastCreated(), "GhoulTimedLife", EventUnit(), 1);
    UnitBehaviorSetDuration(UnitLastCreated(), "GhoulTimedLife", 180.0);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UnholyInfusionSoundFinish", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UnholyInfusionSoundFinish2", null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnholyPactTransform_Init () {
    gt_UnholyPactTransform = TriggerCreate("gt_UnholyPactTransform_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnholyPactTransform, null, "UnholyInfusionTransformation", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unholy Pact Activate
//--------------------------------------------------------------------------------------------------
bool gt_UnholyPactActivate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Death", 0, c_animTimeDefault);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 2.0);
    SoundPlayAtPointForPlayer(SoundLink("Ghoul_Death", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnholyPactActivate_Init () {
    gt_UnholyPactActivate = TriggerCreate("gt_UnholyPactActivate_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnholyPactActivate, null, "UnholyInfusionTransformation", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Plague Cast
//--------------------------------------------------------------------------------------------------
bool gt_DeathPlagueCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_deathKnight = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathPlagueCast_Init () {
    gt_DeathPlagueCast = TriggerCreate("gt_DeathPlagueCast_Func");
    TriggerAddEventUnitAbility(gt_DeathPlagueCast, null, AbilityCommand("Rank1DeathPlague", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Plague Damage
//--------------------------------------------------------------------------------------------------
bool gt_DeathPlagueDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_deathknightintmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deathknightintmod = (UnitBehaviorCount(gv_deathKnight, "IntellectDeathKnight") * 0.25);
    UnitDamage(gv_deathKnight, "TriggerDamageSpellNonBenefit", EventUnit(), lv_deathknightintmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathPlagueDamage_Init () {
    gt_DeathPlagueDamage = TriggerCreate("gt_DeathPlagueDamage_Func");
    TriggerAddEventUnitDamaged(gt_DeathPlagueDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "DeathPlagueDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghoul Dies
//--------------------------------------------------------------------------------------------------
bool gt_GhoulDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Ghoul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "DeathsCallingEnergySearch", gv_deathKnight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhoulDies_Init () {
    gt_GhoulDies = TriggerCreate("gt_GhoulDies_Func");
    TriggerAddEventUnitDied(gt_GhoulDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Demon Hunter
//--------------------------------------------------------------------------------------------------
bool gt_AssignDemonHunter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_demonHunter = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignDemonHunter_Init () {
    gt_AssignDemonHunter = TriggerCreate("gt_AssignDemonHunter_Func");
    TriggerAddEventUnitRegion(gt_AssignDemonHunter, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soul Quietus
//--------------------------------------------------------------------------------------------------
bool gt_SoulQuietus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "Zealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnitTarget(), "DemonWithinRank1") == false)) {
        UnitSetPropertyFixed(EventUnitTarget(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTarget(), c_unitPropEnergy, c_unitPropCurrent) + ((UnitBehaviorCount(EventUnit(), "IntellectDemonHunter") * 0.02) + 4.5)));
    }

    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus1") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus2") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus3") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus4") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus5") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus6") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus7") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus8") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus9") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus10") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus11") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus12") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus13") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus14") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus15") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus16") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus17") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus18") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus19") == false) && (UnitHasBehavior(EventUnitTarget(), "SoulQuietus20") == false)) {
        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus1", EventUnitTarget(), 1);
    }
    else {
        if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus1") == true)) {
            UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus1", 1);
            UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus2", EventUnitTarget(), 1);
        }
        else {
            if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus2") == true)) {
                UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus2", 1);
                UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus3", EventUnitTarget(), 1);
            }
            else {
                if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus3") == true)) {
                    UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus3", 1);
                    UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus4", EventUnitTarget(), 1);
                }
                else {
                    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus4") == true)) {
                        UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus4", 1);
                        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus5", EventUnitTarget(), 1);
                    }
                    else {
                        if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus5") == true)) {
                            UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus5", 1);
                            UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus6", EventUnitTarget(), 1);
                        }
                        else {
                            if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus6") == true)) {
                                UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus6", 1);
                                UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus7", EventUnitTarget(), 1);
                            }
                            else {
                                if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus7") == true)) {
                                    UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus7", 1);
                                    UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus8", EventUnitTarget(), 1);
                                }
                                else {
                                    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus8") == true)) {
                                        UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus8", 1);
                                        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus9", EventUnitTarget(), 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus9") == true)) {
                                            UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus9", 1);
                                            UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus10", EventUnitTarget(), 1);
                                        }
                                        else {
                                            if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus10") == true)) {
                                                UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus10", 1);
                                                UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus11", EventUnitTarget(), 1);
                                            }
                                            else {
                                                if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus11") == true)) {
                                                    UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus11", 1);
                                                    UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus12", EventUnitTarget(), 1);
                                                }
                                                else {
                                                    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus12") == true)) {
                                                        UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus12", 1);
                                                        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus13", EventUnitTarget(), 1);
                                                    }
                                                    else {
                                                        if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus13") == true)) {
                                                            UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus13", 1);
                                                            UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus14", EventUnitTarget(), 1);
                                                        }
                                                        else {
                                                            if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus14") == true)) {
                                                                UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus14", 1);
                                                                UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus15", EventUnitTarget(), 1);
                                                            }
                                                            else {
                                                                if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus15") == true)) {
                                                                    UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus15", 1);
                                                                    UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus16", EventUnitTarget(), 1);
                                                                }
                                                                else {
                                                                    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus16") == true)) {
                                                                        UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus16", 1);
                                                                        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus17", EventUnitTarget(), 1);
                                                                    }
                                                                    else {
                                                                        if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus17") == true)) {
                                                                            UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus17", 1);
                                                                            UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus18", EventUnitTarget(), 1);
                                                                        }
                                                                        else {
                                                                            if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus18") == true)) {
                                                                                UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus18", 1);
                                                                                UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus19", EventUnitTarget(), 1);
                                                                            }
                                                                            else {
                                                                                if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus19") == true)) {
                                                                                    UnitBehaviorRemove(EventUnitTarget(), "SoulQuietus19", 1);
                                                                                    UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus20", EventUnitTarget(), 1);
                                                                                }
                                                                                else {
                                                                                    if ((UnitHasBehavior(EventUnitTarget(), "SoulQuietus20") == true)) {
                                                                                        UnitBehaviorAdd(EventUnitTarget(), "SoulQuietus20", EventUnitTarget(), 1);
                                                                                    }

                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoulQuietus_Init () {
    gt_SoulQuietus = TriggerCreate("gt_SoulQuietus_Func");
    TriggerAddEventUnitAttacked2(gt_SoulQuietus, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relinquish Start
//--------------------------------------------------------------------------------------------------
bool gt_RelinquishStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + 52.5));
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("Rank1DemonWithin", 0)), c_orderQueueReplace);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + 150.0));
    UnitBehaviorRemove(EventUnit(), "SoulQuietus1", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus2", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus3", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus4", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus5", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus6", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus7", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus8", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus9", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus10", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus11", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus12", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus13", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus14", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus15", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus16", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus17", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus18", 1);
    UnitBehaviorRemove(EventUnit(), "SoulQuietus19", 1);
    UnitBehaviorAdd(EventUnit(), "SoulQuietus20", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelinquishStart_Init () {
    gt_RelinquishStart = TriggerCreate("gt_RelinquishStart_Func");
    TriggerAddEventUnitAbility(gt_RelinquishStart, null, AbilityCommand("Rank1Relinquish", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Relinquish Finish
//--------------------------------------------------------------------------------------------------
bool gt_RelinquishFinish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), AbilityCommand("Rank1DemonWithin", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("Rank1Incubus", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("Rank1Hellfire", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RelinquishFinish_Init () {
    gt_RelinquishFinish = TriggerCreate("gt_RelinquishFinish_Func");
    TriggerAddEventUnitAbility(gt_RelinquishFinish, null, AbilityCommand("Rank1Relinquish", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellfire Burst Damage
//--------------------------------------------------------------------------------------------------
bool gt_HellfireBurstDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_demonhunteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_demonHunter = EventUnit();
    lv_demonhunteragimod = (UnitBehaviorCount(EventUnit(), "AgiHeroAgility") * 0.3);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitDamage(EventUnit(), "TriggerDamageSpellNonBenefit", UnitGroupLoopCurrent(), lv_demonhunteragimod);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellfireBurstDamage_Init () {
    gt_HellfireBurstDamage = TriggerCreate("gt_HellfireBurstDamage_Func");
    TriggerAddEventUnitAbility(gt_HellfireBurstDamage, null, AbilityCommand("Rank1Hellfire", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellfire Burn Damage
//--------------------------------------------------------------------------------------------------
bool gt_HellfireBurnDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_demonhunteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demonhunteragimod = (UnitBehaviorCount(gv_demonHunter, "AgiHeroAgility") * 0.08);
    UnitDamage(gv_demonHunter, "TriggerDamageSpellNonBenefit", EventUnit(), lv_demonhunteragimod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellfireBurnDamage_Init () {
    gt_HellfireBurnDamage = TriggerCreate("gt_HellfireBurnDamage_Func");
    TriggerAddEventUnitDamaged(gt_HellfireBurnDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "HellfireDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incubus DoT Damage
//--------------------------------------------------------------------------------------------------
bool gt_IncubusDoTDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_demonhunteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demonhunteragimod = (UnitBehaviorCount(gv_demonHunter, "AgiHeroAgility") * 0.05);
    UnitDamage(gv_demonHunter, "TriggerDamageSpellNonBenefit", EventUnit(), lv_demonhunteragimod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncubusDoTDamage_Init () {
    gt_IncubusDoTDamage = TriggerCreate("gt_IncubusDoTDamage_Func");
    TriggerAddEventUnitDamaged(gt_IncubusDoTDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "Rank1IncubusDoT");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incubus Initial Damage
//--------------------------------------------------------------------------------------------------
bool gt_IncubusInitialDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_demonhunteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demonhunteragimod = (UnitBehaviorCount(gv_demonHunter, "AgiHeroAgility") * 0.7);
    UnitDamage(gv_demonHunter, "TriggerDamageSpellNonBenefit", EventUnit(), lv_demonhunteragimod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncubusInitialDamage_Init () {
    gt_IncubusInitialDamage = TriggerCreate("gt_IncubusInitialDamage_Func");
    TriggerAddEventUnitDamaged(gt_IncubusInitialDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "Rank1IncubusInitialDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incubus Explode Damage
//--------------------------------------------------------------------------------------------------
bool gt_IncubusExplodeDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_demonhunteragimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demonhunteragimod = (UnitBehaviorCount(gv_demonHunter, "AgiHeroAgility") * 0.3);
    UnitDamage(gv_demonHunter, "TriggerDamageSpellNonBenefit", EventUnit(), lv_demonhunteragimod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncubusExplodeDamage_Init () {
    gt_IncubusExplodeDamage = TriggerCreate("gt_IncubusExplodeDamage_Func");
    TriggerAddEventUnitDamaged(gt_IncubusExplodeDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "Rank1IncubusExplodeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampiric Heal
//--------------------------------------------------------------------------------------------------
bool gt_VampiricHeal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitTarget(), "TasteforBloodEffect") == true) || (UnitHasBehavior2(EventUnitTarget(), "BerserkersMask") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "TasteforBloodVisual", null, null, null);
    ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "TasteforBloodSound", null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampiricHeal_Init () {
    gt_VampiricHeal = TriggerCreate("gt_VampiricHeal_Func");
    TriggerAddEventUnitAttacked2(gt_VampiricHeal, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Dreadlord
//--------------------------------------------------------------------------------------------------
bool gt_AssignDreadlord_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dreadlord = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignDreadlord_Init () {
    gt_AssignDreadlord = TriggerCreate("gt_AssignDreadlord_Func");
    TriggerAddEventUnitRegion(gt_AssignDreadlord, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bloodfeast
//--------------------------------------------------------------------------------------------------
bool gt_Bloodfeast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_damagedealt;
    fixed lv_dlstrmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dlstrmod = (UnitBehaviorCount(gv_dreadlord, "StrHeroStrengthStandard") * 1.25);
    lv_distance = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit()));
    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) >= 1.5)) {
        ActorCreate(ActorScopeFromUnit(EventUnit()), "BloodfeastSoundCaster", null, null, null);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Death", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 1.0);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) - 1.0), UnitGetFacing(EventUnit()))), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "Bloodfeast", EventUnit(), 1);
        UnitSetHeight(EventUnit(), 1.0, (lv_distance * 0.04));
        Wait((lv_distance * 0.06), c_timeGame);
        UnitCreateEffectUnit(EventUnit(), "BloodfeastApplyBehavior", EventUnitTargetUnit());
        UnitDamage(EventUnit(), "BloodfeastDamage", EventUnitTargetUnit(), lv_dlstrmod);
        lv_damagedealt = lv_dlstrmod;
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (lv_damagedealt * 0.35)));
        libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault);
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "BloodfeastImpact", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnit()), "BloodfeastImpactCaster", null, null, null);
        UnitSetHeight(EventUnit(), 0.0, 0.1875);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand 03", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.5);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Stand 03", 0, c_animTimeDefault);
        libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.5);
        UnitCreateEffectUnit(EventUnit(), "BloodfeastApplyBehavior", EventUnitTargetUnit());
        UnitDamage(EventUnit(), "BloodfeastDamage", EventUnitTargetUnit(), lv_dlstrmod);
        lv_damagedealt = lv_dlstrmod;
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (lv_damagedealt * 0.35)));
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "BloodfeastImpact", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnit()), "BloodfeastImpactCaster", null, null, null);
    }
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bloodfeast_Init () {
    gt_Bloodfeast = TriggerCreate("gt_Bloodfeast_Func");
    TriggerAddEventUnitAbility(gt_Bloodfeast, null, AbilityCommand("Rank1Bloodfeast", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ominous Gaze
//--------------------------------------------------------------------------------------------------
bool gt_OminousGaze_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Spell Slam", 0, 0.0);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 0.75);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OminousGaze_Init () {
    gt_OminousGaze = TriggerCreate("gt_OminousGaze_Func");
    TriggerAddEventUnitAbility(gt_OminousGaze, null, AbilityCommand("Rank1OminousGaze", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadowshift
//--------------------------------------------------------------------------------------------------
bool gt_Shadowshift_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 3.5, UnitGetFacing(EventUnit()))), c_orderQueueReplace);
    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    UnitBehaviorAdd(EventUnit(), "ShadowshiftCaster", EventUnit(), 1);
    Wait(0.1, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Attack 00", 0, c_animTimeDefault);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, 1.0);
    UnitBehaviorAdd(EventUnit(), "ShadowsVeil", EventUnit(), 1);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shadowshift_Init () {
    gt_Shadowshift = TriggerCreate("gt_Shadowshift_Func");
    TriggerAddEventUnitAbility(gt_Shadowshift, null, AbilityCommand("Rank1Shadowshift", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadowshift Damage
//--------------------------------------------------------------------------------------------------
bool gt_ShadowshiftDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_dlstrmod;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ShadowshiftDummyBuff") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dlstrmod = (UnitBehaviorCount(gv_dreadlord, "StrHeroStrengthStandard") * 0.6);
    UnitDamage(gv_dreadlord, "TriggerDamageSpellNonBenefit", EventUnit(), lv_dlstrmod);
    UnitBehaviorAdd(EventUnit(), "ShadowshiftDummyBuff", gv_dreadlord, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowshiftDamage_Init () {
    gt_ShadowshiftDamage = TriggerCreate("gt_ShadowshiftDamage_Func");
    TriggerAddEventUnitDamaged(gt_ShadowshiftDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "ShadowshiftDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Sound Dread Lord
//--------------------------------------------------------------------------------------------------
bool gt_StopSoundDreadLord_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StopSoundDreadLord_Init () {
    gt_StopSoundDreadLord = TriggerCreate("gt_StopSoundDreadLord_Func");
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Shadowshift", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Bloodfeast", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Shadowshift", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Bloodfeast", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Shadowshift", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Bloodfeast", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Shadowshift", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_StopSoundDreadLord, null, AbilityCommand("Rank1Bloodfeast", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampiric Ritual Orb Spawn
//--------------------------------------------------------------------------------------------------
bool gt_VampiricRitualOrbSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "VampiricRitualOrb", c_unitCreateIgnorePlacement, 1, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, UnitGetFacing(EventUnit())), libNtve_gf_RandomAngle());
    gv_createdRitualOrb = UnitLastCreated();
    UnitCreateEffectUnit(EventUnit(), "GravitonBeam", gv_createdRitualOrb);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_createdRitualOrb), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitCreateEffectUnit(gv_createdRitualOrb, "GravitonBeam", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampiricRitualOrbSpawn_Init () {
    gt_VampiricRitualOrbSpawn = TriggerCreate("gt_VampiricRitualOrbSpawn_Func");
    TriggerAddEventUnitBehaviorChange(gt_VampiricRitualOrbSpawn, null, "CastingVampiricRitual", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Channel Orb
//--------------------------------------------------------------------------------------------------
bool gt_ChannelOrb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_damage;
    fixed lv_multiplier;

    // Variable Initialization
    lv_multiplier = 0.3;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CastingVampiricRitual") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.09)));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_createdRitualOrb), 8.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "GravitonBeam") == true)) {
            UnitDamage(EventUnit(), "Rank1VampiricRitualDamage", UnitGroupLoopCurrent(), (lv_damage + (UnitBehaviorCount(EventUnit(), "StrHeroStrengthStandard") * lv_multiplier)));
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 0.005)));
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChannelOrb_Init () {
    gt_ChannelOrb = TriggerCreate("gt_ChannelOrb_Func");
    TriggerAddEventUnitBehaviorChange(gt_ChannelOrb, null, "CastingVampiricRitual", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Orb
//--------------------------------------------------------------------------------------------------
bool gt_KillOrb_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_createdRitualOrb);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillOrb_Init () {
    gt_KillOrb = TriggerCreate("gt_KillOrb_Func");
    TriggerAddEventUnitBehaviorChange(gt_KillOrb, null, "CastingVampiricRitual", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taste for Blood - Bloodfeast CD
//--------------------------------------------------------------------------------------------------
bool gt_TasteforBloodBloodfeastCD_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "DarkTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitTarget(), "TasteforBlood", EventUnitTarget(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TasteforBloodBloodfeastCD_Init () {
    gt_TasteforBloodBloodfeastCD = TriggerCreate("gt_TasteforBloodBloodfeastCD_Func");
    TriggerAddEventUnitAttacked2(gt_TasteforBloodBloodfeastCD, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Far Seer
//--------------------------------------------------------------------------------------------------
bool gt_AssignFarSeer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_farSeer = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignFarSeer_Init () {
    gt_AssignFarSeer = TriggerCreate("gt_AssignFarSeer_Func");
    TriggerAddEventUnitRegion(gt_AssignFarSeer, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chain Heal
//--------------------------------------------------------------------------------------------------
bool gt_ChainHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_castingunit;
    unit lv_targetunit;
    fixed lv_initial;
    fixed lv_attributeMod;
    fixed lv_totalHeal;
    bool lv_found;

    // Variable Initialization
    lv_initial = 35.0;
    lv_attributeMod = 1.0;
    lv_totalHeal = 1.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalHeal = (lv_initial + (UnitBehaviorCount(EventUnit(), "IntHeroIntellectStandard") * lv_attributeMod));
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
    UnitBehaviorAdd(EventUnitTargetUnit(), "ChainHealvalidator", EventUnit(), 1);
    lv_totalHeal = (lv_totalHeal * 0.9);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (lv_found == false)) {
            lv_targetunit = UnitGroupLoopCurrent();
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
            UnitCreateEffectUnit(EventUnitTargetUnit(), "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
            lv_found = true;
        }

    }
    UnitGroupLoopEnd();
    Wait(0.1, c_timeGame);
    lv_totalHeal = (lv_totalHeal * 0.9);
    if ((lv_targetunit != null)) {
        lv_castingunit = lv_targetunit;
        lv_found = false;
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_castingunit), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (lv_found == false)) {
                lv_targetunit = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
                UnitCreateEffectUnit(lv_castingunit, "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    lv_totalHeal = (lv_totalHeal * 0.9);
    if ((lv_targetunit != null)) {
        lv_castingunit = lv_targetunit;
        lv_found = false;
        Wait(0.1, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_castingunit), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (lv_found == false)) {
                lv_targetunit = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
                UnitCreateEffectUnit(lv_castingunit, "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    lv_totalHeal = (lv_totalHeal * 0.9);
    if ((lv_targetunit != null)) {
        lv_castingunit = lv_targetunit;
        lv_found = false;
        Wait(0.1, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_castingunit), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (lv_found == false)) {
                lv_targetunit = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
                UnitCreateEffectUnit(lv_castingunit, "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    lv_totalHeal = (lv_totalHeal * 0.9);
    if ((lv_targetunit != null)) {
        lv_castingunit = lv_targetunit;
        lv_found = false;
        Wait(0.1, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_castingunit), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (UnitGroupLoopCurrent() != EventUnit()) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (lv_found == false)) {
                lv_targetunit = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
                UnitCreateEffectUnit(lv_castingunit, "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    lv_totalHeal = (lv_totalHeal * 0.9);
    if ((lv_targetunit != null)) {
        lv_castingunit = lv_targetunit;
        lv_found = false;
        Wait(0.1, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_castingunit), 6.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ChainHealvalidator") == false) && (UnitGroupLoopCurrent() != EventUnit()) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (lv_found == false)) {
                lv_targetunit = UnitGroupLoopCurrent();
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "ChainHealvalidator", EventUnit(), 1);
                UnitCreateEffectUnit(lv_castingunit, "ChainHeal1LaunchMissile", UnitGroupLoopCurrent());
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_totalHeal));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChainHeal_Init () {
    gt_ChainHeal = TriggerCreate("gt_ChainHeal_Func");
    TriggerAddEventUnitAbility(gt_ChainHeal, null, AbilityCommand("Rank1ChainHeal", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unleash Elements
//--------------------------------------------------------------------------------------------------
bool gt_UnleashElements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facingAngle;
    int lv_intelMod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_facingAngle = UnitGetFacing(EventUnit());
    lv_intelMod = UnitBehaviorCount(EventUnit(), "IntHeroIntellectStandard");
    UnitCreate(1, "StormElemental", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.5, (lv_facingAngle - 75.0)), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "ElementalsModification", EventUnit(), lv_intelMod);
    UnitBehaviorAdd(UnitLastCreated(), "ElementalTimedLife", EventUnit(), 1);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "AirElementalSpawn", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "ElementalSpawnSound", null, null, null);
    Wait(0.2, c_timeGame);
    UnitCreate(1, "EarthElemental", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.5, lv_facingAngle), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "ElementalsModification", EventUnit(), lv_intelMod);
    UnitBehaviorAdd(UnitLastCreated(), "ElementalTimedLife", EventUnit(), 1);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "EarthElementalSpawn", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "ElementalSpawnSound", null, null, null);
    Wait(0.2, c_timeGame);
    UnitCreate(1, "FireElemental", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.5, (lv_facingAngle + 75.0)), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "ElementalsModification", EventUnit(), lv_intelMod);
    UnitBehaviorAdd(UnitLastCreated(), "ElementalTimedLife", EventUnit(), 1);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "FireElementalSpawn", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "ElementalSpawnSound", null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnleashElements_Init () {
    gt_UnleashElements = TriggerCreate("gt_UnleashElements_Func");
    TriggerAddEventUnitAbility(gt_UnleashElements, null, AbilityCommand("Rank1UnleashElements", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Far Seer Mute
//--------------------------------------------------------------------------------------------------
bool gt_FarSeerMute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarSeerMute_Init () {
    gt_FarSeerMute = TriggerCreate("gt_FarSeerMute_Func");
    TriggerAddEventUnitAbility(gt_FarSeerMute, null, AbilityCommand("Rank1ChainHeal", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shields of the Storm (Shield)
//--------------------------------------------------------------------------------------------------
bool gt_ShieldsoftheStormShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intelMod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intelMod = UnitBehaviorCount(EventUnit(), "IntHeroIntellectStandard");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ShieldoftheStormShield", EventUnit(), lv_intelMod);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldsoftheStormShield_Init () {
    gt_ShieldsoftheStormShield = TriggerCreate("gt_ShieldsoftheStormShield_Func");
    TriggerAddEventUnitAbility(gt_ShieldsoftheStormShield, null, AbilityCommand("Rank1ShieldsoftheStorm", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shields of the Storm (Damage)
//--------------------------------------------------------------------------------------------------
bool gt_ShieldsoftheStormDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_farseerintmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_farseerintmod = (UnitBehaviorCount(gv_farSeer, "IntHeroIntellectStandard") * 0.2);
    UnitDamage(gv_farSeer, "TriggerDamageSpellNonBenefit", EventUnit(), lv_farseerintmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldsoftheStormDamage_Init () {
    gt_ShieldsoftheStormDamage = TriggerCreate("gt_ShieldsoftheStormDamage_Func");
    TriggerAddEventUnitDamaged(gt_ShieldsoftheStormDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "ShieldoftheStormBurnDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incinerate (Damage)
//--------------------------------------------------------------------------------------------------
bool gt_IncinerateDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_farseerintmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_farseerintmod = (UnitBehaviorCount(gv_farSeer, "IntHeroIntellectStandard") * 0.45);
    UnitDamage(gv_farSeer, "TriggerDamageSpellNonBenefit", EventUnit(), lv_farseerintmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncinerateDamage_Init () {
    gt_IncinerateDamage = TriggerCreate("gt_IncinerateDamage_Func");
    TriggerAddEventUnitDamaged(gt_IncinerateDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "IncinerateDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purge (Damage)
//--------------------------------------------------------------------------------------------------
bool gt_PurgeDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_farseerintmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_farseerintmod = (UnitBehaviorCount(gv_farSeer, "IntHeroIntellectStandard") * 0.35);
    UnitDamage(gv_farSeer, "TriggerDamageSpellNonBenefit", EventUnit(), lv_farseerintmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurgeDamage_Init () {
    gt_PurgeDamage = TriggerCreate("gt_PurgeDamage_Func");
    TriggerAddEventUnitDamaged(gt_PurgeDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "PurgeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign KotG
//--------------------------------------------------------------------------------------------------
bool gt_AssignKotG_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_kotG = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignKotG_Init () {
    gt_AssignKotG = TriggerCreate("gt_AssignKotG_Func");
    TriggerAddEventUnitRegion(gt_AssignKotG, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Entangling Roots Damage
//--------------------------------------------------------------------------------------------------
bool gt_EntanglingRootsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = (UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard") * 0.12);
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNonBenefit", EventUnit(), lv_kotgintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntanglingRootsDamage_Init () {
    gt_EntanglingRootsDamage = TriggerCreate("gt_EntanglingRootsDamage_Func");
    TriggerAddEventUnitDamaged(gt_EntanglingRootsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "EntanglingRootsPeriodicDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Treant Mod
//--------------------------------------------------------------------------------------------------
bool gt_TreantMod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard");
    UnitBehaviorAdd(EventUnitCreatedUnit(), "TreantModification", gv_kotG, lv_kotgintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreantMod_Init () {
    gt_TreantMod = TriggerCreate("gt_TreantMod_Func");
    TriggerAddEventUnitCreated(gt_TreantMod, null, "Rank1SummonTreants", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Treant Rejuvenate
//--------------------------------------------------------------------------------------------------
bool gt_TreantRejuvenate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = (UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard") * 0.04);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_kotgintelmod));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreantRejuvenate_Init () {
    gt_TreantRejuvenate = TriggerCreate("gt_TreantRejuvenate_Func");
    TriggerAddEventUnitDamaged(gt_TreantRejuvenate, null, c_unitDamageTypeAny, c_unitDamageEither, "RejuvenateHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rejuvenating Rain Heal
//--------------------------------------------------------------------------------------------------
bool gt_RejuvenatingRainHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = (UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard") * 0.16);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_kotgintelmod));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RejuvenatingRainHeal_Init () {
    gt_RejuvenatingRainHeal = TriggerCreate("gt_RejuvenatingRainHeal_Func");
    TriggerAddEventUnitDamaged(gt_RejuvenatingRainHeal, null, c_unitDamageTypeAny, c_unitDamageEither, "RejuvenatingRainsTriggerHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rejuvenating Rain Recast
//--------------------------------------------------------------------------------------------------
bool gt_RejuvenatingRainRecast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_found;
    fixed lv_distance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "RejuvenatingRainsInitial") == false) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "RejuvenatingRainsRecastinprogress") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (lv_found == false)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RejuvenatingRainsRecastinprogress", EventUnit(), 1);
            lv_distance = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(UnitGroupLoopCurrent()));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RejuvenationCloudDummy", 0, 0, UnitGetPosition(EventUnit()));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupLoopCurrent())), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "AutoTurretTimedLife", UnitLastCreated(), 1);
            UnitBehaviorSetDurationRemaining(UnitLastCreated(), "AutoTurretTimedLife", (lv_distance * 0.4));
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RejuvenatingRainsRecast1Bounce", EventUnit(), 1);
            UnitBehaviorSetDurationRemaining(UnitGroupLoopCurrent(), "RejuvenatingRainsRecast1Bounce", (lv_distance * 0.4));
            lv_found = true;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_found == false)) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "RejuvenatingRainsInitial") == false) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "RejuvenatingRainsRecastinprogress") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupLoopCurrent() != EventUnit()) && (lv_found == false)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "RejuvenatingRainsRecastinprogress", EventUnit(), 1);
                lv_distance = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(UnitGroupLoopCurrent()));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "RejuvenationCloudDummy", 0, 0, UnitGetPosition(EventUnit()));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
                UnitBehaviorAdd(UnitLastCreated(), "AutoTurretTimedLife", UnitLastCreated(), 1);
                UnitBehaviorSetDurationRemaining(UnitLastCreated(), "AutoTurretTimedLife", (lv_distance * 0.4));
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "RejuvenatingRainsRecast1Bounce", EventUnit(), 1);
                UnitBehaviorSetDurationRemaining(UnitGroupLoopCurrent(), "RejuvenatingRainsRecast1Bounce", (lv_distance * 0.4));
                lv_found = true;
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RejuvenatingRainRecast_Init () {
    gt_RejuvenatingRainRecast = TriggerCreate("gt_RejuvenatingRainRecast_Func");
    TriggerAddEventUnitBehaviorChange(gt_RejuvenatingRainRecast, null, "RejuvenatingRainsInitial", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awaken Ancient
//--------------------------------------------------------------------------------------------------
bool gt_AwakenAncient_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facingAngle;
    int lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard");
    UnitCreate(1, "Ancient", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.5, UnitGetFacing(EventUnit())), UnitGetFacing(EventUnit()));
    UnitBehaviorAdd(UnitLastCreated(), "AncientModification", gv_kotG, lv_kotgintelmod);
    UnitBehaviorAdd(UnitLastCreated(), "AncientTimedLife", EventUnit(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "AncientBirthStunned", EventUnit(), 1);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Morph Alternate", 0, c_animTimeDefault);
    libNtve_gf_SetAnimationDuration(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 4.8);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "AwakenAncientSound", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SummonTreantsIndividualSpawn", null, null, null);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SummonTreantsSpawn", null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AwakenAncient_Init () {
    gt_AwakenAncient = TriggerCreate("gt_AwakenAncient_Func");
    TriggerAddEventUnitAbility(gt_AwakenAncient, null, AbilityCommand("Rank1AwakenAncient", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keeper Mute
//--------------------------------------------------------------------------------------------------
bool gt_KeeperMute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kotG = EventUnit();
    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeeperMute_Init () {
    gt_KeeperMute = TriggerCreate("gt_KeeperMute_Func");
    TriggerAddEventUnitAbility(gt_KeeperMute, null, AbilityCommand("Rank1RejuvenatingRains", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_KeeperMute, null, AbilityCommand("Rank1AwakenAncient", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_KeeperMute, null, AbilityCommand("Rank1SummonTreants", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_KeeperMute, null, AbilityCommand("Rank1EntanglingRoots", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient's Grace
//--------------------------------------------------------------------------------------------------
bool gt_AncientsGrace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kotgintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kotgintelmod = (UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard") * 0.01);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_kotgintelmod));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientsGrace_Init () {
    gt_AncientsGrace = TriggerCreate("gt_AncientsGrace_Func");
    TriggerAddEventUnitDamaged(gt_AncientsGrace, null, c_unitDamageTypeAny, c_unitDamageEither, "AncientsGraceHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient's Grace Armor Initialize
//--------------------------------------------------------------------------------------------------
bool gt_AncientsGraceArmorInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ancientsgracemaxcount;

    // Variable Initialization
    lv_ancientsgracemaxcount = UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AncientsGraceArmorStacks", gv_kotG, (lv_ancientsgracemaxcount - 1));
    UnitBehaviorAdd(EventUnit(), "AncientsGraceBuffCap", gv_kotG, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientsGraceArmorInitialize_Init () {
    gt_AncientsGraceArmorInitialize = TriggerCreate("gt_AncientsGraceArmorInitialize_Func");
    TriggerAddEventUnitBehaviorChange(gt_AncientsGraceArmorInitialize, null, "AncientsGraceArmorStacks", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient's Grace Armor Activate
//--------------------------------------------------------------------------------------------------
bool gt_AncientsGraceArmorActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ancientsgracemaxcount;

    // Variable Initialization
    lv_ancientsgracemaxcount = UnitBehaviorCount(gv_kotG, "IntHeroIntellectStandard");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "AncientsGraceArmorStacks") == 1)) {
        lv_ancientsgracemaxcount -= 1;
        UnitBehaviorAdd(EventUnit(), "AncientsGraceArmorStacks", gv_kotG, lv_ancientsgracemaxcount);
        UnitBehaviorAdd(EventUnit(), "AncientsGraceBuffCap", gv_kotG, 1);
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "AncientsGraceArmorStacks") < lv_ancientsgracemaxcount)) {
            lv_ancientsgracemaxcount = (lv_ancientsgracemaxcount - UnitBehaviorCount(EventUnit(), "AncientsGraceArmorStacks"));
            UnitBehaviorAdd(EventUnit(), "AncientsGraceArmorStacks", gv_kotG, lv_ancientsgracemaxcount);
            UnitBehaviorAdd(EventUnit(), "AncientsGraceBuffCap", gv_kotG, 1);
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "AncientsGraceArmorStacks") > lv_ancientsgracemaxcount)) {
                lv_ancientsgracemaxcount = (UnitBehaviorCount(EventUnit(), "AncientsGraceArmorStacks") - lv_ancientsgracemaxcount);
                UnitBehaviorRemove(EventUnit(), "AncientsGraceArmorStacks", lv_ancientsgracemaxcount);
                UnitBehaviorAdd(EventUnit(), "AncientsGraceBuffCap", gv_kotG, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientsGraceArmorActivate_Init () {
    gt_AncientsGraceArmorActivate = TriggerCreate("gt_AncientsGraceArmorActivate_Func");
    TriggerAddEventUnitBehaviorChange(gt_AncientsGraceArmorActivate, null, "AncientsGraceArmorStacks", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Mountain King
//--------------------------------------------------------------------------------------------------
bool gt_AssignMountainKing_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaMirrorImage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mountainKing = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignMountainKing_Init () {
    gt_AssignMountainKing = TriggerCreate("gt_AssignMountainKing_Func");
    TriggerAddEventUnitRegion(gt_AssignMountainKing, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Mighty Hammer
//--------------------------------------------------------------------------------------------------
bool gt_CreateMightyHammer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MightyHammerDummy", 0, 0, UnitGetPosition(EventUnit()), UnitGetFacing(EventUnit()));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 7.5, UnitGetFacing(EventUnit()))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "AutoTurretTimedLife", UnitLastCreated(), 1);
    UnitBehaviorSetDurationRemaining(UnitLastCreated(), "AutoTurretTimedLife", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMightyHammer_Init () {
    gt_CreateMightyHammer = TriggerCreate("gt_CreateMightyHammer_Func");
    TriggerAddEventUnitAbility(gt_CreateMightyHammer, null, AbilityCommand("Rank1MightyHammer", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dwarf Mute
//--------------------------------------------------------------------------------------------------
bool gt_DwarfMute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DwarfMute_Init () {
    gt_DwarfMute = TriggerCreate("gt_DwarfMute_Func");
    TriggerAddEventUnitAbility(gt_DwarfMute, null, AbilityCommand("Rank1MightyHammer", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_DwarfMute, null, AbilityCommand("Rank1Dwarfaholic", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thunder Clap
//--------------------------------------------------------------------------------------------------
bool gt_ThunderClap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaMirrorImage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "StoneFlesh") == true)) {
        UnitCreateEffectPoint(EventUnit(), "MegaThunderclapSearch", UnitGetPosition(EventUnit()));
    }
    else {
        UnitCreateEffectPoint(EventUnit(), "ThunderclapSearch", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThunderClap_Init () {
    gt_ThunderClap = TriggerCreate("gt_ThunderClap_Func");
    TriggerAddEventUnitAbility(gt_ThunderClap, null, null, c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mighty Hammer Damage
//--------------------------------------------------------------------------------------------------
bool gt_MightyHammerDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mkstrmod;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "MightyHammerDummyBuff") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mkstrmod = (UnitBehaviorCount(gv_mountainKing, "StrHeroStrengthStandard") * 1.35);
    UnitDamage(gv_mountainKing, "TriggerDamageSpellNonBenefit", EventUnit(), lv_mkstrmod);
    UnitBehaviorAdd(EventUnit(), "MightyHammerDummyBuff", gv_mountainKing, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MightyHammerDamage_Init () {
    gt_MightyHammerDamage = TriggerCreate("gt_MightyHammerDamage_Func");
    TriggerAddEventUnitDamaged(gt_MightyHammerDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "ShockwaveDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thunderclap Damage
//--------------------------------------------------------------------------------------------------
bool gt_ThunderclapDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mkstrmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mkstrmod = (UnitBehaviorCount(gv_mountainKing, "StrHeroStrengthStandard") * 0.25);
    UnitDamage(gv_mountainKing, "TriggerDamageSpellNonBenefit", EventUnit(), lv_mkstrmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThunderclapDamage_Init () {
    gt_ThunderclapDamage = TriggerCreate("gt_ThunderclapDamage_Func");
    TriggerAddEventUnitDamaged(gt_ThunderclapDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "ThunderclapDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thunderclap Mega Damage
//--------------------------------------------------------------------------------------------------
bool gt_ThunderclapMegaDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mkstrmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mkstrmod = (UnitBehaviorCount(gv_mountainKing, "StrHeroStrengthStandard") * 0.75);
    UnitDamage(gv_mountainKing, "TriggerDamageSpellNonBenefit", EventUnit(), lv_mkstrmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThunderclapMegaDamage_Init () {
    gt_ThunderclapMegaDamage = TriggerCreate("gt_ThunderclapMegaDamage_Func");
    TriggerAddEventUnitDamaged(gt_ThunderclapMegaDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "MegaThunderclapDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heart of the Mountain
//--------------------------------------------------------------------------------------------------
bool gt_HeartoftheMountain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_strengthMod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_strengthMod = UnitBehaviorCount(EventUnit(), "StrHeroStrengthStandard");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "HeartoftheMountainArmorStacks", EventUnit(), lv_strengthMod);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeartoftheMountain_Init () {
    gt_HeartoftheMountain = TriggerCreate("gt_HeartoftheMountain_Func");
    TriggerAddEventUnitAbility(gt_HeartoftheMountain, null, AbilityCommand("Rank1HeartoftheMountain", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Divine Purpose
//--------------------------------------------------------------------------------------------------
bool gt_DivinePurpose_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroStrength;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        lv_heroStrength = UnitBehaviorCount(EventUnit(), "StrengthStandard");
        UnitCreate(1, "LightsChampion", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnitTargetUnit()), 1.5, 90.0), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1LightsChampionSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "LightsChampion", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawnSound", null, null, null);
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "LightsChampion", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnitTargetUnit()), 1.5, -30.0), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1LightsChampionSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "LightsChampion", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawnSound", null, null, null);
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreate(1, "LightsChampion", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnitTargetUnit()), 1.5, -150.0), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Rank1LightsChampionSTR", EventUnit(), lv_heroStrength);
        UnitBehaviorAdd(UnitLastCreated(), "LightsChampion", EventUnit(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "GhoulBirthStunned", EventUnit(), 1);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawn", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "KingsOrderSpawnSound", null, null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DivinePurpose_Init () {
    gt_DivinePurpose = TriggerCreate("gt_DivinePurpose_Func");
    TriggerAddEventUnitAbility(gt_DivinePurpose, null, AbilityCommand("Rank1DivinePurpose", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Paladin
//--------------------------------------------------------------------------------------------------
bool gt_AssignPaladin_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PreserverC"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_paladin = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignPaladin_Init () {
    gt_AssignPaladin = TriggerCreate("gt_AssignPaladin_Func");
    TriggerAddEventUnitRegion(gt_AssignPaladin, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Paladin Mute
//--------------------------------------------------------------------------------------------------
bool gt_PaladinMute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PaladinMute_Init () {
    gt_PaladinMute = TriggerCreate("gt_PaladinMute_Func");
    TriggerAddEventUnitAbility(gt_PaladinMute, null, AbilityCommand("Rank1DivinePurpose", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_PaladinMute, null, AbilityCommand("Rank1LightsBlessing", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Paladin 1 Second Cast
//--------------------------------------------------------------------------------------------------
bool gt_Paladin1SecondCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Cast1", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Paladin1SecondCast_Init () {
    gt_Paladin1SecondCast = TriggerCreate("gt_Paladin1SecondCast_Func");
    TriggerAddEventUnitAbility(gt_Paladin1SecondCast, null, AbilityCommand("Rank1LightsBlessing", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Paladin 0.5 Second Cast
//--------------------------------------------------------------------------------------------------
bool gt_Paladin05SecondCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Cast0p5", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Paladin05SecondCast_Init () {
    gt_Paladin05SecondCast = TriggerCreate("gt_Paladin05SecondCast_Func");
    TriggerAddEventUnitAbility(gt_Paladin05SecondCast, null, AbilityCommand("Rank1Radiance", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light's Blessing All
//--------------------------------------------------------------------------------------------------
bool gt_LightsBlessingAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_paladinintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_paladin = EventUnit();
    lv_paladinintelmod = (UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard") * 1.5);
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + lv_paladinintelmod));
    lv_paladinintelmod = (UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard") * 1.0);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) + lv_paladinintelmod));
        }

    }
    UnitGroupLoopEnd();
    lv_paladinintelmod = (UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard") * 0.5);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitDamage(gv_paladin, "TriggerDamageSpellNonBenefit", UnitGroupLoopCurrent(), lv_paladinintelmod);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightsBlessingAll_Init () {
    gt_LightsBlessingAll = TriggerCreate("gt_LightsBlessingAll_Func");
    TriggerAddEventUnitAbility(gt_LightsBlessingAll, null, AbilityCommand("Rank1LightsBlessing", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radiance Damage
//--------------------------------------------------------------------------------------------------
bool gt_RadianceDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_strengthmod;
    int lv_armorcount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_paladin = EventUnit();
    lv_strengthmod = (UnitBehaviorCount(EventUnit(), "StrengthStandard") * 0.75);
    lv_armorcount = UnitBehaviorCount(EventUnit(), "StrengthStandard");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.8), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitDamage(EventUnit(), "TriggerDamageSpellNonBenefit", UnitGroupLoopCurrent(), lv_strengthmod);
        }

    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(EventUnit(), "RadiantLight", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "RadiantLightArmor", EventUnit(), lv_armorcount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RadianceDamage_Init () {
    gt_RadianceDamage = TriggerCreate("gt_RadianceDamage_Func");
    TriggerAddEventUnitAbility(gt_RadianceDamage, null, AbilityCommand("Rank1Radiance", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radiance Burn
//--------------------------------------------------------------------------------------------------
bool gt_RadianceBurn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_paladinintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_paladinintelmod = (UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard") * 0.1);
    UnitDamage(gv_paladin, "TriggerDamageSpellNonBenefit", EventUnit(), lv_paladinintelmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RadianceBurn_Init () {
    gt_RadianceBurn = TriggerCreate("gt_RadianceBurn_Func");
    TriggerAddEventUnitDamaged(gt_RadianceBurn, null, c_unitDamageTypeAny, c_unitDamageEither, "RadiantLightBurnDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redemption Cast
//--------------------------------------------------------------------------------------------------
bool gt_RedemptionCast_Func (bool testConds, bool runActions) {
    int autoD99051D2_ae;
    int autoD99051D2_ai;

    // Variable Declarations
    int lv_eachhero;
    fixed lv_longestremainingreztime;
    timer lv_chosentimer;
    int lv_chosenhero;
    point lv_spawnPoint;
    fixed lv_facingAngle;

    // Variable Initialization
    lv_chosentimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_facingAngle = UnitGetFacing(EventUnit());
    UnitBehaviorRemove(EventUnit(), "RedemptionRequirement", 1);
    autoD99051D2_ae = 12;
    autoD99051D2_ai = 1;
    lv_eachhero = 0;
    for ( ; ( (autoD99051D2_ai >= 0 && lv_eachhero <= autoD99051D2_ae) || (autoD99051D2_ai <= 0 && lv_eachhero >= autoD99051D2_ae) ) ; lv_eachhero += autoD99051D2_ai ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(gv_hero[lv_eachhero]), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            if ((lv_longestremainingreztime < TimerGetRemaining(gv_resurrectionTimer[lv_eachhero]))) {
                lv_longestremainingreztime = TimerGetRemaining(gv_resurrectionTimer[lv_eachhero]);
                lv_chosenhero = UnitGetOwner(gv_hero[lv_eachhero]);
            }

        }

    }
    libNtve_gf_StopTimer(gv_resurrectionTimer[lv_chosenhero]);
    TimerWindowDestroy(gv_resurrectionTimerWindow[lv_chosenhero]);
    lv_spawnPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, lv_facingAngle);
    libNtve_gf_MakeUnitInvulnerable(gv_hero[lv_chosenhero], false);
    UnitSetHeight(gv_hero[lv_chosenhero], 0.0, 0.0);
    UnitSetState(gv_hero[lv_chosenhero], c_unitStateSelectable, true);
    UnitSetState(gv_hero[lv_chosenhero], c_unitStateHighlightable, true);
    UnitSetPropertyFixed(gv_hero[lv_chosenhero], c_unitPropLifePercent, 35.0);
    UnitSetPropertyFixed(gv_hero[lv_chosenhero], c_unitPropEnergyPercent, 35.0);
    libNtve_gf_ShowHideUnit(gv_hero[lv_chosenhero], true);
    UnitBehaviorRemove(gv_hero[lv_chosenhero], "DeadHero", 1);
    UnitXPGainEnable(gv_hero[lv_chosenhero], null, true);
    UnitSetPosition(gv_hero[lv_chosenhero], lv_spawnPoint, false);
    UnitBehaviorAdd(gv_hero[lv_chosenhero], "RedemptionBuff", gv_hero[lv_chosenhero], 1);
    ActorCreate(ActorScopeFromUnit(gv_hero[lv_chosenhero]), "ResurrectionVisual", null, null, null);
    ActorCreate(ActorScopeFromUnit(gv_hero[lv_chosenhero]), "ResurrectionSound", null, null, null);
    CameraPan(lv_chosenhero, UnitGetPosition(gv_hero[lv_chosenhero]), 1.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedemptionCast_Init () {
    gt_RedemptionCast = TriggerCreate("gt_RedemptionCast_Func");
    TriggerAddEventUnitAbility(gt_RedemptionCast, null, AbilityCommand("Redemption", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enlightenment Initialize
//--------------------------------------------------------------------------------------------------
bool gt_EnlightenmentInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enlightenmentmaxcount;

    // Variable Initialization
    lv_enlightenmentmaxcount = UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard");

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enlightenmentmaxcount = FixedToInt((lv_enlightenmentmaxcount * 0.15));
    lv_enlightenmentmaxcount = FloorI(lv_enlightenmentmaxcount);
    UnitBehaviorAdd(EventUnit(), "EnlightenmentIntStacks", gv_paladin, (lv_enlightenmentmaxcount - 1));
    UnitBehaviorAdd(EventUnit(), "EnlightenmentBoonBuffCap", gv_paladin, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnlightenmentInitialize_Init () {
    gt_EnlightenmentInitialize = TriggerCreate("gt_EnlightenmentInitialize_Func");
    TriggerAddEventUnitBehaviorChange(gt_EnlightenmentInitialize, null, "EnlightenmentIntStacks", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enlightenment Activate
//--------------------------------------------------------------------------------------------------
bool gt_EnlightenmentActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enlightenmentmaxcount;

    // Variable Initialization
    lv_enlightenmentmaxcount = UnitBehaviorCount(gv_paladin, "IntHeroIntellectStandard");

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enlightenmentmaxcount = FixedToInt((lv_enlightenmentmaxcount * 0.15));
    lv_enlightenmentmaxcount = FloorI(lv_enlightenmentmaxcount);
    if ((UnitBehaviorCount(EventUnit(), "EnlightenmentIntStacks") == 1)) {
        lv_enlightenmentmaxcount -= 1;
        UnitBehaviorAdd(EventUnit(), "EnlightenmentIntStacks", gv_paladin, lv_enlightenmentmaxcount);
        UnitBehaviorAdd(EventUnit(), "EnlightenmentBoonBuffCap", gv_paladin, 1);
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "EnlightenmentIntStacks") < lv_enlightenmentmaxcount)) {
            lv_enlightenmentmaxcount = (lv_enlightenmentmaxcount - UnitBehaviorCount(EventUnit(), "EnlightenmentIntStacks"));
            UnitBehaviorAdd(EventUnit(), "EnlightenmentIntStacks", gv_paladin, lv_enlightenmentmaxcount);
            UnitBehaviorAdd(EventUnit(), "EnlightenmentBoonBuffCap", gv_paladin, 1);
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "EnlightenmentIntStacks") > lv_enlightenmentmaxcount)) {
                lv_enlightenmentmaxcount = (UnitBehaviorCount(EventUnit(), "EnlightenmentIntStacks") - lv_enlightenmentmaxcount);
                UnitBehaviorRemove(EventUnit(), "EnlightenmentIntStacks", lv_enlightenmentmaxcount);
                UnitBehaviorAdd(EventUnit(), "EnlightenmentBoonBuffCap", gv_paladin, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnlightenmentActivate_Init () {
    gt_EnlightenmentActivate = TriggerCreate("gt_EnlightenmentActivate_Func");
    TriggerAddEventUnitBehaviorChange(gt_EnlightenmentActivate, null, "EnlightenmentIntStacks", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Shadow Hunter
//--------------------------------------------------------------------------------------------------
bool gt_AssignShadowHunter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_shadowHunter = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignShadowHunter_Init () {
    gt_AssignShadowHunter = TriggerCreate("gt_AssignShadowHunter_Func");
    TriggerAddEventUnitRegion(gt_AssignShadowHunter, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hex Gain
//--------------------------------------------------------------------------------------------------
bool gt_HexGain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_odds;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_odds = RandomInt(0, 2);
    if ((lv_odds == 1)) {
        UnitBehaviorAdd(EventUnit(), "HexBlue", EventUnit(), 1);
    }

    if ((lv_odds == 0)) {
        UnitBehaviorAdd(EventUnit(), "HexPurple", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HexGain_Init () {
    gt_HexGain = TriggerCreate("gt_HexGain_Func");
    TriggerAddEventUnitBehaviorChange(gt_HexGain, null, "Hex", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Mojo Stack
//--------------------------------------------------------------------------------------------------
bool gt_SpiritMojoStack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shadowhunteragi;
    int lv_spriitmojostack;
    fixed lv_modifier;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shadowhunteragi = UnitBehaviorCount(gv_shadowHunter, "AgiHeroAgility");
    lv_spriitmojostack = UnitBehaviorCount(EventUnit(), "SpiritMojo");
    lv_modifier = (0.9 + (lv_spriitmojostack * 0.1));
    UnitDamage(gv_shadowHunter, "TriggerDamageSpellNonBenefit", EventUnit(), ((lv_shadowhunteragi * 0.5) * lv_modifier));
    if ((lv_spriitmojostack == 2)) {
        UnitBehaviorAdd(EventUnit(), "BadSpiritMojoHiddenScale2", EventUnit(), 1);
    }
    else {
        if ((lv_spriitmojostack == 3)) {
            UnitBehaviorAdd(EventUnit(), "BadSpiritMojoHiddenScale2", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "BadSpiritMojoHiddenScale3", EventUnit(), 1);
        }
        else {
            if ((lv_spriitmojostack >= 4)) {
                UnitBehaviorAdd(EventUnit(), "BadSpiritMojoHiddenScale2", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "BadSpiritMojoHiddenScale3", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "EnemySpiritMojoHiddenScale4", EventUnit(), 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritMojoStack_Init () {
    gt_SpiritMojoStack = TriggerCreate("gt_SpiritMojoStack_Func");
    TriggerAddEventUnitBehaviorChange(gt_SpiritMojoStack, null, "SpiritMojo", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Mojo Stack Ally
//--------------------------------------------------------------------------------------------------
bool gt_SpiritMojoStackAlly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shadowhunterint;
    int lv_spriitmojostack;
    fixed lv_modifier;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shadowhunterint = UnitBehaviorCount(gv_shadowHunter, "IntellectStandard");
    lv_spriitmojostack = UnitBehaviorCount(EventUnit(), "SpiritMojoAlly");
    lv_modifier = (0.9 + (lv_spriitmojostack * 0.1));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (lv_modifier * (lv_shadowhunterint * 0.5))));
    ActorCreate(ActorScopeFromUnit(EventUnit()), "SpiritMojoRecoverVisual", null, null, null);
    ActorCreate(ActorScopeFromUnit(EventUnit()), "SpiritMojoRecoverSound", null, null, null);
    if ((lv_spriitmojostack == 2)) {
        UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale2", EventUnit(), 1);
    }
    else {
        if ((lv_spriitmojostack == 3)) {
            UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale2", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale3", EventUnit(), 1);
        }
        else {
            if ((lv_spriitmojostack >= 4)) {
                UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale2", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale3", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "SpiritMojoHiddenScale4", EventUnit(), 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritMojoStackAlly_Init () {
    gt_SpiritMojoStackAlly = TriggerCreate("gt_SpiritMojoStackAlly_Func");
    TriggerAddEventUnitBehaviorChange(gt_SpiritMojoStackAlly, null, "SpiritMojoAlly", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Serpent Ward Stats
//--------------------------------------------------------------------------------------------------
bool gt_SerpentWardStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_agimod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_agimod = UnitBehaviorCount(gv_shadowHunter, "AgiHeroAgility");
    UnitBehaviorAdd(EventUnitCreatedUnit(), "SerpentWardModification", gv_shadowHunter, lv_agimod);
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, c_unitPropCurrent) + (lv_agimod * 3.0)));
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, c_unitPropCurrent) + (lv_agimod * 3.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SerpentWardStats_Init () {
    gt_SerpentWardStats = TriggerCreate("gt_SerpentWardStats_Func");
    TriggerAddEventUnitCreated(gt_SerpentWardStats, null, "BigBadSerpentWard", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Serpent Ward Mana Regen
//--------------------------------------------------------------------------------------------------
bool gt_SerpentWardManaRegen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_intmod;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "BigBadSerpentWard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intmod = UnitBehaviorCount(gv_shadowHunter, "IntellectStandard");
    ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "BigBadSerpentWardRecover", null, null, null);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 4.5), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) != "DeathKnight") && (UnitGetType(UnitGroupLoopCurrent()) != "Zealot")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) + (lv_intmod * 0.08)));
            ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "BigBadSerpentWardRecoverImpact", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "BigBadSerpentWardRecoverSound", null, null, null);
        }
        else {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Ally) == true) && ((UnitGetType(UnitGroupLoopCurrent()) == "DeathKnight") || (UnitGetType(UnitGroupLoopCurrent()) == "Zealot"))) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) + (lv_intmod * 0.01)));
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "BigBadSerpentWardRecoverImpact", null, null, null);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "BigBadSerpentWardRecoverSound", null, null, null);
            }

        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SerpentWardManaRegen_Init () {
    gt_SerpentWardManaRegen = TriggerCreate("gt_SerpentWardManaRegen_Func");
    TriggerAddEventUnitAttacked2(gt_SerpentWardManaRegen, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Voodoo Blade First Impact
//--------------------------------------------------------------------------------------------------
bool gt_DarkVoodooBladeFirstImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damagedealt;
    fixed lv_shadowhunterintmod;
    fixed lv_shadowhunterinttotal;
    fixed lv_shadowhunterdarkvoodooint;
    fixed lv_shadowhunterbasedamage;
    fixed lv_voodoobladedamagetotal;

    // Variable Initialization
    lv_shadowhunterdarkvoodooint = 0.35;
    lv_shadowhunterbasedamage = 18.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagedealt = EventUnitDamageAttempted();
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_damagedealt));
    lv_shadowhunterinttotal = UnitBehaviorCount(gv_shadowHunter, "IntellectStandard");
    lv_shadowhunterintmod = (lv_shadowhunterinttotal * lv_shadowhunterdarkvoodooint);
    lv_voodoobladedamagetotal += lv_shadowhunterintmod;
    lv_voodoobladedamagetotal += lv_shadowhunterbasedamage;
    lv_voodoobladedamagetotal += lv_damagedealt;
    UnitDamage(gv_shadowHunter, "SpellBenefit", EventUnit(), lv_voodoobladedamagetotal);
    TextTagCreate((IntToText(FixedToInt((lv_voodoobladedamagetotal + (lv_shadowhunterinttotal * 0.04)))) + StringExternal("Param/Value/CDC73A03")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(84*100/255,0,129*100/255));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkVoodooBladeFirstImpact_Init () {
    gt_DarkVoodooBladeFirstImpact = TriggerCreate("gt_DarkVoodooBladeFirstImpact_Func");
    TriggerAddEventUnitDamaged(gt_DarkVoodooBladeFirstImpact, null, c_unitDamageTypeAny, c_unitDamageEither, "DarkVoodooWeaponFirstImpactDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Voodoo Blade Second Impact
//--------------------------------------------------------------------------------------------------
bool gt_DarkVoodooBladeSecondImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damagedealt;
    fixed lv_shadowhunterintmod;
    fixed lv_shadowhunterinttotal;
    fixed lv_shadowhunterdarkvoodooint;
    fixed lv_shadowhunterbasedamage;
    fixed lv_voodoobladedamagetotal;

    // Variable Initialization
    lv_shadowhunterdarkvoodooint = 0.35;
    lv_shadowhunterbasedamage = 18.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagedealt = EventUnitDamageAttempted();
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_damagedealt));
    lv_shadowhunterinttotal = UnitBehaviorCount(gv_shadowHunter, "IntellectStandard");
    lv_shadowhunterintmod = (lv_shadowhunterinttotal * lv_shadowhunterdarkvoodooint);
    lv_voodoobladedamagetotal += lv_shadowhunterintmod;
    lv_voodoobladedamagetotal += lv_shadowhunterbasedamage;
    lv_voodoobladedamagetotal += lv_damagedealt;
    lv_voodoobladedamagetotal *= 0.8;
    UnitDamage(gv_shadowHunter, "SpellBenefit", EventUnit(), lv_voodoobladedamagetotal);
    TextTagCreate((IntToText(FixedToInt((lv_voodoobladedamagetotal + (lv_shadowhunterinttotal * 0.04)))) + StringExternal("Param/Value/1BB81A66")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(84*100/255,0,129*100/255));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkVoodooBladeSecondImpact_Init () {
    gt_DarkVoodooBladeSecondImpact = TriggerCreate("gt_DarkVoodooBladeSecondImpact_Func");
    TriggerAddEventUnitDamaged(gt_DarkVoodooBladeSecondImpact, null, c_unitDamageTypeAny, c_unitDamageEither, "DarkVoodooWeaponSecondImpactDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Voodoo Blade Third Imapct
//--------------------------------------------------------------------------------------------------
bool gt_DarkVoodooBladeThirdImapct_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damagedealt;
    fixed lv_shadowhunterintmod;
    fixed lv_shadowhunterinttotal;
    fixed lv_shadowhunterdarkvoodooint;
    fixed lv_shadowhunterbasedamage;
    fixed lv_voodoobladedamagetotal;

    // Variable Initialization
    lv_shadowhunterdarkvoodooint = 0.35;
    lv_shadowhunterbasedamage = 18.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagedealt = EventUnitDamageAttempted();
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + lv_damagedealt));
    lv_shadowhunterinttotal = UnitBehaviorCount(gv_shadowHunter, "IntellectStandard");
    lv_shadowhunterintmod = (lv_shadowhunterinttotal * lv_shadowhunterdarkvoodooint);
    lv_voodoobladedamagetotal += lv_shadowhunterintmod;
    lv_voodoobladedamagetotal += lv_shadowhunterbasedamage;
    lv_voodoobladedamagetotal += lv_damagedealt;
    lv_voodoobladedamagetotal *= 0.6;
    UnitDamage(gv_shadowHunter, "SpellBenefit", EventUnit(), lv_voodoobladedamagetotal);
    TextTagCreate((IntToText(FixedToInt((lv_voodoobladedamagetotal + (lv_shadowhunterinttotal * 0.04)))) + StringExternal("Param/Value/6E8DCC01")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(84*100/255,0,129*100/255));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkVoodooBladeThirdImapct_Init () {
    gt_DarkVoodooBladeThirdImapct = TriggerCreate("gt_DarkVoodooBladeThirdImapct_Func");
    TriggerAddEventUnitDamaged(gt_DarkVoodooBladeThirdImapct, null, c_unitDamageTypeAny, c_unitDamageEither, "DarkVoodooWeaponThirdImpactDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assign Tauren Chieftain
//--------------------------------------------------------------------------------------------------
bool gt_AssignTaurenChieftain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaurenChieftan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_taurenChieftain = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssignTaurenChieftain_Init () {
    gt_AssignTaurenChieftain = TriggerCreate("gt_AssignTaurenChieftain_Func");
    TriggerAddEventUnitRegion(gt_AssignTaurenChieftain, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tauren Chieftain 0.5 Second Cast
//--------------------------------------------------------------------------------------------------
bool gt_TaurenChieftain05SecondCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Cast0p5", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaurenChieftain05SecondCast_Init () {
    gt_TaurenChieftain05SecondCast = TriggerCreate("gt_TaurenChieftain05SecondCast_Func");
    TriggerAddEventUnitAbility(gt_TaurenChieftain05SecondCast, null, AbilityCommand("Rank1IceTremor", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_TaurenChieftain05SecondCast, null, AbilityCommand("Rank1GlacialTotem", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tauren Mute
//--------------------------------------------------------------------------------------------------
bool gt_TaurenMute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, true);
    Wait(0.1, c_timeGame);
    SoundChannelMute(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TaurenMute_Init () {
    gt_TaurenMute = TriggerCreate("gt_TaurenMute_Func");
    TriggerAddEventUnitAbility(gt_TaurenMute, null, AbilityCommand("Rank1GlacialTotem", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_TaurenMute, null, AbilityCommand("Rank1IceTremor", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Spiritwalk
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSpiritwalk_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_taurenChieftain, "Spiritwalk", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSpiritwalk_Init () {
    gt_RemoveSpiritwalk = TriggerCreate("gt_RemoveSpiritwalk_Func");
    TriggerAddEventUnitAbility(gt_RemoveSpiritwalk, null, AbilityCommand("Rank1GlacialTotem", 0), c_abilEffectStageChannel, false);
    TriggerAddEventUnitAbility(gt_RemoveSpiritwalk, null, AbilityCommand("EchoingTundra", 0), c_abilEffectStageChannel, false);
    TriggerAddEventUnitAbility(gt_RemoveSpiritwalk, null, AbilityCommand("Rank1IceTremor", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spiritwalk Damage
//--------------------------------------------------------------------------------------------------
bool gt_SpiritwalkDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_taurenintelmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_taurenintelmod = (UnitBehaviorCount(gv_taurenChieftain, "IntellectStandard") * 1.5);
    UnitDamage(gv_taurenChieftain, "TriggerDamageSpellNonBenefit", EventUnit(), lv_taurenintelmod);
    UnitBehaviorSetDuration(EventUnit(), "FrosthideSlow", 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritwalkDamage_Init () {
    gt_SpiritwalkDamage = TriggerCreate("gt_SpiritwalkDamage_Func");
    TriggerAddEventUnitDamaged(gt_SpiritwalkDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "SpiritwalkPassDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ice Tremor Damage
//--------------------------------------------------------------------------------------------------
bool gt_IceTremorDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_taurenstrengthmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_taurenstrengthmod = (UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain") * 0.75);
    UnitDamage(gv_taurenChieftain, "TriggerDamageSpellNonBenefit", EventUnit(), lv_taurenstrengthmod);
    UnitBehaviorAdd(EventUnit(), "FrosthideSlow", gv_taurenChieftain, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IceTremorDamage_Init () {
    gt_IceTremorDamage = TriggerCreate("gt_IceTremorDamage_Func");
    TriggerAddEventUnitDamaged(gt_IceTremorDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "TremorDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Glacial Totem Pulse Damage
//--------------------------------------------------------------------------------------------------
bool gt_GlacialTotemPulseDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_taurenstrengthmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_taurenstrengthmod = (UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain") * 0.25);
    UnitDamage(gv_taurenChieftain, "TriggerDamageSpellNonBenefit", EventUnit(), lv_taurenstrengthmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlacialTotemPulseDamage_Init () {
    gt_GlacialTotemPulseDamage = TriggerCreate("gt_GlacialTotemPulseDamage_Func");
    TriggerAddEventUnitDamaged(gt_GlacialTotemPulseDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "GlacialTotemDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Glacial Totem Initialize
//--------------------------------------------------------------------------------------------------
bool gt_GlacialTotemInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_taurenstrengthmod;

    // Variable Initialization
    lv_taurenstrengthmod = UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain");

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GlacialTotem"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "FrosthideBoon", gv_taurenChieftain, lv_taurenstrengthmod);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "FrosthideBoonBuffCap", gv_taurenChieftain, 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlacialTotemInitialize_Init () {
    gt_GlacialTotemInitialize = TriggerCreate("gt_GlacialTotemInitialize_Func");
    TriggerAddEventUnitRegion(gt_GlacialTotemInitialize, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Glacial Totem Apply Behavior
//--------------------------------------------------------------------------------------------------
bool gt_GlacialTotemApplyBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_taurenstrengthmod;

    // Variable Initialization
    lv_taurenstrengthmod = UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain");

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnit(), "FrosthideBoon") == 1) || (UnitBehaviorCount(EventUnit(), "FrosthideBoon") < lv_taurenstrengthmod) || (UnitBehaviorCount(EventUnit(), "FrosthideBoon") > lv_taurenstrengthmod)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "FrosthideBoon") == 1)) {
        lv_taurenstrengthmod = (UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain") - 1);
        UnitBehaviorAdd(EventUnit(), "FrosthideBoon", gv_taurenChieftain, lv_taurenstrengthmod);
        UnitBehaviorAdd(EventUnit(), "FrosthideBoonBuffCap", gv_taurenChieftain, 1);
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "FrosthideBoon") < lv_taurenstrengthmod)) {
            lv_taurenstrengthmod = (lv_taurenstrengthmod - UnitBehaviorCount(EventUnit(), "FrosthideBoon"));
            UnitBehaviorAdd(EventUnit(), "FrosthideBoon", gv_taurenChieftain, lv_taurenstrengthmod);
            UnitBehaviorAdd(EventUnit(), "FrosthideBoonBuffCap", gv_taurenChieftain, 1);
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "FrosthideBoon") > lv_taurenstrengthmod)) {
                lv_taurenstrengthmod = (UnitBehaviorCount(EventUnit(), "FrosthideBoon") - UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain"));
                UnitBehaviorRemove(EventUnit(), "FrosthideBoon", lv_taurenstrengthmod);
                UnitBehaviorAdd(EventUnit(), "FrosthideBoonBuffCap", gv_taurenChieftain, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlacialTotemApplyBehavior_Init () {
    gt_GlacialTotemApplyBehavior = TriggerCreate("gt_GlacialTotemApplyBehavior_Func");
    TriggerAddEventUnitBehaviorChange(gt_GlacialTotemApplyBehavior, null, "FrosthideBoon", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Echoing Tundra Channel
//--------------------------------------------------------------------------------------------------
bool gt_EchoingTundraChannel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tundragrowth1;
    int lv_tundragrowth2;

    // Variable Initialization
    lv_tundragrowth1 = 3;
    lv_tundragrowth2 = 6;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CastingEchoingTundra") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(EventUnit()), "EchoingTundraChannelStompSound", null, null, null);
    Wait(0.025, c_timeGame);
    UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 0.0))) == true)) {
        UnitCreate(UnitGetOwner(EventUnit()), "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, UnitGetFacing(EventUnit())), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 0.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, UnitGetFacing(EventUnit())), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 0.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, UnitGetFacing(EventUnit())), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 180.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 180.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 180.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 180.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 180.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 180.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 45.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 45.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 45.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 45.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 45.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 45.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 90.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 90.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 90.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 90.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 90.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 90.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 45.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 45.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 54.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 45.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 45.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 45.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 90.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 90.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 90.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 90.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 90.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 90.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    Wait(0.05, c_timeGame);
    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 135.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) + 135.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 135.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 135.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 135.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 135.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 135.0))) == true)) {
        UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, (UnitGetFacing(EventUnit()) - 135.0)), libNtve_gf_RandomAngle());
    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 135.0))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 135.0)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 135.0))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 135.0)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 22.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 22.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 22.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 22.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 22.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 22.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 22.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 22.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 67.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 67.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 67.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 67.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 67.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 67.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 67.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 67.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 112.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 112.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 112.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 112.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 112.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 112.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 112.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 112.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 157.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) + 157.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 157.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) + 157.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth1)) {
        Wait(0.05, c_timeGame);
        if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 157.5))) == true)) {
            UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 4.0, (UnitGetFacing(EventUnit()) - 157.5)), libNtve_gf_RandomAngle());
        }

        if ((UnitBehaviorCount(EventUnit(), "CastingEchoingTundra") > lv_tundragrowth2)) {
            if ((RegionContainsPoint(RegionPlayableMap(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 157.5))) == true)) {
                UnitCreate(1, "EchoingTundraIceDummy", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 6.0, (UnitGetFacing(EventUnit()) - 157.5)), libNtve_gf_RandomAngle());
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EchoingTundraChannel_Init () {
    gt_EchoingTundraChannel = TriggerCreate("gt_EchoingTundraChannel_Func");
    TriggerAddEventUnitBehaviorChange(gt_EchoingTundraChannel, null, "CastingEchoingTundra", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Echoing Tundra Crystal
//--------------------------------------------------------------------------------------------------
bool gt_EchoingTundraCrystal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "EchoingTundraIceDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.75);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EchoingTundraCrystal_Init () {
    gt_EchoingTundraCrystal = TriggerCreate("gt_EchoingTundraCrystal_Func");
    TriggerAddEventUnitRegion(gt_EchoingTundraCrystal, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Echoing Tundra Crystal Damage
//--------------------------------------------------------------------------------------------------
bool gt_EchoingTundraCrystalDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_tCstrmod;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tCstrmod = (UnitBehaviorCount(gv_taurenChieftain, "StrHeroStrengthTaurenChieftain") * 0.2);
    UnitDamage(gv_taurenChieftain, "TriggerDamageSpellNonBenefit", EventUnit(), lv_tCstrmod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EchoingTundraCrystalDamage_Init () {
    gt_EchoingTundraCrystalDamage = TriggerCreate("gt_EchoingTundraCrystalDamage_Func");
    TriggerAddEventUnitDamaged(gt_EchoingTundraCrystalDamage, null, c_unitDamageTypeAny, c_unitDamageEither, "EchoingTundraCrushDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summoned Illusion Level
//--------------------------------------------------------------------------------------------------
bool gt_SummonedIllusionLevel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Zeratul", UnitGetOwner(EventUnit()), RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 2.5), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(EventUnit()), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLevel, UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent));
        if ((UnitGroupLoopCurrent() != EventUnit())) {
            UnitXPGainEnable(UnitGroupLoopCurrent(), null, false);
        }

        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent));
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SummonedIllusionLevel_Init () {
    gt_SummonedIllusionLevel = TriggerCreate("gt_SummonedIllusionLevel_Func");
    TriggerAddEventUnitCreated(gt_SummonedIllusionLevel, null, "Rank1GensoTrick", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusive Illusion Set
//--------------------------------------------------------------------------------------------------
bool gt_IllusiveIllusionSet_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "HallucinationTimedLifeIllusiveBlink") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLifePercent, c_unitPropCurrent));
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitXPGainEnable(EventUnit(), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IllusiveIllusionSet_Init () {
    gt_IllusiveIllusionSet = TriggerCreate("gt_IllusiveIllusionSet_Func");
    TriggerAddEventUnitRegion(gt_IllusiveIllusionSet, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nether Storm Spawn
//--------------------------------------------------------------------------------------------------
bool gt_NetherStormSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NetherStormDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NetherStormSpawn_Init () {
    gt_NetherStormSpawn = TriggerCreate("gt_NetherStormSpawn_Func");
    TriggerAddEventUnitDamaged(gt_NetherStormSpawn, null, c_unitDamageTypeAny, c_unitDamageEither, "VoidDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sarkon Fire Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SarkonFireSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DragonFireDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SarkonFireSpawn_Init () {
    gt_SarkonFireSpawn = TriggerCreate("gt_SarkonFireSpawn_Func");
    TriggerAddEventUnitDamaged(gt_SarkonFireSpawn, null, c_unitDamageTypeAny, c_unitDamageEither, "RedDragonBossDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_CallReinforcements_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(2, "JunglePriest", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallReinforcements_Init () {
    gt_CallReinforcements = TriggerCreate("gt_CallReinforcements_Func");
    TriggerAddEventUnitBehaviorChange(gt_CallReinforcements, null, "CallReinforcementsJinRakh", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consumeable Floating Text
//--------------------------------------------------------------------------------------------------
bool gt_ConsumeableFloatingText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vALUE;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionI") || (UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionII") || (UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionIII") || (UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionI") || (UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionII") || (UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionIII") || (UnitGetType(EventUnitInventoryItem()) == "PotionofKnowledge") || (UnitGetType(EventUnitInventoryItem()) == "CureAll") || (UnitGetType(EventUnitInventoryItem()) == "ButsuItem")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionI")) {
        lv_vALUE = StringExternal("Param/Value/F118D018");
    }
    else {
        if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionII")) {
            lv_vALUE = StringExternal("Param/Value/1B68F422");
        }
        else {
            if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessEnergyPotionIII")) {
                lv_vALUE = StringExternal("Param/Value/5191D86C");
            }
            else {
                if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionI")) {
                    lv_vALUE = StringExternal("Param/Value/34BAA4A0");
                }
                else {
                    if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionII")) {
                        lv_vALUE = StringExternal("Param/Value/AB401070");
                    }
                    else {
                        if ((UnitGetType(EventUnitInventoryItem()) == "BottomlessHealthPotionIII")) {
                            lv_vALUE = StringExternal("Param/Value/6B799270");
                        }
                        else {
                            if ((UnitGetType(EventUnitInventoryItem()) == "PotionofKnowledge")) {
                                lv_vALUE = StringExternal("Param/Value/1DA3FAC8");
                            }
                            else {
                                if ((UnitGetType(EventUnitInventoryItem()) == "CureAll")) {
                                    lv_vALUE = StringExternal("Param/Value/787C0697");
                                }
                                else {
                                    if ((UnitGetType(EventUnitInventoryItem()) == "ButsuItem")) {
                                        lv_vALUE = StringExternal("Param/Value/6ECFE07D");
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    TextTagCreate(lv_vALUE, 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumeableFloatingText_Init () {
    gt_ConsumeableFloatingText = TriggerCreate("gt_ConsumeableFloatingText_Func");
    TriggerAddEventUnitInventoryChange(gt_ConsumeableFloatingText, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item into Neutral
//--------------------------------------------------------------------------------------------------
bool gt_ItemintoNeutral_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "IsItem") == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemintoNeutral_Init () {
    gt_ItemintoNeutral = TriggerCreate("gt_ItemintoNeutral_Func");
    TriggerAddEventUnitRegion(gt_ItemintoNeutral, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_DayNightCycle_Init();
    gt_CreateScoreboard_Init();
    gt_ScoreboardHideShow_Init();
    gt_Music_Init();
    gt_GameValues_Init();
    gt_VictoryLossCheck_Init();
    gt_CreateMenu_Init();
    gt_UIButtons_Init();
    gt_DefaultPage_Init();
    gt_ShopClicked_Init();
    gt_MinionClicked_Init();
    gt_TalentClicked_Init();
    gt_MinionPanel_Init();
    gt_MinionNextPage_Init();
    gt_MinionPreviousPage_Init();
    gt_MinionPage1_Init();
    gt_MinionPage2_Init();
    gt_MinionPage3_Init();
    gt_HireMinion1_Init();
    gt_HireMinion2_Init();
    gt_HireMinion3_Init();
    gt_HireMinion4_Init();
    gt_HireMinion5_Init();
    gt_HireMinion6_Init();
    gt_HireMinion7_Init();
    gt_HireMinion8_Init();
    gt_HireMinion9_Init();
    gt_HireMinion10_Init();
    gt_HireMinion11_Init();
    gt_HireMinion12_Init();
    gt_HireMinion13_Init();
    gt_HireMinion14_Init();
    gt_HireMinion15_Init();
    gt_HireMinion16_Init();
    gt_HireMinion17_Init();
    gt_HireMinion18_Init();
    gt_HireMinion19_Init();
    gt_HireMinion20_Init();
    gt_HireMinion21_Init();
    gt_HireMinion22_Init();
    gt_HireMinion23_Init();
    gt_HireMinion24_Init();
    gt_HireMinion25_Init();
    gt_HireMinion26_Init();
    gt_HireMinion27_Init();
    gt_HireMinion28_Init();
    gt_HireMinion29_Init();
    gt_HireMinion30_Init();
    gt_HireMinion31_Init();
    gt_HireMinion32_Init();
    gt_HireMinion33_Init();
    gt_HireMinion34_Init();
    gt_HireMinion35_Init();
    gt_HireMinion36_Init();
    gt_HireMinion37_Init();
    gt_HireMinion38_Init();
    gt_HireMinion39_Init();
    gt_HireMinion40_Init();
    gt_HireMinion41_Init();
    gt_HireMinion42_Init();
    gt_HireMinion43_Init();
    gt_HireMinion44_Init();
    gt_HireMinion45_Init();
    gt_TalentsPanel_Init();
    gt_Talent0_Init();
    gt_Talent1_Init();
    gt_Talent2_Init();
    gt_Talent3_Init();
    gt_Talent4_Init();
    gt_Talent5_Init();
    gt_Talent6_Init();
    gt_Talent7_Init();
    gt_Talent8_Init();
    gt_Talent9_Init();
    gt_Talent10_Init();
    gt_Talent11_Init();
    gt_StorePanel_Init();
    gt_PurchaseHealthPot1_Init();
    gt_PurchaseEnergyPot1_Init();
    gt_PurchaseClericScrollI_Init();
    gt_PurchaseTravelersScrollI_Init();
    gt_PurchaseShieldI_Init();
    gt_PurchaseQuickswordI_Init();
    gt_PurchaseBattleAxeI_Init();
    gt_PurchaseWarHammerI_Init();
    gt_PurchaseHealthPot2_Init();
    gt_PurchaseEnergyPot2_Init();
    gt_PurchaseClericScrollII_Init();
    gt_PurchaseTravelersScrollII_Init();
    gt_PurchaseShieldII_Init();
    gt_PurchaseQuickswordII_Init();
    gt_PurchaseBattleAxeII_Init();
    gt_PurchaseWarHammerII_Init();
    gt_PurchaseHealthPot3_Init();
    gt_PurchaseEnergyPot3_Init();
    gt_PurchaseClericScrollIII_Init();
    gt_PurchaseTravelersScrollIII_Init();
    gt_PurchaseShieldIII_Init();
    gt_PurchaseQuickswordIII_Init();
    gt_PurchaseBattleAxeIII_Init();
    gt_PurchaseWarHammerIII_Init();
    gt_PurchaseEnchantedStaffI_Init();
    gt_PurchaseAdventurerBootsI_Init();
    gt_PurchaseFootmanGauntletsI_Init();
    gt_PurchaseGruntsBulwarkI_Init();
    gt_PurchaseSpiritualNecklace_Init();
    gt_PurchaseSobiMask_Init();
    gt_PurchaseSkullTrinket_Init();
    gt_PurchaseLuckyPocketWatch_Init();
    gt_PurchaseEnchantedStaffII_Init();
    gt_PurchaseAdventurerBootsII_Init();
    gt_PurchaseFootmanGauntletsII_Init();
    gt_PurchaseGruntsBulwarkII_Init();
    gt_PurchaseInfernalCore_Init();
    gt_PurchaseEssenceAbsorber_Init();
    gt_PurchaseScoundrelsDagger_Init();
    gt_PurchaseLostSheppardsStaff_Init();
    gt_PurchaseEnchantedStaffIII_Init();
    gt_PurchaseAdventurerBootsIII_Init();
    gt_PurchaseFootmanGauntletsIII_Init();
    gt_PurchaseGruntsBulwarkIII_Init();
    gt_PurchaseBerserkersMask_Init();
    gt_PurchaseWirtsUnclesLeg_Init();
    gt_PurchaseStrangeArtifact_Init();
    gt_PurchaseNaglesCoin_Init();
    gt_PurchaseTomeofStr_Init();
    gt_PurchaseTomeofAgility_Init();
    gt_PurchaseTomeofInt_Init();
    gt_StoreNextPage_Init();
    gt_StorePreviousPage_Init();
    gt_StorePage1_Init();
    gt_StorePage2_Init();
    gt_StorePage3_Init();
    gt_DialogItemMouseEnter_Init();
    gt_DialogItemMouseExit_Init();
    gt_LevelGain_Init();
    gt_HeroDeath_Init();
    gt_HeroResurrection_Init();
    gt_TreeMorph1_Init();
    gt_TreeMorph2_Init();
    gt_remainingheroes_Init();
    gt_removechosenHero_Init();
    gt_ReturntoHero_Init();
    gt_SelectionTimerPostTip_Init();
    gt_EndSelectTime_Init();
    gt_ForceEndSelectTime_Init();
    gt_RunSelectHero_Init();
    gt_ChoosePaladin_Init();
    gt_ChooseDemonHunter_Init();
    gt_ChooseMountainKing_Init();
    gt_ChooseKotG_Init();
    gt_ChooseBeastMaster_Init();
    gt_ChooseFarSeer_Init();
    gt_ChooseDeathknight_Init();
    gt_ChooseBlademaster_Init();
    gt_ChooseBloodmage_Init();
    gt_ChooseTaurenChieftain_Init();
    gt_ChooseShadowHunter_Init();
    gt_ChooseDreadlord_Init();
    gt_FallBackHideInfo_Init();
    gt_Wasted_Init();
    gt_Talkshow_Init();
    gt_Dog_Init();
    gt_Light_Init();
    gt_Intervention_Init();
    gt_Fart_Init();
    gt_Love_Init();
    gt_sellitem_Init();
    gt_GameTimerandCoreDialog_Init();
    gt_CoreDialogUpdateTeam1_Init();
    gt_CoreDialogUpdateTeam2_Init();
    gt_GameBegins_Init();
    gt_SpawnTimer_Init();
    gt_SpawnExpire_Init();
    gt_HireMercenaryGrunt_Init();
    gt_HireMercenaryFootman_Init();
    gt_ScaleGruntsFooties_Init();
    gt_GlobeSpawn_Init();
    gt_PostStunAttackMove9_Init();
    gt_PostStunAttackMove10_Init();
    gt_AttackMovePlayer9_Init();
    gt_AttackMovePlayer10_Init();
    gt_Player9Bounty_Init();
    gt_Player10Bounty_Init();
    gt_EssenceAbsorberHealth_Init();
    gt_EssenceAbsorberMana_Init();
    gt_LuckyCoin_Init();
    gt_InfernalCoreDamage_Init();
    gt_StrangeArtifactDamage_Init();
    gt_Evasion_Init();
    gt_Cleave_Init();
    gt_Smash_Init();
    gt_Taunt_Init();
    gt_DivineStrike_Init();
    gt_LesserTaunt_Init();
    gt_AssignBeastmaster_Init();
    gt_BrutalCleave_Init();
    gt_InnerBeast_Init();
    gt_Beastmaster05SecondCast_Init();
    gt_Beastmaster1SecondCast_Init();
    gt_Warcry_Init();
    gt_Hatred_Init();
    gt_AssignBlademaster_Init();
    gt_KazeLeapAnimation_Init();
    gt_KazeLeapDamage_Init();
    gt_AjairuStrike_Init();
    gt_GensoTrick_Init();
    gt_GensoDeath_Init();
    gt_TatsumakiStanceDefend_Init();
    gt_TatsumakiStanceAttack_Init();
    gt_AssignBloodmage_Init();
    gt_HemorrhageDamage_Init();
    gt_HemorrhageDoTDamage_Init();
    gt_HemorrhageCast_Init();
    gt_Hemorrhage_Init();
    gt_BloodElementalHemorrhage_Init();
    gt_BloodElementalSpawn_Init();
    gt_BloodElementalDamage_Init();
    gt_BloodElementalSize_Init();
    gt_BloodElementalGlobeSpawn_Init();
    gt_OceanofBloodStart_Init();
    gt_OceanofBloodChanneling_Init();
    gt_BloodsurgeCaster_Init();
    gt_BloodsurgeAllies_Init();
    gt_AssignDeathKnight_Init();
    gt_DeathsCalling_Init();
    gt_DeathsCallingDamage_Init();
    gt_GhoulArmy_Init();
    gt_BladeofZealCharge_Init();
    gt_BladeofZeal_Init();
    gt_UnholyPactTransform_Init();
    gt_UnholyPactActivate_Init();
    gt_DeathPlagueCast_Init();
    gt_DeathPlagueDamage_Init();
    gt_GhoulDies_Init();
    gt_AssignDemonHunter_Init();
    gt_SoulQuietus_Init();
    gt_RelinquishStart_Init();
    gt_RelinquishFinish_Init();
    gt_HellfireBurstDamage_Init();
    gt_HellfireBurnDamage_Init();
    gt_IncubusDoTDamage_Init();
    gt_IncubusInitialDamage_Init();
    gt_IncubusExplodeDamage_Init();
    gt_VampiricHeal_Init();
    gt_AssignDreadlord_Init();
    gt_Bloodfeast_Init();
    gt_OminousGaze_Init();
    gt_Shadowshift_Init();
    gt_ShadowshiftDamage_Init();
    gt_StopSoundDreadLord_Init();
    gt_VampiricRitualOrbSpawn_Init();
    gt_ChannelOrb_Init();
    gt_KillOrb_Init();
    gt_TasteforBloodBloodfeastCD_Init();
    gt_AssignFarSeer_Init();
    gt_ChainHeal_Init();
    gt_UnleashElements_Init();
    gt_FarSeerMute_Init();
    gt_ShieldsoftheStormShield_Init();
    gt_ShieldsoftheStormDamage_Init();
    gt_IncinerateDamage_Init();
    gt_PurgeDamage_Init();
    gt_AssignKotG_Init();
    gt_EntanglingRootsDamage_Init();
    gt_TreantMod_Init();
    gt_TreantRejuvenate_Init();
    gt_RejuvenatingRainHeal_Init();
    gt_RejuvenatingRainRecast_Init();
    gt_AwakenAncient_Init();
    gt_KeeperMute_Init();
    gt_AncientsGrace_Init();
    gt_AncientsGraceArmorInitialize_Init();
    gt_AncientsGraceArmorActivate_Init();
    gt_AssignMountainKing_Init();
    gt_CreateMightyHammer_Init();
    gt_DwarfMute_Init();
    gt_ThunderClap_Init();
    gt_MightyHammerDamage_Init();
    gt_ThunderclapDamage_Init();
    gt_ThunderclapMegaDamage_Init();
    gt_HeartoftheMountain_Init();
    gt_DivinePurpose_Init();
    gt_AssignPaladin_Init();
    gt_PaladinMute_Init();
    gt_Paladin1SecondCast_Init();
    gt_Paladin05SecondCast_Init();
    gt_LightsBlessingAll_Init();
    gt_RadianceDamage_Init();
    gt_RadianceBurn_Init();
    gt_RedemptionCast_Init();
    gt_EnlightenmentInitialize_Init();
    gt_EnlightenmentActivate_Init();
    gt_AssignShadowHunter_Init();
    gt_HexGain_Init();
    gt_SpiritMojoStack_Init();
    gt_SpiritMojoStackAlly_Init();
    gt_SerpentWardStats_Init();
    gt_SerpentWardManaRegen_Init();
    gt_DarkVoodooBladeFirstImpact_Init();
    gt_DarkVoodooBladeSecondImpact_Init();
    gt_DarkVoodooBladeThirdImapct_Init();
    gt_AssignTaurenChieftain_Init();
    gt_TaurenChieftain05SecondCast_Init();
    gt_TaurenMute_Init();
    gt_RemoveSpiritwalk_Init();
    gt_SpiritwalkDamage_Init();
    gt_IceTremorDamage_Init();
    gt_GlacialTotemPulseDamage_Init();
    gt_GlacialTotemInitialize_Init();
    gt_GlacialTotemApplyBehavior_Init();
    gt_EchoingTundraChannel_Init();
    gt_EchoingTundraCrystal_Init();
    gt_EchoingTundraCrystalDamage_Init();
    gt_SummonedIllusionLevel_Init();
    gt_IllusiveIllusionSet_Init();
    gt_NetherStormSpawn_Init();
    gt_SarkonFireSpawn_Init();
    gt_CallReinforcements_Init();
    gt_ConsumeableFloatingText_Init();
    gt_ItemintoNeutral_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
